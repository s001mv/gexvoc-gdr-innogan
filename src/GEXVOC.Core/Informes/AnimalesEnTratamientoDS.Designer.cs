//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión del motor en tiempo de ejecución:2.0.50727.1433
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace GEXVOC.Core.Informes {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("AnimalesEnTratamientoDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class AnimalesEnTratamientoDS : global::System.Data.DataSet {
        
        private TratEnfermedadDataTable tableTratEnfermedad;
        
        private RecetaDataTable tableReceta;
        
        private DiagAnimalDataTable tableDiagAnimal;
        
        private AnimalDataTable tableAnimal;
        
        private global::System.Data.DataRelation relationFK_Receta_TratEnfermedad;
        
        private global::System.Data.DataRelation relationTratEnfermedad_DiagAnimal;
        
        private global::System.Data.DataRelation relationAnimal_DiagAnimal;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AnimalesEnTratamientoDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected AnimalesEnTratamientoDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["TratEnfermedad"] != null)) {
                    base.Tables.Add(new TratEnfermedadDataTable(ds.Tables["TratEnfermedad"]));
                }
                if ((ds.Tables["Receta"] != null)) {
                    base.Tables.Add(new RecetaDataTable(ds.Tables["Receta"]));
                }
                if ((ds.Tables["DiagAnimal"] != null)) {
                    base.Tables.Add(new DiagAnimalDataTable(ds.Tables["DiagAnimal"]));
                }
                if ((ds.Tables["Animal"] != null)) {
                    base.Tables.Add(new AnimalDataTable(ds.Tables["Animal"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TratEnfermedadDataTable TratEnfermedad {
            get {
                return this.tableTratEnfermedad;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RecetaDataTable Receta {
            get {
                return this.tableReceta;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DiagAnimalDataTable DiagAnimal {
            get {
                return this.tableDiagAnimal;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AnimalDataTable Animal {
            get {
                return this.tableAnimal;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            AnimalesEnTratamientoDS cln = ((AnimalesEnTratamientoDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["TratEnfermedad"] != null)) {
                    base.Tables.Add(new TratEnfermedadDataTable(ds.Tables["TratEnfermedad"]));
                }
                if ((ds.Tables["Receta"] != null)) {
                    base.Tables.Add(new RecetaDataTable(ds.Tables["Receta"]));
                }
                if ((ds.Tables["DiagAnimal"] != null)) {
                    base.Tables.Add(new DiagAnimalDataTable(ds.Tables["DiagAnimal"]));
                }
                if ((ds.Tables["Animal"] != null)) {
                    base.Tables.Add(new AnimalDataTable(ds.Tables["Animal"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTratEnfermedad = ((TratEnfermedadDataTable)(base.Tables["TratEnfermedad"]));
            if ((initTable == true)) {
                if ((this.tableTratEnfermedad != null)) {
                    this.tableTratEnfermedad.InitVars();
                }
            }
            this.tableReceta = ((RecetaDataTable)(base.Tables["Receta"]));
            if ((initTable == true)) {
                if ((this.tableReceta != null)) {
                    this.tableReceta.InitVars();
                }
            }
            this.tableDiagAnimal = ((DiagAnimalDataTable)(base.Tables["DiagAnimal"]));
            if ((initTable == true)) {
                if ((this.tableDiagAnimal != null)) {
                    this.tableDiagAnimal.InitVars();
                }
            }
            this.tableAnimal = ((AnimalDataTable)(base.Tables["Animal"]));
            if ((initTable == true)) {
                if ((this.tableAnimal != null)) {
                    this.tableAnimal.InitVars();
                }
            }
            this.relationFK_Receta_TratEnfermedad = this.Relations["FK_Receta_TratEnfermedad"];
            this.relationTratEnfermedad_DiagAnimal = this.Relations["TratEnfermedad_DiagAnimal"];
            this.relationAnimal_DiagAnimal = this.Relations["Animal_DiagAnimal"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "AnimalesEnTratamientoDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/AnimalesEnTratamientoDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTratEnfermedad = new TratEnfermedadDataTable();
            base.Tables.Add(this.tableTratEnfermedad);
            this.tableReceta = new RecetaDataTable();
            base.Tables.Add(this.tableReceta);
            this.tableDiagAnimal = new DiagAnimalDataTable();
            base.Tables.Add(this.tableDiagAnimal);
            this.tableAnimal = new AnimalDataTable();
            base.Tables.Add(this.tableAnimal);
            this.relationFK_Receta_TratEnfermedad = new global::System.Data.DataRelation("FK_Receta_TratEnfermedad", new global::System.Data.DataColumn[] {
                        this.tableTratEnfermedad.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableReceta.IdTratamientoColumn}, false);
            this.Relations.Add(this.relationFK_Receta_TratEnfermedad);
            this.relationTratEnfermedad_DiagAnimal = new global::System.Data.DataRelation("TratEnfermedad_DiagAnimal", new global::System.Data.DataColumn[] {
                        this.tableTratEnfermedad.IdDiagnosticoColumn}, new global::System.Data.DataColumn[] {
                        this.tableDiagAnimal.IdColumn}, false);
            this.Relations.Add(this.relationTratEnfermedad_DiagAnimal);
            this.relationAnimal_DiagAnimal = new global::System.Data.DataRelation("Animal_DiagAnimal", new global::System.Data.DataColumn[] {
                        this.tableAnimal.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableDiagAnimal.IdAnimalColumn}, false);
            this.Relations.Add(this.relationAnimal_DiagAnimal);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTratEnfermedad() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReceta() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDiagAnimal() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAnimal() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            AnimalesEnTratamientoDS ds = new AnimalesEnTratamientoDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void TratEnfermedadRowChangeEventHandler(object sender, TratEnfermedadRowChangeEvent e);
        
        public delegate void RecetaRowChangeEventHandler(object sender, RecetaRowChangeEvent e);
        
        public delegate void DiagAnimalRowChangeEventHandler(object sender, DiagAnimalRowChangeEvent e);
        
        public delegate void AnimalRowChangeEventHandler(object sender, AnimalRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TratEnfermedadDataTable : global::System.Data.TypedTableBase<TratEnfermedadRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnIdDiagnostico;
            
            private global::System.Data.DataColumn columnIdVeterinario;
            
            private global::System.Data.DataColumn columnDetalle;
            
            private global::System.Data.DataColumn columnDuracion;
            
            private global::System.Data.DataColumn columnSupresionLeche;
            
            private global::System.Data.DataColumn columnSupresionCarne;
            
            private global::System.Data.DataColumn columnFecha;
            
            private global::System.Data.DataColumn columnDescPersonal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TratEnfermedadDataTable() {
                this.TableName = "TratEnfermedad";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TratEnfermedadDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TratEnfermedadDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdDiagnosticoColumn {
                get {
                    return this.columnIdDiagnostico;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdVeterinarioColumn {
                get {
                    return this.columnIdVeterinario;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DetalleColumn {
                get {
                    return this.columnDetalle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DuracionColumn {
                get {
                    return this.columnDuracion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupresionLecheColumn {
                get {
                    return this.columnSupresionLeche;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupresionCarneColumn {
                get {
                    return this.columnSupresionCarne;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FechaColumn {
                get {
                    return this.columnFecha;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescPersonalColumn {
                get {
                    return this.columnDescPersonal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TratEnfermedadRow this[int index] {
                get {
                    return ((TratEnfermedadRow)(this.Rows[index]));
                }
            }
            
            public event TratEnfermedadRowChangeEventHandler TratEnfermedadRowChanging;
            
            public event TratEnfermedadRowChangeEventHandler TratEnfermedadRowChanged;
            
            public event TratEnfermedadRowChangeEventHandler TratEnfermedadRowDeleting;
            
            public event TratEnfermedadRowChangeEventHandler TratEnfermedadRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTratEnfermedadRow(TratEnfermedadRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TratEnfermedadRow AddTratEnfermedadRow(int IdDiagnostico, int IdVeterinario, string Detalle, int Duracion, decimal SupresionLeche, decimal SupresionCarne, System.DateTime Fecha, string DescPersonal) {
                TratEnfermedadRow rowTratEnfermedadRow = ((TratEnfermedadRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        IdDiagnostico,
                        IdVeterinario,
                        Detalle,
                        Duracion,
                        SupresionLeche,
                        SupresionCarne,
                        Fecha,
                        DescPersonal};
                rowTratEnfermedadRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTratEnfermedadRow);
                return rowTratEnfermedadRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TratEnfermedadRow FindById(int Id) {
                return ((TratEnfermedadRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TratEnfermedadDataTable cln = ((TratEnfermedadDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TratEnfermedadDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnIdDiagnostico = base.Columns["IdDiagnostico"];
                this.columnIdVeterinario = base.Columns["IdVeterinario"];
                this.columnDetalle = base.Columns["Detalle"];
                this.columnDuracion = base.Columns["Duracion"];
                this.columnSupresionLeche = base.Columns["SupresionLeche"];
                this.columnSupresionCarne = base.Columns["SupresionCarne"];
                this.columnFecha = base.Columns["Fecha"];
                this.columnDescPersonal = base.Columns["DescPersonal"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnIdDiagnostico = new global::System.Data.DataColumn("IdDiagnostico", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdDiagnostico);
                this.columnIdVeterinario = new global::System.Data.DataColumn("IdVeterinario", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdVeterinario);
                this.columnDetalle = new global::System.Data.DataColumn("Detalle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDetalle);
                this.columnDuracion = new global::System.Data.DataColumn("Duracion", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDuracion);
                this.columnSupresionLeche = new global::System.Data.DataColumn("SupresionLeche", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupresionLeche);
                this.columnSupresionCarne = new global::System.Data.DataColumn("SupresionCarne", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupresionCarne);
                this.columnFecha = new global::System.Data.DataColumn("Fecha", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFecha);
                this.columnDescPersonal = new global::System.Data.DataColumn("DescPersonal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescPersonal);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AutoIncrementSeed = -1;
                this.columnId.AutoIncrementStep = -1;
                this.columnId.AllowDBNull = false;
                this.columnId.ReadOnly = true;
                this.columnId.Unique = true;
                this.columnIdDiagnostico.AllowDBNull = false;
                this.columnDetalle.MaxLength = 150;
                this.columnDuracion.AllowDBNull = false;
                this.columnFecha.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TratEnfermedadRow NewTratEnfermedadRow() {
                return ((TratEnfermedadRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TratEnfermedadRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TratEnfermedadRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TratEnfermedadRowChanged != null)) {
                    this.TratEnfermedadRowChanged(this, new TratEnfermedadRowChangeEvent(((TratEnfermedadRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TratEnfermedadRowChanging != null)) {
                    this.TratEnfermedadRowChanging(this, new TratEnfermedadRowChangeEvent(((TratEnfermedadRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TratEnfermedadRowDeleted != null)) {
                    this.TratEnfermedadRowDeleted(this, new TratEnfermedadRowChangeEvent(((TratEnfermedadRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TratEnfermedadRowDeleting != null)) {
                    this.TratEnfermedadRowDeleting(this, new TratEnfermedadRowChangeEvent(((TratEnfermedadRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTratEnfermedadRow(TratEnfermedadRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AnimalesEnTratamientoDS ds = new AnimalesEnTratamientoDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TratEnfermedadDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RecetaDataTable : global::System.Data.TypedTableBase<RecetaRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnIdTratamiento;
            
            private global::System.Data.DataColumn columnIdMedicamento;
            
            private global::System.Data.DataColumn columnDosis;
            
            private global::System.Data.DataColumn columnDuracion;
            
            private global::System.Data.DataColumn columnFecha;
            
            private global::System.Data.DataColumn columnDescMedicamento;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecetaDataTable() {
                this.TableName = "Receta";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RecetaDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RecetaDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdTratamientoColumn {
                get {
                    return this.columnIdTratamiento;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdMedicamentoColumn {
                get {
                    return this.columnIdMedicamento;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DosisColumn {
                get {
                    return this.columnDosis;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DuracionColumn {
                get {
                    return this.columnDuracion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FechaColumn {
                get {
                    return this.columnFecha;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescMedicamentoColumn {
                get {
                    return this.columnDescMedicamento;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecetaRow this[int index] {
                get {
                    return ((RecetaRow)(this.Rows[index]));
                }
            }
            
            public event RecetaRowChangeEventHandler RecetaRowChanging;
            
            public event RecetaRowChangeEventHandler RecetaRowChanged;
            
            public event RecetaRowChangeEventHandler RecetaRowDeleting;
            
            public event RecetaRowChangeEventHandler RecetaRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRecetaRow(RecetaRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecetaRow AddRecetaRow(TratEnfermedadRow parentTratEnfermedadRowByFK_Receta_TratEnfermedad, int IdMedicamento, string Dosis, int Duracion, System.DateTime Fecha, string DescMedicamento) {
                RecetaRow rowRecetaRow = ((RecetaRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        IdMedicamento,
                        Dosis,
                        Duracion,
                        Fecha,
                        DescMedicamento};
                if ((parentTratEnfermedadRowByFK_Receta_TratEnfermedad != null)) {
                    columnValuesArray[1] = parentTratEnfermedadRowByFK_Receta_TratEnfermedad[0];
                }
                rowRecetaRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRecetaRow);
                return rowRecetaRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecetaRow FindById(int Id) {
                return ((RecetaRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RecetaDataTable cln = ((RecetaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RecetaDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnIdTratamiento = base.Columns["IdTratamiento"];
                this.columnIdMedicamento = base.Columns["IdMedicamento"];
                this.columnDosis = base.Columns["Dosis"];
                this.columnDuracion = base.Columns["Duracion"];
                this.columnFecha = base.Columns["Fecha"];
                this.columnDescMedicamento = base.Columns["DescMedicamento"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnIdTratamiento = new global::System.Data.DataColumn("IdTratamiento", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdTratamiento);
                this.columnIdMedicamento = new global::System.Data.DataColumn("IdMedicamento", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdMedicamento);
                this.columnDosis = new global::System.Data.DataColumn("Dosis", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDosis);
                this.columnDuracion = new global::System.Data.DataColumn("Duracion", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDuracion);
                this.columnFecha = new global::System.Data.DataColumn("Fecha", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFecha);
                this.columnDescMedicamento = new global::System.Data.DataColumn("DescMedicamento", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescMedicamento);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AutoIncrementSeed = -1;
                this.columnId.AutoIncrementStep = -1;
                this.columnId.AllowDBNull = false;
                this.columnId.ReadOnly = true;
                this.columnId.Unique = true;
                this.columnIdTratamiento.AllowDBNull = false;
                this.columnIdMedicamento.AllowDBNull = false;
                this.columnDosis.MaxLength = 150;
                this.columnDuracion.AllowDBNull = false;
                this.columnFecha.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecetaRow NewRecetaRow() {
                return ((RecetaRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RecetaRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RecetaRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RecetaRowChanged != null)) {
                    this.RecetaRowChanged(this, new RecetaRowChangeEvent(((RecetaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RecetaRowChanging != null)) {
                    this.RecetaRowChanging(this, new RecetaRowChangeEvent(((RecetaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RecetaRowDeleted != null)) {
                    this.RecetaRowDeleted(this, new RecetaRowChangeEvent(((RecetaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RecetaRowDeleting != null)) {
                    this.RecetaRowDeleting(this, new RecetaRowChangeEvent(((RecetaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRecetaRow(RecetaRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AnimalesEnTratamientoDS ds = new AnimalesEnTratamientoDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RecetaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DiagAnimalDataTable : global::System.Data.TypedTableBase<DiagAnimalRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnIdAnimal;
            
            private global::System.Data.DataColumn columnIdEnfermedad;
            
            private global::System.Data.DataColumn columnIdVeterinario;
            
            private global::System.Data.DataColumn columnDiagnostico;
            
            private global::System.Data.DataColumn columnFecha;
            
            private global::System.Data.DataColumn columnDescEnfermedad;
            
            private global::System.Data.DataColumn columnDescPersonal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagAnimalDataTable() {
                this.TableName = "DiagAnimal";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DiagAnimalDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DiagAnimalDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdAnimalColumn {
                get {
                    return this.columnIdAnimal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdEnfermedadColumn {
                get {
                    return this.columnIdEnfermedad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdVeterinarioColumn {
                get {
                    return this.columnIdVeterinario;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiagnosticoColumn {
                get {
                    return this.columnDiagnostico;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FechaColumn {
                get {
                    return this.columnFecha;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescEnfermedadColumn {
                get {
                    return this.columnDescEnfermedad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescPersonalColumn {
                get {
                    return this.columnDescPersonal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagAnimalRow this[int index] {
                get {
                    return ((DiagAnimalRow)(this.Rows[index]));
                }
            }
            
            public event DiagAnimalRowChangeEventHandler DiagAnimalRowChanging;
            
            public event DiagAnimalRowChangeEventHandler DiagAnimalRowChanged;
            
            public event DiagAnimalRowChangeEventHandler DiagAnimalRowDeleting;
            
            public event DiagAnimalRowChangeEventHandler DiagAnimalRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDiagAnimalRow(DiagAnimalRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagAnimalRow AddDiagAnimalRow(AnimalRow parentAnimalRowByAnimal_DiagAnimal, int IdEnfermedad, int IdVeterinario, string Diagnostico, System.DateTime Fecha, string DescEnfermedad, string DescPersonal) {
                DiagAnimalRow rowDiagAnimalRow = ((DiagAnimalRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        IdEnfermedad,
                        IdVeterinario,
                        Diagnostico,
                        Fecha,
                        DescEnfermedad,
                        DescPersonal};
                if ((parentAnimalRowByAnimal_DiagAnimal != null)) {
                    columnValuesArray[1] = parentAnimalRowByAnimal_DiagAnimal[0];
                }
                rowDiagAnimalRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDiagAnimalRow);
                return rowDiagAnimalRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagAnimalRow FindById(int Id) {
                return ((DiagAnimalRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DiagAnimalDataTable cln = ((DiagAnimalDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DiagAnimalDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnIdAnimal = base.Columns["IdAnimal"];
                this.columnIdEnfermedad = base.Columns["IdEnfermedad"];
                this.columnIdVeterinario = base.Columns["IdVeterinario"];
                this.columnDiagnostico = base.Columns["Diagnostico"];
                this.columnFecha = base.Columns["Fecha"];
                this.columnDescEnfermedad = base.Columns["DescEnfermedad"];
                this.columnDescPersonal = base.Columns["DescPersonal"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnIdAnimal = new global::System.Data.DataColumn("IdAnimal", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdAnimal);
                this.columnIdEnfermedad = new global::System.Data.DataColumn("IdEnfermedad", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdEnfermedad);
                this.columnIdVeterinario = new global::System.Data.DataColumn("IdVeterinario", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdVeterinario);
                this.columnDiagnostico = new global::System.Data.DataColumn("Diagnostico", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiagnostico);
                this.columnFecha = new global::System.Data.DataColumn("Fecha", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFecha);
                this.columnDescEnfermedad = new global::System.Data.DataColumn("DescEnfermedad", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescEnfermedad);
                this.columnDescPersonal = new global::System.Data.DataColumn("DescPersonal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescPersonal);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AutoIncrementSeed = -1;
                this.columnId.AutoIncrementStep = -1;
                this.columnId.AllowDBNull = false;
                this.columnId.ReadOnly = true;
                this.columnId.Unique = true;
                this.columnIdAnimal.AllowDBNull = false;
                this.columnDiagnostico.MaxLength = 2147483647;
                this.columnFecha.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagAnimalRow NewDiagAnimalRow() {
                return ((DiagAnimalRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DiagAnimalRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DiagAnimalRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DiagAnimalRowChanged != null)) {
                    this.DiagAnimalRowChanged(this, new DiagAnimalRowChangeEvent(((DiagAnimalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DiagAnimalRowChanging != null)) {
                    this.DiagAnimalRowChanging(this, new DiagAnimalRowChangeEvent(((DiagAnimalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DiagAnimalRowDeleted != null)) {
                    this.DiagAnimalRowDeleted(this, new DiagAnimalRowChangeEvent(((DiagAnimalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DiagAnimalRowDeleting != null)) {
                    this.DiagAnimalRowDeleting(this, new DiagAnimalRowChangeEvent(((DiagAnimalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDiagAnimalRow(DiagAnimalRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AnimalesEnTratamientoDS ds = new AnimalesEnTratamientoDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DiagAnimalDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AnimalDataTable : global::System.Data.TypedTableBase<AnimalRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnNombre;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnimalDataTable() {
                this.TableName = "Animal";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AnimalDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AnimalDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NombreColumn {
                get {
                    return this.columnNombre;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnimalRow this[int index] {
                get {
                    return ((AnimalRow)(this.Rows[index]));
                }
            }
            
            public event AnimalRowChangeEventHandler AnimalRowChanging;
            
            public event AnimalRowChangeEventHandler AnimalRowChanged;
            
            public event AnimalRowChangeEventHandler AnimalRowDeleting;
            
            public event AnimalRowChangeEventHandler AnimalRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAnimalRow(AnimalRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnimalRow AddAnimalRow(string Nombre) {
                AnimalRow rowAnimalRow = ((AnimalRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Nombre};
                rowAnimalRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAnimalRow);
                return rowAnimalRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnimalRow FindById(int Id) {
                return ((AnimalRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AnimalDataTable cln = ((AnimalDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AnimalDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnNombre = base.Columns["Nombre"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnNombre = new global::System.Data.DataColumn("Nombre", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNombre);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AutoIncrementSeed = -1;
                this.columnId.AutoIncrementStep = -1;
                this.columnId.AllowDBNull = false;
                this.columnId.ReadOnly = true;
                this.columnId.Unique = true;
                this.columnNombre.AllowDBNull = false;
                this.columnNombre.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnimalRow NewAnimalRow() {
                return ((AnimalRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AnimalRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AnimalRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AnimalRowChanged != null)) {
                    this.AnimalRowChanged(this, new AnimalRowChangeEvent(((AnimalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AnimalRowChanging != null)) {
                    this.AnimalRowChanging(this, new AnimalRowChangeEvent(((AnimalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AnimalRowDeleted != null)) {
                    this.AnimalRowDeleted(this, new AnimalRowChangeEvent(((AnimalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AnimalRowDeleting != null)) {
                    this.AnimalRowDeleting(this, new AnimalRowChangeEvent(((AnimalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAnimalRow(AnimalRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AnimalesEnTratamientoDS ds = new AnimalesEnTratamientoDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AnimalDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TratEnfermedadRow : global::System.Data.DataRow {
            
            private TratEnfermedadDataTable tableTratEnfermedad;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TratEnfermedadRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTratEnfermedad = ((TratEnfermedadDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableTratEnfermedad.IdColumn]));
                }
                set {
                    this[this.tableTratEnfermedad.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IdDiagnostico {
                get {
                    return ((int)(this[this.tableTratEnfermedad.IdDiagnosticoColumn]));
                }
                set {
                    this[this.tableTratEnfermedad.IdDiagnosticoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IdVeterinario {
                get {
                    try {
                        return ((int)(this[this.tableTratEnfermedad.IdVeterinarioColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'IdVeterinario\' de la tabla \'TratEnfermedad\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableTratEnfermedad.IdVeterinarioColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Detalle {
                get {
                    try {
                        return ((string)(this[this.tableTratEnfermedad.DetalleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Detalle\' de la tabla \'TratEnfermedad\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableTratEnfermedad.DetalleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Duracion {
                get {
                    return ((int)(this[this.tableTratEnfermedad.DuracionColumn]));
                }
                set {
                    this[this.tableTratEnfermedad.DuracionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SupresionLeche {
                get {
                    try {
                        return ((decimal)(this[this.tableTratEnfermedad.SupresionLecheColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'SupresionLeche\' de la tabla \'TratEnfermedad\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableTratEnfermedad.SupresionLecheColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SupresionCarne {
                get {
                    try {
                        return ((decimal)(this[this.tableTratEnfermedad.SupresionCarneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'SupresionCarne\' de la tabla \'TratEnfermedad\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableTratEnfermedad.SupresionCarneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Fecha {
                get {
                    return ((global::System.DateTime)(this[this.tableTratEnfermedad.FechaColumn]));
                }
                set {
                    this[this.tableTratEnfermedad.FechaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DescPersonal {
                get {
                    try {
                        return ((string)(this[this.tableTratEnfermedad.DescPersonalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'DescPersonal\' de la tabla \'TratEnfermedad\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableTratEnfermedad.DescPersonalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdVeterinarioNull() {
                return this.IsNull(this.tableTratEnfermedad.IdVeterinarioColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdVeterinarioNull() {
                this[this.tableTratEnfermedad.IdVeterinarioColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDetalleNull() {
                return this.IsNull(this.tableTratEnfermedad.DetalleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDetalleNull() {
                this[this.tableTratEnfermedad.DetalleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupresionLecheNull() {
                return this.IsNull(this.tableTratEnfermedad.SupresionLecheColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupresionLecheNull() {
                this[this.tableTratEnfermedad.SupresionLecheColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupresionCarneNull() {
                return this.IsNull(this.tableTratEnfermedad.SupresionCarneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupresionCarneNull() {
                this[this.tableTratEnfermedad.SupresionCarneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescPersonalNull() {
                return this.IsNull(this.tableTratEnfermedad.DescPersonalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescPersonalNull() {
                this[this.tableTratEnfermedad.DescPersonalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecetaRow[] GetRecetaRows() {
                if ((this.Table.ChildRelations["FK_Receta_TratEnfermedad"] == null)) {
                    return new RecetaRow[0];
                }
                else {
                    return ((RecetaRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Receta_TratEnfermedad"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagAnimalRow[] GetDiagAnimalRows() {
                if ((this.Table.ChildRelations["TratEnfermedad_DiagAnimal"] == null)) {
                    return new DiagAnimalRow[0];
                }
                else {
                    return ((DiagAnimalRow[])(base.GetChildRows(this.Table.ChildRelations["TratEnfermedad_DiagAnimal"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RecetaRow : global::System.Data.DataRow {
            
            private RecetaDataTable tableReceta;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RecetaRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReceta = ((RecetaDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableReceta.IdColumn]));
                }
                set {
                    this[this.tableReceta.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IdTratamiento {
                get {
                    return ((int)(this[this.tableReceta.IdTratamientoColumn]));
                }
                set {
                    this[this.tableReceta.IdTratamientoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IdMedicamento {
                get {
                    return ((int)(this[this.tableReceta.IdMedicamentoColumn]));
                }
                set {
                    this[this.tableReceta.IdMedicamentoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Dosis {
                get {
                    try {
                        return ((string)(this[this.tableReceta.DosisColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Dosis\' de la tabla \'Receta\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceta.DosisColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Duracion {
                get {
                    return ((int)(this[this.tableReceta.DuracionColumn]));
                }
                set {
                    this[this.tableReceta.DuracionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Fecha {
                get {
                    return ((global::System.DateTime)(this[this.tableReceta.FechaColumn]));
                }
                set {
                    this[this.tableReceta.FechaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DescMedicamento {
                get {
                    try {
                        return ((string)(this[this.tableReceta.DescMedicamentoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'DescMedicamento\' de la tabla \'Receta\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceta.DescMedicamentoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TratEnfermedadRow TratEnfermedadRow {
                get {
                    return ((TratEnfermedadRow)(this.GetParentRow(this.Table.ParentRelations["FK_Receta_TratEnfermedad"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Receta_TratEnfermedad"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDosisNull() {
                return this.IsNull(this.tableReceta.DosisColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDosisNull() {
                this[this.tableReceta.DosisColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescMedicamentoNull() {
                return this.IsNull(this.tableReceta.DescMedicamentoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescMedicamentoNull() {
                this[this.tableReceta.DescMedicamentoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DiagAnimalRow : global::System.Data.DataRow {
            
            private DiagAnimalDataTable tableDiagAnimal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DiagAnimalRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDiagAnimal = ((DiagAnimalDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableDiagAnimal.IdColumn]));
                }
                set {
                    this[this.tableDiagAnimal.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IdAnimal {
                get {
                    return ((int)(this[this.tableDiagAnimal.IdAnimalColumn]));
                }
                set {
                    this[this.tableDiagAnimal.IdAnimalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IdEnfermedad {
                get {
                    try {
                        return ((int)(this[this.tableDiagAnimal.IdEnfermedadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'IdEnfermedad\' de la tabla \'DiagAnimal\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagAnimal.IdEnfermedadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IdVeterinario {
                get {
                    try {
                        return ((int)(this[this.tableDiagAnimal.IdVeterinarioColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'IdVeterinario\' de la tabla \'DiagAnimal\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagAnimal.IdVeterinarioColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Diagnostico {
                get {
                    try {
                        return ((string)(this[this.tableDiagAnimal.DiagnosticoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Diagnostico\' de la tabla \'DiagAnimal\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagAnimal.DiagnosticoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Fecha {
                get {
                    return ((global::System.DateTime)(this[this.tableDiagAnimal.FechaColumn]));
                }
                set {
                    this[this.tableDiagAnimal.FechaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DescEnfermedad {
                get {
                    try {
                        return ((string)(this[this.tableDiagAnimal.DescEnfermedadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'DescEnfermedad\' de la tabla \'DiagAnimal\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagAnimal.DescEnfermedadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DescPersonal {
                get {
                    try {
                        return ((string)(this[this.tableDiagAnimal.DescPersonalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'DescPersonal\' de la tabla \'DiagAnimal\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagAnimal.DescPersonalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TratEnfermedadRow TratEnfermedadRow {
                get {
                    return ((TratEnfermedadRow)(this.GetParentRow(this.Table.ParentRelations["TratEnfermedad_DiagAnimal"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TratEnfermedad_DiagAnimal"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnimalRow AnimalRow {
                get {
                    return ((AnimalRow)(this.GetParentRow(this.Table.ParentRelations["Animal_DiagAnimal"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Animal_DiagAnimal"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdEnfermedadNull() {
                return this.IsNull(this.tableDiagAnimal.IdEnfermedadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdEnfermedadNull() {
                this[this.tableDiagAnimal.IdEnfermedadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdVeterinarioNull() {
                return this.IsNull(this.tableDiagAnimal.IdVeterinarioColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdVeterinarioNull() {
                this[this.tableDiagAnimal.IdVeterinarioColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiagnosticoNull() {
                return this.IsNull(this.tableDiagAnimal.DiagnosticoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiagnosticoNull() {
                this[this.tableDiagAnimal.DiagnosticoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescEnfermedadNull() {
                return this.IsNull(this.tableDiagAnimal.DescEnfermedadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescEnfermedadNull() {
                this[this.tableDiagAnimal.DescEnfermedadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescPersonalNull() {
                return this.IsNull(this.tableDiagAnimal.DescPersonalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescPersonalNull() {
                this[this.tableDiagAnimal.DescPersonalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AnimalRow : global::System.Data.DataRow {
            
            private AnimalDataTable tableAnimal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AnimalRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAnimal = ((AnimalDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableAnimal.IdColumn]));
                }
                set {
                    this[this.tableAnimal.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Nombre {
                get {
                    return ((string)(this[this.tableAnimal.NombreColumn]));
                }
                set {
                    this[this.tableAnimal.NombreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagAnimalRow[] GetDiagAnimalRows() {
                if ((this.Table.ChildRelations["Animal_DiagAnimal"] == null)) {
                    return new DiagAnimalRow[0];
                }
                else {
                    return ((DiagAnimalRow[])(base.GetChildRows(this.Table.ChildRelations["Animal_DiagAnimal"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TratEnfermedadRowChangeEvent : global::System.EventArgs {
            
            private TratEnfermedadRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TratEnfermedadRowChangeEvent(TratEnfermedadRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TratEnfermedadRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RecetaRowChangeEvent : global::System.EventArgs {
            
            private RecetaRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecetaRowChangeEvent(RecetaRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecetaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DiagAnimalRowChangeEvent : global::System.EventArgs {
            
            private DiagAnimalRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagAnimalRowChangeEvent(DiagAnimalRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagAnimalRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AnimalRowChangeEvent : global::System.EventArgs {
            
            private AnimalRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnimalRowChangeEvent(AnimalRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnimalRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591