//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión del motor en tiempo de ejecución:2.0.50727.3053
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace GEXVOC.Core.Informes {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("PrevalenciaEnfermedadesDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class PrevalenciaEnfermedadesDS : global::System.Data.DataSet {
        
        private AnimalDataTable tableAnimal;
        
        private DiagAnimalDataTable tableDiagAnimal;
        
        private global::System.Data.DataRelation relationDiagAnimal_Animal;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PrevalenciaEnfermedadesDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected PrevalenciaEnfermedadesDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Animal"] != null)) {
                    base.Tables.Add(new AnimalDataTable(ds.Tables["Animal"]));
                }
                if ((ds.Tables["DiagAnimal"] != null)) {
                    base.Tables.Add(new DiagAnimalDataTable(ds.Tables["DiagAnimal"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AnimalDataTable Animal {
            get {
                return this.tableAnimal;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DiagAnimalDataTable DiagAnimal {
            get {
                return this.tableDiagAnimal;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            PrevalenciaEnfermedadesDS cln = ((PrevalenciaEnfermedadesDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Animal"] != null)) {
                    base.Tables.Add(new AnimalDataTable(ds.Tables["Animal"]));
                }
                if ((ds.Tables["DiagAnimal"] != null)) {
                    base.Tables.Add(new DiagAnimalDataTable(ds.Tables["DiagAnimal"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableAnimal = ((AnimalDataTable)(base.Tables["Animal"]));
            if ((initTable == true)) {
                if ((this.tableAnimal != null)) {
                    this.tableAnimal.InitVars();
                }
            }
            this.tableDiagAnimal = ((DiagAnimalDataTable)(base.Tables["DiagAnimal"]));
            if ((initTable == true)) {
                if ((this.tableDiagAnimal != null)) {
                    this.tableDiagAnimal.InitVars();
                }
            }
            this.relationDiagAnimal_Animal = this.Relations["DiagAnimal_Animal"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "PrevalenciaEnfermedadesDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PrevalenciaEnfermedadesDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableAnimal = new AnimalDataTable();
            base.Tables.Add(this.tableAnimal);
            this.tableDiagAnimal = new DiagAnimalDataTable();
            base.Tables.Add(this.tableDiagAnimal);
            this.relationDiagAnimal_Animal = new global::System.Data.DataRelation("DiagAnimal_Animal", new global::System.Data.DataColumn[] {
                        this.tableDiagAnimal.IdAnimalColumn}, new global::System.Data.DataColumn[] {
                        this.tableAnimal.IdColumn}, false);
            this.Relations.Add(this.relationDiagAnimal_Animal);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAnimal() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDiagAnimal() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            PrevalenciaEnfermedadesDS ds = new PrevalenciaEnfermedadesDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void AnimalRowChangeEventHandler(object sender, AnimalRowChangeEvent e);
        
        public delegate void DiagAnimalRowChangeEventHandler(object sender, DiagAnimalRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AnimalDataTable : global::System.Data.TypedTableBase<AnimalRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnIdExplotacion;
            
            private global::System.Data.DataColumn columnIdRaza;
            
            private global::System.Data.DataColumn columnIdEstado;
            
            private global::System.Data.DataColumn columnIdTalla;
            
            private global::System.Data.DataColumn columnIdConformacion;
            
            private global::System.Data.DataColumn columnDIB;
            
            private global::System.Data.DataColumn columnCrotal;
            
            private global::System.Data.DataColumn columnTatuaje;
            
            private global::System.Data.DataColumn columnGenotipo;
            
            private global::System.Data.DataColumn columnNombre;
            
            private global::System.Data.DataColumn columnFechaNacimiento;
            
            private global::System.Data.DataColumn columnFechaDestete;
            
            private global::System.Data.DataColumn columnSexo;
            
            private global::System.Data.DataColumn columnMorfologia;
            
            private global::System.Data.DataColumn columnDescRaza;
            
            private global::System.Data.DataColumn columnDescEspecie;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnimalDataTable() {
                this.TableName = "Animal";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AnimalDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AnimalDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdExplotacionColumn {
                get {
                    return this.columnIdExplotacion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdRazaColumn {
                get {
                    return this.columnIdRaza;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdEstadoColumn {
                get {
                    return this.columnIdEstado;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdTallaColumn {
                get {
                    return this.columnIdTalla;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdConformacionColumn {
                get {
                    return this.columnIdConformacion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DIBColumn {
                get {
                    return this.columnDIB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CrotalColumn {
                get {
                    return this.columnCrotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TatuajeColumn {
                get {
                    return this.columnTatuaje;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GenotipoColumn {
                get {
                    return this.columnGenotipo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NombreColumn {
                get {
                    return this.columnNombre;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FechaNacimientoColumn {
                get {
                    return this.columnFechaNacimiento;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FechaDesteteColumn {
                get {
                    return this.columnFechaDestete;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SexoColumn {
                get {
                    return this.columnSexo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MorfologiaColumn {
                get {
                    return this.columnMorfologia;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescRazaColumn {
                get {
                    return this.columnDescRaza;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescEspecieColumn {
                get {
                    return this.columnDescEspecie;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnimalRow this[int index] {
                get {
                    return ((AnimalRow)(this.Rows[index]));
                }
            }
            
            public event AnimalRowChangeEventHandler AnimalRowChanging;
            
            public event AnimalRowChangeEventHandler AnimalRowChanged;
            
            public event AnimalRowChangeEventHandler AnimalRowDeleting;
            
            public event AnimalRowChangeEventHandler AnimalRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAnimalRow(AnimalRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnimalRow AddAnimalRow(
                        int IdExplotacion, 
                        int IdRaza, 
                        int IdEstado, 
                        int IdTalla, 
                        int IdConformacion, 
                        string DIB, 
                        string Crotal, 
                        string Tatuaje, 
                        string Genotipo, 
                        string Nombre, 
                        System.DateTime FechaNacimiento, 
                        System.DateTime FechaDestete, 
                        string Sexo, 
                        int Morfologia, 
                        string DescRaza, 
                        string DescEspecie) {
                AnimalRow rowAnimalRow = ((AnimalRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        IdExplotacion,
                        IdRaza,
                        IdEstado,
                        IdTalla,
                        IdConformacion,
                        DIB,
                        Crotal,
                        Tatuaje,
                        Genotipo,
                        Nombre,
                        FechaNacimiento,
                        FechaDestete,
                        Sexo,
                        Morfologia,
                        DescRaza,
                        DescEspecie};
                rowAnimalRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAnimalRow);
                return rowAnimalRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnimalRow FindById(int Id) {
                return ((AnimalRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AnimalDataTable cln = ((AnimalDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AnimalDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnIdExplotacion = base.Columns["IdExplotacion"];
                this.columnIdRaza = base.Columns["IdRaza"];
                this.columnIdEstado = base.Columns["IdEstado"];
                this.columnIdTalla = base.Columns["IdTalla"];
                this.columnIdConformacion = base.Columns["IdConformacion"];
                this.columnDIB = base.Columns["DIB"];
                this.columnCrotal = base.Columns["Crotal"];
                this.columnTatuaje = base.Columns["Tatuaje"];
                this.columnGenotipo = base.Columns["Genotipo"];
                this.columnNombre = base.Columns["Nombre"];
                this.columnFechaNacimiento = base.Columns["FechaNacimiento"];
                this.columnFechaDestete = base.Columns["FechaDestete"];
                this.columnSexo = base.Columns["Sexo"];
                this.columnMorfologia = base.Columns["Morfologia"];
                this.columnDescRaza = base.Columns["DescRaza"];
                this.columnDescEspecie = base.Columns["DescEspecie"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnIdExplotacion = new global::System.Data.DataColumn("IdExplotacion", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdExplotacion);
                this.columnIdRaza = new global::System.Data.DataColumn("IdRaza", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdRaza);
                this.columnIdEstado = new global::System.Data.DataColumn("IdEstado", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdEstado);
                this.columnIdTalla = new global::System.Data.DataColumn("IdTalla", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdTalla);
                this.columnIdConformacion = new global::System.Data.DataColumn("IdConformacion", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdConformacion);
                this.columnDIB = new global::System.Data.DataColumn("DIB", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDIB);
                this.columnCrotal = new global::System.Data.DataColumn("Crotal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCrotal);
                this.columnTatuaje = new global::System.Data.DataColumn("Tatuaje", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTatuaje);
                this.columnGenotipo = new global::System.Data.DataColumn("Genotipo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGenotipo);
                this.columnNombre = new global::System.Data.DataColumn("Nombre", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNombre);
                this.columnFechaNacimiento = new global::System.Data.DataColumn("FechaNacimiento", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFechaNacimiento);
                this.columnFechaDestete = new global::System.Data.DataColumn("FechaDestete", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFechaDestete);
                this.columnSexo = new global::System.Data.DataColumn("Sexo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSexo);
                this.columnMorfologia = new global::System.Data.DataColumn("Morfologia", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMorfologia);
                this.columnDescRaza = new global::System.Data.DataColumn("DescRaza", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescRaza);
                this.columnDescEspecie = new global::System.Data.DataColumn("DescEspecie", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescEspecie);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AutoIncrementSeed = -1;
                this.columnId.AutoIncrementStep = -1;
                this.columnId.AllowDBNull = false;
                this.columnId.ReadOnly = true;
                this.columnId.Unique = true;
                this.columnIdExplotacion.AllowDBNull = false;
                this.columnIdRaza.AllowDBNull = false;
                this.columnDIB.MaxLength = 14;
                this.columnCrotal.MaxLength = 12;
                this.columnTatuaje.MaxLength = 8;
                this.columnGenotipo.MaxLength = 7;
                this.columnNombre.AllowDBNull = false;
                this.columnNombre.MaxLength = 50;
                this.columnFechaNacimiento.AllowDBNull = false;
                this.columnSexo.AllowDBNull = false;
                this.columnSexo.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnimalRow NewAnimalRow() {
                return ((AnimalRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AnimalRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AnimalRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AnimalRowChanged != null)) {
                    this.AnimalRowChanged(this, new AnimalRowChangeEvent(((AnimalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AnimalRowChanging != null)) {
                    this.AnimalRowChanging(this, new AnimalRowChangeEvent(((AnimalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AnimalRowDeleted != null)) {
                    this.AnimalRowDeleted(this, new AnimalRowChangeEvent(((AnimalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AnimalRowDeleting != null)) {
                    this.AnimalRowDeleting(this, new AnimalRowChangeEvent(((AnimalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAnimalRow(AnimalRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PrevalenciaEnfermedadesDS ds = new PrevalenciaEnfermedadesDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AnimalDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DiagAnimalDataTable : global::System.Data.TypedTableBase<DiagAnimalRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnIdAnimal;
            
            private global::System.Data.DataColumn columnIdEnfermedad;
            
            private global::System.Data.DataColumn columnIdVeterinario;
            
            private global::System.Data.DataColumn columnFecha;
            
            private global::System.Data.DataColumn columnDescEnfermedad;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagAnimalDataTable() {
                this.TableName = "DiagAnimal";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DiagAnimalDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DiagAnimalDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdAnimalColumn {
                get {
                    return this.columnIdAnimal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdEnfermedadColumn {
                get {
                    return this.columnIdEnfermedad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdVeterinarioColumn {
                get {
                    return this.columnIdVeterinario;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FechaColumn {
                get {
                    return this.columnFecha;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescEnfermedadColumn {
                get {
                    return this.columnDescEnfermedad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagAnimalRow this[int index] {
                get {
                    return ((DiagAnimalRow)(this.Rows[index]));
                }
            }
            
            public event DiagAnimalRowChangeEventHandler DiagAnimalRowChanging;
            
            public event DiagAnimalRowChangeEventHandler DiagAnimalRowChanged;
            
            public event DiagAnimalRowChangeEventHandler DiagAnimalRowDeleting;
            
            public event DiagAnimalRowChangeEventHandler DiagAnimalRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDiagAnimalRow(DiagAnimalRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagAnimalRow AddDiagAnimalRow(int IdAnimal, int IdEnfermedad, int IdVeterinario, System.DateTime Fecha, string DescEnfermedad) {
                DiagAnimalRow rowDiagAnimalRow = ((DiagAnimalRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        IdAnimal,
                        IdEnfermedad,
                        IdVeterinario,
                        Fecha,
                        DescEnfermedad};
                rowDiagAnimalRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDiagAnimalRow);
                return rowDiagAnimalRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagAnimalRow FindById(int Id) {
                return ((DiagAnimalRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DiagAnimalDataTable cln = ((DiagAnimalDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DiagAnimalDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnIdAnimal = base.Columns["IdAnimal"];
                this.columnIdEnfermedad = base.Columns["IdEnfermedad"];
                this.columnIdVeterinario = base.Columns["IdVeterinario"];
                this.columnFecha = base.Columns["Fecha"];
                this.columnDescEnfermedad = base.Columns["DescEnfermedad"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnIdAnimal = new global::System.Data.DataColumn("IdAnimal", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdAnimal);
                this.columnIdEnfermedad = new global::System.Data.DataColumn("IdEnfermedad", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdEnfermedad);
                this.columnIdVeterinario = new global::System.Data.DataColumn("IdVeterinario", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdVeterinario);
                this.columnFecha = new global::System.Data.DataColumn("Fecha", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFecha);
                this.columnDescEnfermedad = new global::System.Data.DataColumn("DescEnfermedad", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescEnfermedad);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AutoIncrementSeed = -1;
                this.columnId.AutoIncrementStep = -1;
                this.columnId.AllowDBNull = false;
                this.columnId.ReadOnly = true;
                this.columnId.Unique = true;
                this.columnIdAnimal.AllowDBNull = false;
                this.columnFecha.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagAnimalRow NewDiagAnimalRow() {
                return ((DiagAnimalRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DiagAnimalRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DiagAnimalRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DiagAnimalRowChanged != null)) {
                    this.DiagAnimalRowChanged(this, new DiagAnimalRowChangeEvent(((DiagAnimalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DiagAnimalRowChanging != null)) {
                    this.DiagAnimalRowChanging(this, new DiagAnimalRowChangeEvent(((DiagAnimalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DiagAnimalRowDeleted != null)) {
                    this.DiagAnimalRowDeleted(this, new DiagAnimalRowChangeEvent(((DiagAnimalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DiagAnimalRowDeleting != null)) {
                    this.DiagAnimalRowDeleting(this, new DiagAnimalRowChangeEvent(((DiagAnimalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDiagAnimalRow(DiagAnimalRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PrevalenciaEnfermedadesDS ds = new PrevalenciaEnfermedadesDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DiagAnimalDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AnimalRow : global::System.Data.DataRow {
            
            private AnimalDataTable tableAnimal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AnimalRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAnimal = ((AnimalDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableAnimal.IdColumn]));
                }
                set {
                    this[this.tableAnimal.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IdExplotacion {
                get {
                    return ((int)(this[this.tableAnimal.IdExplotacionColumn]));
                }
                set {
                    this[this.tableAnimal.IdExplotacionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IdRaza {
                get {
                    return ((int)(this[this.tableAnimal.IdRazaColumn]));
                }
                set {
                    this[this.tableAnimal.IdRazaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IdEstado {
                get {
                    try {
                        return ((int)(this[this.tableAnimal.IdEstadoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'IdEstado\' de la tabla \'Animal\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableAnimal.IdEstadoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IdTalla {
                get {
                    try {
                        return ((int)(this[this.tableAnimal.IdTallaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'IdTalla\' de la tabla \'Animal\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableAnimal.IdTallaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IdConformacion {
                get {
                    try {
                        return ((int)(this[this.tableAnimal.IdConformacionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'IdConformacion\' de la tabla \'Animal\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableAnimal.IdConformacionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DIB {
                get {
                    try {
                        return ((string)(this[this.tableAnimal.DIBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'DIB\' de la tabla \'Animal\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableAnimal.DIBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Crotal {
                get {
                    try {
                        return ((string)(this[this.tableAnimal.CrotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Crotal\' de la tabla \'Animal\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableAnimal.CrotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tatuaje {
                get {
                    try {
                        return ((string)(this[this.tableAnimal.TatuajeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Tatuaje\' de la tabla \'Animal\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableAnimal.TatuajeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Genotipo {
                get {
                    try {
                        return ((string)(this[this.tableAnimal.GenotipoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Genotipo\' de la tabla \'Animal\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableAnimal.GenotipoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Nombre {
                get {
                    return ((string)(this[this.tableAnimal.NombreColumn]));
                }
                set {
                    this[this.tableAnimal.NombreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FechaNacimiento {
                get {
                    return ((global::System.DateTime)(this[this.tableAnimal.FechaNacimientoColumn]));
                }
                set {
                    this[this.tableAnimal.FechaNacimientoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FechaDestete {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableAnimal.FechaDesteteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'FechaDestete\' de la tabla \'Animal\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableAnimal.FechaDesteteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sexo {
                get {
                    return ((string)(this[this.tableAnimal.SexoColumn]));
                }
                set {
                    this[this.tableAnimal.SexoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Morfologia {
                get {
                    try {
                        return ((int)(this[this.tableAnimal.MorfologiaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Morfologia\' de la tabla \'Animal\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableAnimal.MorfologiaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DescRaza {
                get {
                    try {
                        return ((string)(this[this.tableAnimal.DescRazaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'DescRaza\' de la tabla \'Animal\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableAnimal.DescRazaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DescEspecie {
                get {
                    try {
                        return ((string)(this[this.tableAnimal.DescEspecieColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'DescEspecie\' de la tabla \'Animal\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableAnimal.DescEspecieColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagAnimalRow DiagAnimalRow {
                get {
                    return ((DiagAnimalRow)(this.GetParentRow(this.Table.ParentRelations["DiagAnimal_Animal"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DiagAnimal_Animal"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdEstadoNull() {
                return this.IsNull(this.tableAnimal.IdEstadoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdEstadoNull() {
                this[this.tableAnimal.IdEstadoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdTallaNull() {
                return this.IsNull(this.tableAnimal.IdTallaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdTallaNull() {
                this[this.tableAnimal.IdTallaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdConformacionNull() {
                return this.IsNull(this.tableAnimal.IdConformacionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdConformacionNull() {
                this[this.tableAnimal.IdConformacionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDIBNull() {
                return this.IsNull(this.tableAnimal.DIBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDIBNull() {
                this[this.tableAnimal.DIBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCrotalNull() {
                return this.IsNull(this.tableAnimal.CrotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCrotalNull() {
                this[this.tableAnimal.CrotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTatuajeNull() {
                return this.IsNull(this.tableAnimal.TatuajeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTatuajeNull() {
                this[this.tableAnimal.TatuajeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenotipoNull() {
                return this.IsNull(this.tableAnimal.GenotipoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenotipoNull() {
                this[this.tableAnimal.GenotipoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFechaDesteteNull() {
                return this.IsNull(this.tableAnimal.FechaDesteteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFechaDesteteNull() {
                this[this.tableAnimal.FechaDesteteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMorfologiaNull() {
                return this.IsNull(this.tableAnimal.MorfologiaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMorfologiaNull() {
                this[this.tableAnimal.MorfologiaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescRazaNull() {
                return this.IsNull(this.tableAnimal.DescRazaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescRazaNull() {
                this[this.tableAnimal.DescRazaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescEspecieNull() {
                return this.IsNull(this.tableAnimal.DescEspecieColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescEspecieNull() {
                this[this.tableAnimal.DescEspecieColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DiagAnimalRow : global::System.Data.DataRow {
            
            private DiagAnimalDataTable tableDiagAnimal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DiagAnimalRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDiagAnimal = ((DiagAnimalDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableDiagAnimal.IdColumn]));
                }
                set {
                    this[this.tableDiagAnimal.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IdAnimal {
                get {
                    return ((int)(this[this.tableDiagAnimal.IdAnimalColumn]));
                }
                set {
                    this[this.tableDiagAnimal.IdAnimalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IdEnfermedad {
                get {
                    try {
                        return ((int)(this[this.tableDiagAnimal.IdEnfermedadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'IdEnfermedad\' de la tabla \'DiagAnimal\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagAnimal.IdEnfermedadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IdVeterinario {
                get {
                    try {
                        return ((int)(this[this.tableDiagAnimal.IdVeterinarioColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'IdVeterinario\' de la tabla \'DiagAnimal\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagAnimal.IdVeterinarioColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Fecha {
                get {
                    return ((global::System.DateTime)(this[this.tableDiagAnimal.FechaColumn]));
                }
                set {
                    this[this.tableDiagAnimal.FechaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DescEnfermedad {
                get {
                    try {
                        return ((string)(this[this.tableDiagAnimal.DescEnfermedadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'DescEnfermedad\' de la tabla \'DiagAnimal\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagAnimal.DescEnfermedadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdEnfermedadNull() {
                return this.IsNull(this.tableDiagAnimal.IdEnfermedadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdEnfermedadNull() {
                this[this.tableDiagAnimal.IdEnfermedadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdVeterinarioNull() {
                return this.IsNull(this.tableDiagAnimal.IdVeterinarioColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdVeterinarioNull() {
                this[this.tableDiagAnimal.IdVeterinarioColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescEnfermedadNull() {
                return this.IsNull(this.tableDiagAnimal.DescEnfermedadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescEnfermedadNull() {
                this[this.tableDiagAnimal.DescEnfermedadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnimalRow[] GetAnimalRows() {
                if ((this.Table.ChildRelations["DiagAnimal_Animal"] == null)) {
                    return new AnimalRow[0];
                }
                else {
                    return ((AnimalRow[])(base.GetChildRows(this.Table.ChildRelations["DiagAnimal_Animal"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AnimalRowChangeEvent : global::System.EventArgs {
            
            private AnimalRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnimalRowChangeEvent(AnimalRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnimalRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DiagAnimalRowChangeEvent : global::System.EventArgs {
            
            private DiagAnimalRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagAnimalRowChangeEvent(DiagAnimalRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagAnimalRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591