#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión del motor en tiempo de ejecución:2.0.50727.3053
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GEXVOC.Core.Logic
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="gexvoc")]
	public partial class GEXVOCDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAbonado(Abonado instance);
    partial void UpdateAbonado(Abonado instance);
    partial void DeleteAbonado(Abonado instance);
    partial void InsertAniLot(AniLot instance);
    partial void UpdateAniLot(AniLot instance);
    partial void DeleteAniLot(AniLot instance);
    partial void InsertCategoria(Categoria instance);
    partial void UpdateCategoria(Categoria instance);
    partial void DeleteCategoria(Categoria instance);
    partial void InsertCita(Cita instance);
    partial void UpdateCita(Cita instance);
    partial void DeleteCita(Cita instance);
    partial void InsertComposicion(Composicion instance);
    partial void UpdateComposicion(Composicion instance);
    partial void DeleteComposicion(Composicion instance);
    partial void InsertCondicionJuridica(CondicionJuridica instance);
    partial void UpdateCondicionJuridica(CondicionJuridica instance);
    partial void DeleteCondicionJuridica(CondicionJuridica instance);
    partial void InsertConfiguracion(Configuracion instance);
    partial void UpdateConfiguracion(Configuracion instance);
    partial void DeleteConfiguracion(Configuracion instance);
    partial void InsertConformacion(Conformacion instance);
    partial void UpdateConformacion(Conformacion instance);
    partial void DeleteConformacion(Conformacion instance);
    partial void InsertConformacionCanal(ConformacionCanal instance);
    partial void UpdateConformacionCanal(ConformacionCanal instance);
    partial void DeleteConformacionCanal(ConformacionCanal instance);
    partial void InsertCuenta(Cuenta instance);
    partial void UpdateCuenta(Cuenta instance);
    partial void DeleteCuenta(Cuenta instance);
    partial void InsertEnfermedad(Enfermedad instance);
    partial void UpdateEnfermedad(Enfermedad instance);
    partial void DeleteEnfermedad(Enfermedad instance);
    partial void InsertEngrasamientoCanal(EngrasamientoCanal instance);
    partial void UpdateEngrasamientoCanal(EngrasamientoCanal instance);
    partial void DeleteEngrasamientoCanal(EngrasamientoCanal instance);
    partial void InsertEspecie(Especie instance);
    partial void UpdateEspecie(Especie instance);
    partial void DeleteEspecie(Especie instance);
    partial void InsertExpCli(ExpCli instance);
    partial void UpdateExpCli(ExpCli instance);
    partial void DeleteExpCli(ExpCli instance);
    partial void InsertExpEsp(ExpEsp instance);
    partial void UpdateExpEsp(ExpEsp instance);
    partial void DeleteExpEsp(ExpEsp instance);
    partial void InsertExpMod(ExpMod instance);
    partial void UpdateExpMod(ExpMod instance);
    partial void DeleteExpMod(ExpMod instance);
    partial void InsertExpPro(ExpPro instance);
    partial void UpdateExpPro(ExpPro instance);
    partial void DeleteExpPro(ExpPro instance);
    partial void InsertExpTit(ExpTit instance);
    partial void UpdateExpTit(ExpTit instance);
    partial void DeleteExpTit(ExpTit instance);
    partial void InsertExtendida(Extendida instance);
    partial void UpdateExtendida(Extendida instance);
    partial void DeleteExtendida(Extendida instance);
    partial void InsertFacilidad(Facilidad instance);
    partial void UpdateFacilidad(Facilidad instance);
    partial void DeleteFacilidad(Facilidad instance);
    partial void InsertHistMedicamento(HistMedicamento instance);
    partial void UpdateHistMedicamento(HistMedicamento instance);
    partial void DeleteHistMedicamento(HistMedicamento instance);
    partial void InsertInsPar(InsPar instance);
    partial void UpdateInsPar(InsPar instance);
    partial void DeleteInsPar(InsPar instance);
    partial void InsertLaboratorio(Laboratorio instance);
    partial void UpdateLaboratorio(Laboratorio instance);
    partial void DeleteLaboratorio(Laboratorio instance);
    partial void InsertLibroGenealogico(LibroGenealogico instance);
    partial void UpdateLibroGenealogico(LibroGenealogico instance);
    partial void DeleteLibroGenealogico(LibroGenealogico instance);
    partial void InsertModulo(Modulo instance);
    partial void UpdateModulo(Modulo instance);
    partial void DeleteModulo(Modulo instance);
    partial void InsertMomento(Momento instance);
    partial void UpdateMomento(Momento instance);
    partial void DeleteMomento(Momento instance);
    partial void InsertMotivo(Motivo instance);
    partial void UpdateMotivo(Motivo instance);
    partial void DeleteMotivo(Motivo instance);
    partial void InsertMuestraControl(MuestraControl instance);
    partial void UpdateMuestraControl(MuestraControl instance);
    partial void DeleteMuestraControl(MuestraControl instance);
    partial void InsertMunicipio(Municipio instance);
    partial void UpdateMunicipio(Municipio instance);
    partial void DeleteMunicipio(Municipio instance);
    partial void InsertNaturaleza(Naturaleza instance);
    partial void UpdateNaturaleza(Naturaleza instance);
    partial void DeleteNaturaleza(Naturaleza instance);
    partial void InsertParcela(Parcela instance);
    partial void UpdateParcela(Parcela instance);
    partial void DeleteParcela(Parcela instance);
    partial void InsertPeso(Peso instance);
    partial void UpdatePeso(Peso instance);
    partial void DeletePeso(Peso instance);
    partial void InsertPlaga(Plaga instance);
    partial void UpdatePlaga(Plaga instance);
    partial void DeletePlaga(Plaga instance);
    partial void InsertProducto(Producto instance);
    partial void UpdateProducto(Producto instance);
    partial void DeleteProducto(Producto instance);
    partial void InsertProvincia(Provincia instance);
    partial void UpdateProvincia(Provincia instance);
    partial void DeleteProvincia(Provincia instance);
    partial void InsertRacion(Racion instance);
    partial void UpdateRacion(Racion instance);
    partial void DeleteRacion(Racion instance);
    partial void InsertRaza(Raza instance);
    partial void UpdateRaza(Raza instance);
    partial void DeleteRaza(Raza instance);
    partial void InsertRecolecta(Recolecta instance);
    partial void UpdateRecolecta(Recolecta instance);
    partial void DeleteRecolecta(Recolecta instance);
    partial void InsertRendimientoCanal(RendimientoCanal instance);
    partial void UpdateRendimientoCanal(RendimientoCanal instance);
    partial void DeleteRendimientoCanal(RendimientoCanal instance);
    partial void InsertSecado(Secado instance);
    partial void UpdateSecado(Secado instance);
    partial void DeleteSecado(Secado instance);
    partial void InsertSiembra(Siembra instance);
    partial void UpdateSiembra(Siembra instance);
    partial void DeleteSiembra(Siembra instance);
    partial void InsertStatusControl(StatusControl instance);
    partial void UpdateStatusControl(StatusControl instance);
    partial void DeleteStatusControl(StatusControl instance);
    partial void InsertStatusOrdeno(StatusOrdeno instance);
    partial void UpdateStatusOrdeno(StatusOrdeno instance);
    partial void DeleteStatusOrdeno(StatusOrdeno instance);
    partial void InsertTalla(Talla instance);
    partial void UpdateTalla(Talla instance);
    partial void DeleteTalla(Talla instance);
    partial void InsertTarea(Tarea instance);
    partial void UpdateTarea(Tarea instance);
    partial void DeleteTarea(Tarea instance);
    partial void InsertTipificacionCanal(TipificacionCanal instance);
    partial void UpdateTipificacionCanal(TipificacionCanal instance);
    partial void DeleteTipificacionCanal(TipificacionCanal instance);
    partial void InsertTipoAborto(TipoAborto instance);
    partial void UpdateTipoAborto(TipoAborto instance);
    partial void DeleteTipoAborto(TipoAborto instance);
    partial void InsertTipoBaja(TipoBaja instance);
    partial void UpdateTipoBaja(TipoBaja instance);
    partial void DeleteTipoBaja(TipoBaja instance);
    partial void InsertTipoCompra(TipoCompra instance);
    partial void UpdateTipoCompra(TipoCompra instance);
    partial void DeleteTipoCompra(TipoCompra instance);
    partial void InsertTipoDiagnostico(TipoDiagnostico instance);
    partial void UpdateTipoDiagnostico(TipoDiagnostico instance);
    partial void DeleteTipoDiagnostico(TipoDiagnostico instance);
    partial void InsertTipoEnfermedad(TipoEnfermedad instance);
    partial void UpdateTipoEnfermedad(TipoEnfermedad instance);
    partial void DeleteTipoEnfermedad(TipoEnfermedad instance);
    partial void InsertTipoEngrasamiento(TipoEngrasamiento instance);
    partial void UpdateTipoEngrasamiento(TipoEngrasamiento instance);
    partial void DeleteTipoEngrasamiento(TipoEngrasamiento instance);
    partial void InsertTipoInseminacion(TipoInseminacion instance);
    partial void UpdateTipoInseminacion(TipoInseminacion instance);
    partial void DeleteTipoInseminacion(TipoInseminacion instance);
    partial void InsertTipoProducto(TipoProducto instance);
    partial void UpdateTipoProducto(TipoProducto instance);
    partial void DeleteTipoProducto(TipoProducto instance);
    partial void InsertTipoSecado(TipoSecado instance);
    partial void UpdateTipoSecado(TipoSecado instance);
    partial void DeleteTipoSecado(TipoSecado instance);
    partial void InsertTipoVenta(TipoVenta instance);
    partial void UpdateTipoVenta(TipoVenta instance);
    partial void DeleteTipoVenta(TipoVenta instance);
    partial void InsertTratParcela(TratParcela instance);
    partial void UpdateTratParcela(TratParcela instance);
    partial void DeleteTratParcela(TratParcela instance);
    partial void InsertTipoAlta(TipoAlta instance);
    partial void UpdateTipoAlta(TipoAlta instance);
    partial void DeleteTipoAlta(TipoAlta instance);
    partial void InsertFamilia(Familia instance);
    partial void UpdateFamilia(Familia instance);
    partial void DeleteFamilia(Familia instance);
    partial void InsertAsignacion(Asignacion instance);
    partial void UpdateAsignacion(Asignacion instance);
    partial void DeleteAsignacion(Asignacion instance);
    partial void InsertAnalisis(Analisis instance);
    partial void UpdateAnalisis(Analisis instance);
    partial void DeleteAnalisis(Analisis instance);
    partial void InsertTipoAnalisis(TipoAnalisis instance);
    partial void UpdateTipoAnalisis(TipoAnalisis instance);
    partial void DeleteTipoAnalisis(TipoAnalisis instance);
    partial void InsertCombinacion(Combinacion instance);
    partial void UpdateCombinacion(Combinacion instance);
    partial void DeleteCombinacion(Combinacion instance);
    partial void InsertMarcador(Marcador instance);
    partial void UpdateMarcador(Marcador instance);
    partial void DeleteMarcador(Marcador instance);
    partial void InsertResena(Resena instance);
    partial void UpdateResena(Resena instance);
    partial void DeleteResena(Resena instance);
    partial void InsertMenu(Menu instance);
    partial void UpdateMenu(Menu instance);
    partial void DeleteMenu(Menu instance);
    partial void InsertProceso(Proceso instance);
    partial void UpdateProceso(Proceso instance);
    partial void DeleteProceso(Proceso instance);
    partial void InsertTipoPersonal(TipoPersonal instance);
    partial void UpdateTipoPersonal(TipoPersonal instance);
    partial void DeleteTipoPersonal(TipoPersonal instance);
    partial void InsertTipoCubricion(TipoCubricion instance);
    partial void UpdateTipoCubricion(TipoCubricion instance);
    partial void DeleteTipoCubricion(TipoCubricion instance);
    partial void InsertTipoParto(TipoParto instance);
    partial void UpdateTipoParto(TipoParto instance);
    partial void DeleteTipoParto(TipoParto instance);
    partial void InsertTipoContacto(TipoContacto instance);
    partial void UpdateTipoContacto(TipoContacto instance);
    partial void DeleteTipoContacto(TipoContacto instance);
    partial void InsertProveedor(Proveedor instance);
    partial void UpdateProveedor(Proveedor instance);
    partial void DeleteProveedor(Proveedor instance);
    partial void InsertCliente(Cliente instance);
    partial void UpdateCliente(Cliente instance);
    partial void DeleteCliente(Cliente instance);
    partial void InsertContacto(Contacto instance);
    partial void UpdateContacto(Contacto instance);
    partial void DeleteContacto(Contacto instance);
    partial void InsertTratHigiene(TratHigiene instance);
    partial void UpdateTratHigiene(TratHigiene instance);
    partial void DeleteTratHigiene(TratHigiene instance);
    partial void InsertPlanHigiene(PlanHigiene instance);
    partial void UpdatePlanHigiene(PlanHigiene instance);
    partial void DeletePlanHigiene(PlanHigiene instance);
    partial void InsertProHig(ProHig instance);
    partial void UpdateProHig(ProHig instance);
    partial void DeleteProHig(ProHig instance);
    partial void InsertAniPro(AniPro instance);
    partial void UpdateAniPro(AniPro instance);
    partial void DeleteAniPro(AniPro instance);
    partial void InsertPrograma(Programa instance);
    partial void UpdatePrograma(Programa instance);
    partial void DeletePrograma(Programa instance);
    partial void InsertProPro(ProPro instance);
    partial void UpdateProPro(ProPro instance);
    partial void DeleteProPro(ProPro instance);
    partial void InsertGasto(Gasto instance);
    partial void UpdateGasto(Gasto instance);
    partial void DeleteGasto(Gasto instance);
    partial void InsertPlaMaq(PlaMaq instance);
    partial void UpdatePlaMaq(PlaMaq instance);
    partial void DeletePlaMaq(PlaMaq instance);
    partial void InsertPlaZon(PlaZon instance);
    partial void UpdatePlaZon(PlaZon instance);
    partial void DeletePlaZon(PlaZon instance);
    partial void InsertEjecucion(Ejecucion instance);
    partial void UpdateEjecucion(Ejecucion instance);
    partial void DeleteEjecucion(Ejecucion instance);
    partial void InsertTransformacion(Transformacion instance);
    partial void UpdateTransformacion(Transformacion instance);
    partial void DeleteTransformacion(Transformacion instance);
    partial void InsertPlaVet(PlaVet instance);
    partial void UpdatePlaVet(PlaVet instance);
    partial void DeletePlaVet(PlaVet instance);
    partial void InsertTitular(Titular instance);
    partial void UpdateTitular(Titular instance);
    partial void DeleteTitular(Titular instance);
    partial void InsertCelo(Celo instance);
    partial void UpdateCelo(Celo instance);
    partial void DeleteCelo(Celo instance);
    partial void InsertSincronizacionCelo(SincronizacionCelo instance);
    partial void UpdateSincronizacionCelo(SincronizacionCelo instance);
    partial void DeleteSincronizacionCelo(SincronizacionCelo instance);
    partial void InsertLoteAnimal(LoteAnimal instance);
    partial void UpdateLoteAnimal(LoteAnimal instance);
    partial void DeleteLoteAnimal(LoteAnimal instance);
    partial void InsertTratEnfermedad(TratEnfermedad instance);
    partial void UpdateTratEnfermedad(TratEnfermedad instance);
    partial void DeleteTratEnfermedad(TratEnfermedad instance);
    partial void InsertLactacion(Lactacion instance);
    partial void UpdateLactacion(Lactacion instance);
    partial void DeleteLactacion(Lactacion instance);
    partial void InsertControlLeche(ControlLeche instance);
    partial void UpdateControlLeche(ControlLeche instance);
    partial void DeleteControlLeche(ControlLeche instance);
    partial void InsertInseminacion(Inseminacion instance);
    partial void UpdateInseminacion(Inseminacion instance);
    partial void DeleteInseminacion(Inseminacion instance);
    partial void InsertDiagInseminacion(DiagInseminacion instance);
    partial void UpdateDiagInseminacion(DiagInseminacion instance);
    partial void DeleteDiagInseminacion(DiagInseminacion instance);
    partial void InsertEstancia(Estancia instance);
    partial void UpdateEstancia(Estancia instance);
    partial void DeleteEstancia(Estancia instance);
    partial void InsertCubricion(Cubricion instance);
    partial void UpdateCubricion(Cubricion instance);
    partial void DeleteCubricion(Cubricion instance);
    partial void InsertReceta(Receta instance);
    partial void UpdateReceta(Receta instance);
    partial void DeleteReceta(Receta instance);
    partial void InsertAborto(Aborto instance);
    partial void UpdateAborto(Aborto instance);
    partial void DeleteAborto(Aborto instance);
    partial void InsertEstado(Estado instance);
    partial void UpdateEstado(Estado instance);
    partial void DeleteEstado(Estado instance);
    partial void InsertTipoCondicion(TipoCondicion instance);
    partial void UpdateTipoCondicion(TipoCondicion instance);
    partial void DeleteTipoCondicion(TipoCondicion instance);
    partial void InsertTipoLote(TipoLote instance);
    partial void UpdateTipoLote(TipoLote instance);
    partial void DeleteTipoLote(TipoLote instance);
    partial void InsertMaquinaria(Maquinaria instance);
    partial void UpdateMaquinaria(Maquinaria instance);
    partial void DeleteMaquinaria(Maquinaria instance);
    partial void InsertZona(Zona instance);
    partial void UpdateZona(Zona instance);
    partial void DeleteZona(Zona instance);
    partial void InsertPlantilla(Plantilla instance);
    partial void UpdatePlantilla(Plantilla instance);
    partial void DeletePlantilla(Plantilla instance);
    partial void InsertAPPCC(APPCC instance);
    partial void UpdateAPPCC(APPCC instance);
    partial void DeleteAPPCC(APPCC instance);
    partial void InsertTratProfilaxis(TratProfilaxis instance);
    partial void UpdateTratProfilaxis(TratProfilaxis instance);
    partial void DeleteTratProfilaxis(TratProfilaxis instance);
    partial void InsertVeterinario(Veterinario instance);
    partial void UpdateVeterinario(Veterinario instance);
    partial void DeleteVeterinario(Veterinario instance);
    partial void InsertPastoreo(Pastoreo instance);
    partial void UpdatePastoreo(Pastoreo instance);
    partial void DeletePastoreo(Pastoreo instance);
    partial void InsertFotografia(Fotografia instance);
    partial void UpdateFotografia(Fotografia instance);
    partial void DeleteFotografia(Fotografia instance);
    partial void InsertParto(Parto instance);
    partial void UpdateParto(Parto instance);
    partial void DeleteParto(Parto instance);
    partial void InsertExplotacion(Explotacion instance);
    partial void UpdateExplotacion(Explotacion instance);
    partial void DeleteExplotacion(Explotacion instance);
    partial void InsertDiagAnimal(DiagAnimal instance);
    partial void UpdateDiagAnimal(DiagAnimal instance);
    partial void DeleteDiagAnimal(DiagAnimal instance);
    partial void InsertCondicionCorporal(CondicionCorporal instance);
    partial void UpdateCondicionCorporal(CondicionCorporal instance);
    partial void DeleteCondicionCorporal(CondicionCorporal instance);
    partial void InsertVenta(Venta instance);
    partial void UpdateVenta(Venta instance);
    partial void DeleteVenta(Venta instance);
    partial void InsertCompra(Compra instance);
    partial void UpdateCompra(Compra instance);
    partial void DeleteCompra(Compra instance);
    partial void InsertMovimiento(Movimiento instance);
    partial void UpdateMovimiento(Movimiento instance);
    partial void DeleteMovimiento(Movimiento instance);
    partial void InsertStock(Stock instance);
    partial void UpdateStock(Stock instance);
    partial void DeleteStock(Stock instance);
    partial void InsertAnimal(Animal instance);
    partial void UpdateAnimal(Animal instance);
    partial void DeleteAnimal(Animal instance);
    partial void InsertBaja(Baja instance);
    partial void UpdateBaja(Baja instance);
    partial void DeleteBaja(Baja instance);
    partial void InsertAlta(Alta instance);
    partial void UpdateAlta(Alta instance);
    partial void DeleteAlta(Alta instance);
    #endregion
		
		public GEXVOCDataContext() : 
				base(global::GEXVOC.Core.Properties.Settings.Default.gexvocConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public GEXVOCDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GEXVOCDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GEXVOCDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GEXVOCDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}

        public System.Data.Linq.Table<Abonado> Abonados
        {
            get
            {
                return this.GetTable<Abonado>();
            }
        }

        public System.Data.Linq.Table<Veterinario> Veterinarios
        {
            get
            {
                return this.GetTable<Veterinario>();
            }
        }

        public System.Data.Linq.Table<Aborto> Abortos
        {
            get
            {
                return this.GetTable<Aborto>();
            }
        }

        public System.Data.Linq.Table<AniLot> AniLot
        {
            get
            {
                return this.GetTable<AniLot>();
            }
        }

        public System.Data.Linq.Table<Animal> Animales
        {
            get
            {
                return this.GetTable<Animal>();
            }
        }

        public System.Data.Linq.Table<APPCC> APPCC
        {
            get
            {
                return this.GetTable<APPCC>();
            }
        }

        public System.Data.Linq.Table<Asignacion> Asignaciones
        {
            get
            {
                return this.GetTable<Asignacion>();
            }
        }

        public System.Data.Linq.Table<Baja> Bajas
        {
            get
            {
                return this.GetTable<Baja>();
            }
        }

        public System.Data.Linq.Table<Categoria> Categorias
        {
            get
            {
                return this.GetTable<Categoria>();
            }
        }

        public System.Data.Linq.Table<Celo> Celos
        {
            get
            {
                return this.GetTable<Celo>();
            }
        }

        public System.Data.Linq.Table<Cita> Citas
        {
            get
            {
                return this.GetTable<Cita>();
            }
        }

        public System.Data.Linq.Table<Cliente> Clientes
        {
            get
            {
                return this.GetTable<Cliente>();
            }
        }

        public System.Data.Linq.Table<Composicion> Composiciones
        {
            get
            {
                return this.GetTable<Composicion>();
            }
        }

        public System.Data.Linq.Table<Compra> Compras
        {
            get
            {
                return this.GetTable<Compra>();
            }
        }

        public System.Data.Linq.Table<CondicionCorporal> CondicionesCorporales
        {
            get
            {
                return this.GetTable<CondicionCorporal>();
            }
        }

        public System.Data.Linq.Table<CondicionJuridica> CondicionesJuridicas
        {
            get
            {
                return this.GetTable<CondicionJuridica>();
            }
        }

        public System.Data.Linq.Table<Configuracion> Configuraciones
        {
            get
            {
                return this.GetTable<Configuracion>();
            }
        }

        public System.Data.Linq.Table<Conformacion> Conformaciones
        {
            get
            {
                return this.GetTable<Conformacion>();
            }
        }

        public System.Data.Linq.Table<ConformacionCanal> ConformacionesCanal
        {
            get
            {
                return this.GetTable<ConformacionCanal>();
            }
        }

        public System.Data.Linq.Table<Contacto> Contactos
        {
            get
            {
                return this.GetTable<Contacto>();
            }
        }

        public System.Data.Linq.Table<ControlLeche> Controles
        {
            get
            {
                return this.GetTable<ControlLeche>();
            }
        }

        public System.Data.Linq.Table<Cubricion> Cubriciones
        {
            get
            {
                return this.GetTable<Cubricion>();
            }
        }

        public System.Data.Linq.Table<Cuenta> Cuentas
        {
            get
            {
                return this.GetTable<Cuenta>();
            }
        }

        public System.Data.Linq.Table<DiagAnimal> DiagsAnimales
        {
            get
            {
                return this.GetTable<DiagAnimal>();
            }
        }

        public System.Data.Linq.Table<DiagInseminacion> DiagsInseminaciones
        {
            get
            {
                return this.GetTable<DiagInseminacion>();
            }
        }

        public System.Data.Linq.Table<Enfermedad> Enfermedades
        {
            get
            {
                return this.GetTable<Enfermedad>();
            }
        }

        public System.Data.Linq.Table<EngrasamientoCanal> EngrasamientosCanal
        {
            get
            {
                return this.GetTable<EngrasamientoCanal>();
            }
        }

        public System.Data.Linq.Table<Especie> Especies
        {
            get
            {
                return this.GetTable<Especie>();
            }
        }

        public System.Data.Linq.Table<Estado> Estados
        {
            get
            {
                return this.GetTable<Estado>();
            }
        }

        public System.Data.Linq.Table<Estancia> Estancias
        {
            get
            {
                return this.GetTable<Estancia>();
            }
        }

        public System.Data.Linq.Table<ExpCli> ExpCli
        {
            get
            {
                return this.GetTable<ExpCli>();
            }
        }

        public System.Data.Linq.Table<ExpEsp> ExpEsp
        {
            get
            {
                return this.GetTable<ExpEsp>();
            }
        }

        public System.Data.Linq.Table<Explotacion> Explotaciones
        {
            get
            {
                return this.GetTable<Explotacion>();
            }
        }

        public System.Data.Linq.Table<ExpMod> ExpMod
        {
            get
            {
                return this.GetTable<ExpMod>();
            }
        }

        public System.Data.Linq.Table<ExpPro> ExpPro
        {
            get
            {
                return this.GetTable<ExpPro>();
            }
        }

        public System.Data.Linq.Table<ExpTit> ExpTit
        {
            get
            {
                return this.GetTable<ExpTit>();
            }
        }

        public System.Data.Linq.Table<Extendida> Extendidas
        {
            get
            {
                return this.GetTable<Extendida>();
            }
        }

        public System.Data.Linq.Table<Facilidad> Facilidades
        {
            get
            {
                return this.GetTable<Facilidad>();
            }
        }

        public System.Data.Linq.Table<Familia> Familias
        {
            get
            {
                return this.GetTable<Familia>();
            }
        }

        public System.Data.Linq.Table<Gasto> Gastos
        {
            get
            {
                return this.GetTable<Gasto>();
            }
        }

        public System.Data.Linq.Table<HistMedicamento> HistMedicamentos
        {
            get
            {
                return this.GetTable<HistMedicamento>();
            }
        }

        public System.Data.Linq.Table<Inseminacion> Inseminaciones
        {
            get
            {
                return this.GetTable<Inseminacion>();
            }
        }

        public System.Data.Linq.Table<InsPar> InsPar
        {
            get
            {
                return this.GetTable<InsPar>();
            }
        }

        public System.Data.Linq.Table<Laboratorio> Laboratorios
        {
            get
            {
                return this.GetTable<Laboratorio>();
            }
        }

        public System.Data.Linq.Table<Lactacion> Lactaciones
        {
            get
            {
                return this.GetTable<Lactacion>();
            }
        }

        public System.Data.Linq.Table<LibroGenealogico> LibrosGenealogicos
        {
            get
            {
                return this.GetTable<LibroGenealogico>();
            }
        }

        public System.Data.Linq.Table<LoteAnimal> LotesAnimales
        {
            get
            {
                return this.GetTable<LoteAnimal>();
            }
        }

        public System.Data.Linq.Table<Menu> Menus
        {
            get
            {
                return this.GetTable<Menu>();
            }
        }

        public System.Data.Linq.Table<Modulo> Modulos
        {
            get
            {
                return this.GetTable<Modulo>();
            }
        }

        public System.Data.Linq.Table<Momento> Momentos
        {
            get
            {
                return this.GetTable<Momento>();
            }
        }

        public System.Data.Linq.Table<Motivo> Motivos
        {
            get
            {
                return this.GetTable<Motivo>();
            }
        }

        public System.Data.Linq.Table<MuestraControl> MuestrasControles
        {
            get
            {
                return this.GetTable<MuestraControl>();
            }
        }

        public System.Data.Linq.Table<Municipio> Municipios
        {
            get
            {
                return this.GetTable<Municipio>();
            }
        }

        public System.Data.Linq.Table<Naturaleza> Naturalezas
        {
            get
            {
                return this.GetTable<Naturaleza>();
            }
        }

        public System.Data.Linq.Table<Parcela> Parcelas
        {
            get
            {
                return this.GetTable<Parcela>();
            }
        }

        public System.Data.Linq.Table<Parto> Partos
        {
            get
            {
                return this.GetTable<Parto>();
            }
        }

        public System.Data.Linq.Table<Pastoreo> Pastoreos
        {
            get
            {
                return this.GetTable<Pastoreo>();
            }
        }

        public System.Data.Linq.Table<Peso> Pesos
        {
            get
            {
                return this.GetTable<Peso>();
            }
        }

        public System.Data.Linq.Table<Plaga> Plagas
        {
            get
            {
                return this.GetTable<Plaga>();
            }
        }

        public System.Data.Linq.Table<Producto> Productos
        {
            get
            {
                return this.GetTable<Producto>();
            }
        }

        public System.Data.Linq.Table<Programa> Programas
        {
            get
            {
                return this.GetTable<Programa>();
            }
        }

        public System.Data.Linq.Table<Proveedor> Proveedores
        {
            get
            {
                return this.GetTable<Proveedor>();
            }
        }

        public System.Data.Linq.Table<Provincia> Provincias
        {
            get
            {
                return this.GetTable<Provincia>();
            }
        }

        public System.Data.Linq.Table<Racion> Raciones
        {
            get
            {
                return this.GetTable<Racion>();
            }
        }

        public System.Data.Linq.Table<Raza> Razas
        {
            get
            {
                return this.GetTable<Raza>();
            }
        }

        public System.Data.Linq.Table<Recolecta> Recolectas
        {
            get
            {
                return this.GetTable<Recolecta>();
            }
        }

        public System.Data.Linq.Table<RendimientoCanal> RendimientosCanal
        {
            get
            {
                return this.GetTable<RendimientoCanal>();
            }
        }

        public System.Data.Linq.Table<Secado> Secados
        {
            get
            {
                return this.GetTable<Secado>();
            }
        }

        public System.Data.Linq.Table<Siembra> Siembras
        {
            get
            {
                return this.GetTable<Siembra>();
            }
        }

        public System.Data.Linq.Table<SincronizacionCelo> SincronizacionCelos
        {
            get
            {
                return this.GetTable<SincronizacionCelo>();
            }
        }

        public System.Data.Linq.Table<StatusControl> StatusControles
        {
            get
            {
                return this.GetTable<StatusControl>();
            }
        }

        public System.Data.Linq.Table<StatusOrdeno> StatusOrdenos
        {
            get
            {
                return this.GetTable<StatusOrdeno>();
            }
        }

        public System.Data.Linq.Table<Stock> Stocks
        {
            get
            {
                return this.GetTable<Stock>();
            }
        }

        public System.Data.Linq.Table<Talla> Tallas
        {
            get
            {
                return this.GetTable<Talla>();
            }
        }

        public System.Data.Linq.Table<Tarea> Tareas
        {
            get
            {
                return this.GetTable<Tarea>();
            }
        }

        public System.Data.Linq.Table<TipificacionCanal> TipificacionesCanal
        {
            get
            {
                return this.GetTable<TipificacionCanal>();
            }
        }

        public System.Data.Linq.Table<TipoAborto> TiposAbortos
        {
            get
            {
                return this.GetTable<TipoAborto>();
            }
        }

        public System.Data.Linq.Table<TipoBaja> TiposBajas
        {
            get
            {
                return this.GetTable<TipoBaja>();
            }
        }

        public System.Data.Linq.Table<TipoCompra> TiposCompras
        {
            get
            {
                return this.GetTable<TipoCompra>();
            }
        }

        public System.Data.Linq.Table<TipoDiagnostico> TiposDiagnosticos
        {
            get
            {
                return this.GetTable<TipoDiagnostico>();
            }
        }

        public System.Data.Linq.Table<TipoEnfermedad> TiposEnfermedades
        {
            get
            {
                return this.GetTable<TipoEnfermedad>();
            }
        }

        public System.Data.Linq.Table<TipoEngrasamiento> TiposEngrasamientos
        {
            get
            {
                return this.GetTable<TipoEngrasamiento>();
            }
        }

        public System.Data.Linq.Table<TipoInseminacion> TiposInseminaciones
        {
            get
            {
                return this.GetTable<TipoInseminacion>();
            }
        }

        public System.Data.Linq.Table<TipoParto> TiposPartos
        {
            get
            {
                return this.GetTable<TipoParto>();
            }
        }

        public System.Data.Linq.Table<TipoProducto> TiposProductos
        {
            get
            {
                return this.GetTable<TipoProducto>();
            }
        }

        public System.Data.Linq.Table<TipoSecado> TiposSecados
        {
            get
            {
                return this.GetTable<TipoSecado>();
            }
        }

        public System.Data.Linq.Table<TipoVenta> TiposVentas
        {
            get
            {
                return this.GetTable<TipoVenta>();
            }
        }

        public System.Data.Linq.Table<Titular> Titulares
        {
            get
            {
                return this.GetTable<Titular>();
            }
        }

        public System.Data.Linq.Table<TratEnfermedad> TratsEnfermedades
        {
            get
            {
                return this.GetTable<TratEnfermedad>();
            }
        }
        public System.Data.Linq.Table<Receta> Receta
        {
            get
            {
                return this.GetTable<Receta>();
            }
        }
        public System.Data.Linq.Table<TratHigiene> TratsHigiene
        {
            get
            {
                return this.GetTable<TratHigiene>();
            }
        }

        public System.Data.Linq.Table<TratParcela> TratsParcelas
        {
            get
            {
                return this.GetTable<TratParcela>();
            }
        }

        public System.Data.Linq.Table<Venta> Ventas
        {
            get
            {
                return this.GetTable<Venta>();
            }
        }

        public System.Data.Linq.Table<TipoCondicion> TiposCondiciones
        {
            get
            {
                return this.GetTable<TipoCondicion>();
            }
        }

        public System.Data.Linq.Table<Alta> Altas
        {
            get
            {
                return this.GetTable<Alta>();
            }
        }

        public System.Data.Linq.Table<TipoAlta> TiposAltas
        {
            get
            {
                return this.GetTable<TipoAlta>();
            }
        }

        public System.Data.Linq.Table<TipoContacto> TipoContacto
        {
            get
            {
                return this.GetTable<TipoContacto>();
            }
        }

        public System.Data.Linq.Table<Analisis> Analisis
        {
            get
            {
                return this.GetTable<Analisis>();
            }
        }

        public System.Data.Linq.Table<TipoAnalisis> TipoAnalisis
        {
            get
            {
                return this.GetTable<TipoAnalisis>();
            }
        }

        public System.Data.Linq.Table<Combinacion> Combinaciones
        {
            get
            {
                return this.GetTable<Combinacion>();
            }
        }

        public System.Data.Linq.Table<Marcador> Marcadores
        {
            get
            {
                return this.GetTable<Marcador>();
            }
        }

        public System.Data.Linq.Table<Resena> Resenas
        {
            get
            {
                return this.GetTable<Resena>();
            }
        }

        public System.Data.Linq.Table<Proceso> Proceso
        {
            get
            {
                return this.GetTable<Proceso>();
            }
        }

        public System.Data.Linq.Table<TipoPersonal> TipoPersonal
        {
            get
            {
                return this.GetTable<TipoPersonal>();
            }
        }

        public System.Data.Linq.Table<TipoCubricion> TipoCubricion
        {
            get
            {
                return this.GetTable<TipoCubricion>();
            }
        }

        public System.Data.Linq.Table<TratHigiene> TratHigiene
        {
            get
            {
                return this.GetTable<TratHigiene>();
            }
        }

        public System.Data.Linq.Table<PlanHigiene> PlanHigiene
        {
            get
            {
                return this.GetTable<PlanHigiene>();
            }
        }

        public System.Data.Linq.Table<ProHig> ProHig
        {
            get
            {
                return this.GetTable<ProHig>();
            }
        }

        public System.Data.Linq.Table<TratProfilaxis> TratProfilaxis
        {
            get
            {
                return this.GetTable<TratProfilaxis>();
            }
        }

        public System.Data.Linq.Table<AniPro> AniPro
        {
            get
            {
                return this.GetTable<AniPro>();
            }
        }

        public System.Data.Linq.Table<ProPro> ProPro
        {
            get
            {
                return this.GetTable<ProPro>();
            }
        }

        public System.Data.Linq.Table<Movimiento> Movimiento
        {
            get
            {
                return this.GetTable<Movimiento>();
            }
        }

        public System.Data.Linq.Table<Maquinaria> Maquinaria
        {
            get
            {
                return this.GetTable<Maquinaria>();
            }
        }

        public System.Data.Linq.Table<Zona> Zonas
        {
            get
            {
                return this.GetTable<Zona>();
            }
        }

        public System.Data.Linq.Table<Plantilla> Plantillas
        {
            get
            {
                return this.GetTable<Plantilla>();
            }
        }

        public System.Data.Linq.Table<PlaMaq> PlaMaq
        {
            get
            {
                return this.GetTable<PlaMaq>();
            }
        }

        public System.Data.Linq.Table<PlaZon> PlaZon
        {
            get
            {
                return this.GetTable<PlaZon>();
            }
        }

        public System.Data.Linq.Table<Ejecucion> Ejecuciones
        {
            get
            {
                return this.GetTable<Ejecucion>();
            }
        }

        public System.Data.Linq.Table<Transformacion> Transformaciones
        {
            get
            {
                return this.GetTable<Transformacion>();
            }
        }

        public System.Data.Linq.Table<PlaVet> PlaVet
        {
            get
            {
                return this.GetTable<PlaVet>();
            }
        }

        public System.Data.Linq.Table<TipoLote> TipoLote
        {
            get
            {
                return this.GetTable<TipoLote>();
            }
        }

        public System.Data.Linq.Table<Fotografia> Fotografia
        {
            get
            {
                return this.GetTable<Fotografia>();
            }
        }

        public System.Data.Linq.Table<AlertarEnfermas> AlertarEnfermas
        {
            get
            {
                return this.GetTable<AlertarEnfermas>();
            }
        }
        public System.Data.Linq.Table<AlertarSecadas> AlertarSecadas
        {
            get
            {
                return this.GetTable<AlertarSecadas>();
            }
        }

        public System.Data.Linq.Table<AlertarParidas> AlertarParidas
        {
            get
            {
                return this.GetTable<AlertarParidas>();
            }
        }

        public System.Data.Linq.Table<AlertarDiagnosticos> AlertarDiagnosticos
        {
            get
            {
                return this.GetTable<AlertarDiagnosticos>();
            }
        }

    }
	
	[Table(Name="dbo.Abonado")]
	public partial class Abonado : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdAbono;
		
		private int _IdParcela;
		
		private decimal _Cantidad;
		
		private System.DateTime _Fecha;
		
		private EntitySet<Gasto> _Gasto;
		
		private EntityRef<Parcela> _Parcela;
		
		private EntityRef<Producto> _Producto;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdAbonoChanging(int value);
    partial void OnIdAbonoChanged();
    partial void OnIdParcelaChanging(int value);
    partial void OnIdParcelaChanged();
    partial void OnCantidadChanging(decimal value);
    partial void OnCantidadChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    #endregion
		
		public Abonado()
		{
			this._Gasto = new EntitySet<Gasto>(new Action<Gasto>(this.attach_Gasto), new Action<Gasto>(this.detach_Gasto));
			this._Parcela = default(EntityRef<Parcela>);
			this._Producto = default(EntityRef<Producto>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdAbono", DbType="Int NOT NULL")]
		public int IdAbono
		{
			get
			{
				return this._IdAbono;
			}
			set
			{
				if ((this._IdAbono != value))
				{
					if (this._Producto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAbonoChanging(value);
					this.SendPropertyChanging();
					this._IdAbono = value;
					this.SendPropertyChanged("IdAbono");
					this.OnIdAbonoChanged();
				}
			}
		}
		
		[Column(Storage="_IdParcela", DbType="Int NOT NULL")]
		public int IdParcela
		{
			get
			{
				return this._IdParcela;
			}
			set
			{
				if ((this._IdParcela != value))
				{
					if (this._Parcela.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdParcelaChanging(value);
					this.SendPropertyChanging();
					this._IdParcela = value;
					this.SendPropertyChanged("IdParcela");
					this.OnIdParcelaChanged();
				}
			}
		}
		
		[Column(Storage="_Cantidad", DbType="Decimal(6,2) NOT NULL")]
		public decimal Cantidad
		{
			get
			{
				return this._Cantidad;
			}
			set
			{
				if ((this._Cantidad != value))
				{
					this.OnCantidadChanging(value);
					this.SendPropertyChanging();
					this._Cantidad = value;
					this.SendPropertyChanged("Cantidad");
					this.OnCantidadChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Association(Name="Abonado_Gasto", Storage="_Gasto", ThisKey="Id", OtherKey="IdAbonado")]
		public EntitySet<Gasto> Gasto
		{
			get
			{
				return this._Gasto;
			}
			set
			{
				this._Gasto.Assign(value);
			}
		}
		
		[Association(Name="Parcela_Abonado", Storage="_Parcela", ThisKey="IdParcela", OtherKey="Id", IsForeignKey=true)]
		public Parcela Parcela
		{
			get
			{
				return this._Parcela.Entity;
			}
			set
			{
				Parcela previousValue = this._Parcela.Entity;
				if (((previousValue != value) 
							|| (this._Parcela.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parcela.Entity = null;
						previousValue.Abonados.Remove(this);
					}
					this._Parcela.Entity = value;
					if ((value != null))
					{
						value.Abonados.Add(this);
						this._IdParcela = value.Id;
					}
					else
					{
						this._IdParcela = default(int);
					}
					this.SendPropertyChanged("Parcela");
				}
			}
		}
		
		[Association(Name="Producto_Abonado", Storage="_Producto", ThisKey="IdAbono", OtherKey="Id", IsForeignKey=true)]
		public Producto Abono
		{
			get
			{
				return this._Producto.Entity;
			}
			set
			{
				Producto previousValue = this._Producto.Entity;
				if (((previousValue != value) 
							|| (this._Producto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Producto.Entity = null;
						previousValue.Abonados.Remove(this);
					}
					this._Producto.Entity = value;
					if ((value != null))
					{
						value.Abonados.Add(this);
						this._IdAbono = value.Id;
					}
					else
					{
						this._IdAbono = default(int);
					}
					this.SendPropertyChanged("Abono");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Gasto(Gasto entity)
		{
			this.SendPropertyChanging();
			entity.Abonado = this;
		}
		
		private void detach_Gasto(Gasto entity)
		{
			this.SendPropertyChanging();
			entity.Abonado = null;
		}
	}
	
	[Table(Name="dbo.AniLot")]
	public partial class AniLot : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdLote;
		
		private int _IdAnimal;
		
		private System.DateTime _FechaInicio;
		
		private System.Nullable<System.DateTime> _FechaFin;
		
		private EntityRef<LoteAnimal> _LoteAnimal;
		
		private EntityRef<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdLoteChanging(int value);
    partial void OnIdLoteChanged();
    partial void OnIdAnimalChanging(int value);
    partial void OnIdAnimalChanged();
    partial void OnFechaInicioChanging(System.DateTime value);
    partial void OnFechaInicioChanged();
    partial void OnFechaFinChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaFinChanged();
    #endregion
		
		public AniLot()
		{
			this._LoteAnimal = default(EntityRef<LoteAnimal>);
			this._Animal = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[Column(Storage="_IdLote", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdLote
		{
			get
			{
				return this._IdLote;
			}
			set
			{
				if ((this._IdLote != value))
				{
					if (this._LoteAnimal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdLoteChanging(value);
					this.SendPropertyChanging();
					this._IdLote = value;
					this.SendPropertyChanged("IdLote");
					this.OnIdLoteChanged();
				}
			}
		}
		
		[Column(Storage="_IdAnimal", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdAnimal
		{
			get
			{
				return this._IdAnimal;
			}
			set
			{
				if ((this._IdAnimal != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAnimalChanging(value);
					this.SendPropertyChanging();
					this._IdAnimal = value;
					this.SendPropertyChanged("IdAnimal");
					this.OnIdAnimalChanged();
				}
			}
		}
		
		[Column(Storage="_FechaInicio", DbType="DateTime NOT NULL")]
		public System.DateTime FechaInicio
		{
			get
			{
				return this._FechaInicio;
			}
			set
			{
				if ((this._FechaInicio != value))
				{
					this.OnFechaInicioChanging(value);
					this.SendPropertyChanging();
					this._FechaInicio = value;
					this.SendPropertyChanged("FechaInicio");
					this.OnFechaInicioChanged();
				}
			}
		}
		
		[Column(Storage="_FechaFin", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaFin
		{
			get
			{
				return this._FechaFin;
			}
			set
			{
				if ((this._FechaFin != value))
				{
					this.OnFechaFinChanging(value);
					this.SendPropertyChanging();
					this._FechaFin = value;
					this.SendPropertyChanged("FechaFin");
					this.OnFechaFinChanged();
				}
			}
		}
		
		[Association(Name="LoteAnimal_AniLot", Storage="_LoteAnimal", ThisKey="IdLote", OtherKey="Id", IsForeignKey=true)]
		public LoteAnimal LoteAnimal
		{
			get
			{
				return this._LoteAnimal.Entity;
			}
			set
			{
				LoteAnimal previousValue = this._LoteAnimal.Entity;
				if (((previousValue != value) 
							|| (this._LoteAnimal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoteAnimal.Entity = null;
						previousValue.AniLot.Remove(this);
					}
					this._LoteAnimal.Entity = value;
					if ((value != null))
					{
						value.AniLot.Add(this);
						this._IdLote = value.Id;
					}
					else
					{
						this._IdLote = default(int);
					}
					this.SendPropertyChanged("LoteAnimal");
				}
			}
		}
		
		[Association(Name="Animal_AniLot", Storage="_Animal", ThisKey="IdAnimal", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.AniLot.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.AniLot.Add(this);
						this._IdAnimal = value.Id;
					}
					else
					{
						this._IdAnimal = default(int);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Categoria")]
	public partial class Categoria : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private string _Detalle;
		
		private EntitySet<TipificacionCanal> _TipificacionCanals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    partial void OnDetalleChanging(string value);
    partial void OnDetalleChanged();
    #endregion
		
		public Categoria()
		{
			this._TipificacionCanals = new EntitySet<TipificacionCanal>(new Action<TipificacionCanal>(this.attach_TipificacionCanals), new Action<TipificacionCanal>(this.detach_TipificacionCanals));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Column(Storage="_Detalle", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Detalle
		{
			get
			{
				return this._Detalle;
			}
			set
			{
				if ((this._Detalle != value))
				{
					this.OnDetalleChanging(value);
					this.SendPropertyChanging();
					this._Detalle = value;
					this.SendPropertyChanged("Detalle");
					this.OnDetalleChanged();
				}
			}
		}
		
		[Association(Name="Categoria_TipificacionCanal", Storage="_TipificacionCanals", ThisKey="Id", OtherKey="IdCategoria")]
		public EntitySet<TipificacionCanal> Tipificaciones
		{
			get
			{
				return this._TipificacionCanals;
			}
			set
			{
				this._TipificacionCanals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TipificacionCanals(TipificacionCanal entity)
		{
			this.SendPropertyChanging();
			entity.Categoria = this;
		}
		
		private void detach_TipificacionCanals(TipificacionCanal entity)
		{
			this.SendPropertyChanging();
			entity.Categoria = null;
		}
	}
	
	[Table(Name="dbo.Cita")]
	public partial class Cita : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdExplotacion;
		
		private System.Nullable<int> _IdContacto;
		
		private System.DateTime _Fecha;
		
		private string _Lugar;
		
		private string _Tema;
		
		private EntityRef<Contacto> _Contacto;
		
		private EntityRef<Explotacion> _Explotacion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdExplotacionChanging(int value);
    partial void OnIdExplotacionChanged();
    partial void OnIdContactoChanging(System.Nullable<int> value);
    partial void OnIdContactoChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    partial void OnLugarChanging(string value);
    partial void OnLugarChanged();
    partial void OnTemaChanging(string value);
    partial void OnTemaChanged();
    #endregion
		
		public Cita()
		{
			this._Contacto = default(EntityRef<Contacto>);
			this._Explotacion = default(EntityRef<Explotacion>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdExplotacion", DbType="Int NOT NULL")]
		public int IdExplotacion
		{
			get
			{
				return this._IdExplotacion;
			}
			set
			{
				if ((this._IdExplotacion != value))
				{
					if (this._Explotacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdExplotacionChanging(value);
					this.SendPropertyChanging();
					this._IdExplotacion = value;
					this.SendPropertyChanged("IdExplotacion");
					this.OnIdExplotacionChanged();
				}
			}
		}
		
		[Column(Storage="_IdContacto", DbType="Int")]
		public System.Nullable<int> IdContacto
		{
			get
			{
				return this._IdContacto;
			}
			set
			{
				if ((this._IdContacto != value))
				{
					if (this._Contacto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdContactoChanging(value);
					this.SendPropertyChanging();
					this._IdContacto = value;
					this.SendPropertyChanged("IdContacto");
					this.OnIdContactoChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Column(Storage="_Lugar", DbType="VarChar(100)")]
		public string Lugar
		{
			get
			{
				return this._Lugar;
			}
			set
			{
				if ((this._Lugar != value))
				{
					this.OnLugarChanging(value);
					this.SendPropertyChanging();
					this._Lugar = value;
					this.SendPropertyChanged("Lugar");
					this.OnLugarChanged();
				}
			}
		}
		
		[Column(Storage="_Tema", DbType="VarChar(255)")]
		public string Tema
		{
			get
			{
				return this._Tema;
			}
			set
			{
				if ((this._Tema != value))
				{
					this.OnTemaChanging(value);
					this.SendPropertyChanging();
					this._Tema = value;
					this.SendPropertyChanged("Tema");
					this.OnTemaChanged();
				}
			}
		}
		
		[Association(Name="Contacto_Cita", Storage="_Contacto", ThisKey="IdContacto", OtherKey="Id", IsForeignKey=true)]
		public Contacto Contacto
		{
			get
			{
				return this._Contacto.Entity;
			}
			set
			{
				Contacto previousValue = this._Contacto.Entity;
				if (((previousValue != value) 
							|| (this._Contacto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contacto.Entity = null;
						previousValue.Cita.Remove(this);
					}
					this._Contacto.Entity = value;
					if ((value != null))
					{
						value.Cita.Add(this);
						this._IdContacto = value.Id;
					}
					else
					{
						this._IdContacto = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contacto");
				}
			}
		}
		
		[Association(Name="Explotacion_Cita", Storage="_Explotacion", ThisKey="IdExplotacion", OtherKey="Id", IsForeignKey=true)]
		public Explotacion Explotacion
		{
			get
			{
				return this._Explotacion.Entity;
			}
			set
			{
				Explotacion previousValue = this._Explotacion.Entity;
				if (((previousValue != value) 
							|| (this._Explotacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Explotacion.Entity = null;
						previousValue.Cita.Remove(this);
					}
					this._Explotacion.Entity = value;
					if ((value != null))
					{
						value.Cita.Add(this);
						this._IdExplotacion = value.Id;
					}
					else
					{
						this._IdExplotacion = default(int);
					}
					this.SendPropertyChanged("Explotacion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Composicion")]
	public partial class Composicion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdRacion;
		
		private int _IdAlimento;
		
		private decimal _Porcentaje;
		
		private EntityRef<Producto> _Producto;
		
		private EntityRef<Racion> _Racion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRacionChanging(int value);
    partial void OnIdRacionChanged();
    partial void OnIdAlimentoChanging(int value);
    partial void OnIdAlimentoChanged();
    partial void OnPorcentajeChanging(decimal value);
    partial void OnPorcentajeChanged();
    #endregion
		
		public Composicion()
		{
			this._Producto = default(EntityRef<Producto>);
			this._Racion = default(EntityRef<Racion>);
			OnCreated();
		}
		
		[Column(Storage="_IdRacion", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdRacion
		{
			get
			{
				return this._IdRacion;
			}
			set
			{
				if ((this._IdRacion != value))
				{
					if (this._Racion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdRacionChanging(value);
					this.SendPropertyChanging();
					this._IdRacion = value;
					this.SendPropertyChanged("IdRacion");
					this.OnIdRacionChanged();
				}
			}
		}
		
		[Column(Storage="_IdAlimento", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdAlimento
		{
			get
			{
				return this._IdAlimento;
			}
			set
			{
				if ((this._IdAlimento != value))
				{
					if (this._Producto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAlimentoChanging(value);
					this.SendPropertyChanging();
					this._IdAlimento = value;
					this.SendPropertyChanged("IdAlimento");
					this.OnIdAlimentoChanged();
				}
			}
		}
		
		[Column(Storage="_Porcentaje", DbType="Decimal(5,2) NOT NULL")]
		public decimal Porcentaje
		{
			get
			{
				return this._Porcentaje;
			}
			set
			{
				if ((this._Porcentaje != value))
				{
					this.OnPorcentajeChanging(value);
					this.SendPropertyChanging();
					this._Porcentaje = value;
					this.SendPropertyChanged("Porcentaje");
					this.OnPorcentajeChanged();
				}
			}
		}
		
		[Association(Name="Producto_Composicion", Storage="_Producto", ThisKey="IdAlimento", OtherKey="Id", IsForeignKey=true)]
		public Producto Alimento
		{
			get
			{
				return this._Producto.Entity;
			}
			set
			{
				Producto previousValue = this._Producto.Entity;
				if (((previousValue != value) 
							|| (this._Producto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Producto.Entity = null;
						previousValue.Composiciones.Remove(this);
					}
					this._Producto.Entity = value;
					if ((value != null))
					{
						value.Composiciones.Add(this);
						this._IdAlimento = value.Id;
					}
					else
					{
						this._IdAlimento = default(int);
					}
					this.SendPropertyChanged("Alimento");
				}
			}
		}
		
		[Association(Name="Racion_Composicion", Storage="_Racion", ThisKey="IdRacion", OtherKey="Id", IsForeignKey=true)]
		public Racion Racion
		{
			get
			{
				return this._Racion.Entity;
			}
			set
			{
				Racion previousValue = this._Racion.Entity;
				if (((previousValue != value) 
							|| (this._Racion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Racion.Entity = null;
						previousValue.Composiciones.Remove(this);
					}
					this._Racion.Entity = value;
					if ((value != null))
					{
						value.Composiciones.Add(this);
						this._IdRacion = value.Id;
					}
					else
					{
						this._IdRacion = default(int);
					}
					this.SendPropertyChanged("Racion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CondicionJuridica")]
	public partial class CondicionJuridica : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private EntitySet<Explotacion> _Explotacion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public CondicionJuridica()
		{
			this._Explotacion = new EntitySet<Explotacion>(new Action<Explotacion>(this.attach_Explotacion), new Action<Explotacion>(this.detach_Explotacion));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="CondicionJuridica_Explotacion", Storage="_Explotacion", ThisKey="Id", OtherKey="IdCJuridica")]
		public EntitySet<Explotacion> Explotacion
		{
			get
			{
				return this._Explotacion;
			}
			set
			{
				this._Explotacion.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Explotacion(Explotacion entity)
		{
			this.SendPropertyChanging();
			entity.CondicionJuridica = this;
		}
		
		private void detach_Explotacion(Explotacion entity)
		{
			this.SendPropertyChanging();
			entity.CondicionJuridica = null;
		}
	}
	
	[Table(Name="dbo.Configuracion")]
	public partial class Configuracion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Clave;
		
		private string _Valor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClaveChanging(string value);
    partial void OnClaveChanged();
    partial void OnValorChanging(string value);
    partial void OnValorChanged();
    #endregion
		
		public Configuracion()
		{
			OnCreated();
		}
		
		[Column(Storage="_Clave", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Clave
		{
			get
			{
				return this._Clave;
			}
			set
			{
				if ((this._Clave != value))
				{
					this.OnClaveChanging(value);
					this.SendPropertyChanging();
					this._Clave = value;
					this.SendPropertyChanged("Clave");
					this.OnClaveChanged();
				}
			}
		}
		
		[Column(Storage="_Valor", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Valor
		{
			get
			{
				return this._Valor;
			}
			set
			{
				if ((this._Valor != value))
				{
					this.OnValorChanging(value);
					this.SendPropertyChanging();
					this._Valor = value;
					this.SendPropertyChanged("Valor");
					this.OnValorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Conformacion")]
	public partial class Conformacion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private EntitySet<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public Conformacion()
		{
			this._Animal = new EntitySet<Animal>(new Action<Animal>(this.attach_Animal), new Action<Animal>(this.detach_Animal));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="Conformacion_Animal", Storage="_Animal", ThisKey="Id", OtherKey="IdConformacion")]
		public EntitySet<Animal> Animal
		{
			get
			{
				return this._Animal;
			}
			set
			{
				this._Animal.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animal(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Conformacion = this;
		}
		
		private void detach_Animal(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Conformacion = null;
		}
	}
	
	[Table(Name="dbo.ConformacionCanal")]
	public partial class ConformacionCanal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private char _Codigo;
		
		private string _Descripcion;
		
		private string _Detalle;
		
		private EntitySet<TipificacionCanal> _TipificacionCanals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCodigoChanging(char value);
    partial void OnCodigoChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    partial void OnDetalleChanging(string value);
    partial void OnDetalleChanged();
    #endregion
		
		public ConformacionCanal()
		{
			this._TipificacionCanals = new EntitySet<TipificacionCanal>(new Action<TipificacionCanal>(this.attach_TipificacionCanals), new Action<TipificacionCanal>(this.detach_TipificacionCanals));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Codigo", DbType="VarChar(1) NOT NULL")]
		public char Codigo
		{
			get
			{
				return this._Codigo;
			}
			set
			{
				if ((this._Codigo != value))
				{
					this.OnCodigoChanging(value);
					this.SendPropertyChanging();
					this._Codigo = value;
					this.SendPropertyChanged("Codigo");
					this.OnCodigoChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Column(Storage="_Detalle", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Detalle
		{
			get
			{
				return this._Detalle;
			}
			set
			{
				if ((this._Detalle != value))
				{
					this.OnDetalleChanging(value);
					this.SendPropertyChanging();
					this._Detalle = value;
					this.SendPropertyChanged("Detalle");
					this.OnDetalleChanged();
				}
			}
		}
		
		[Association(Name="ConformacionCanal_TipificacionCanal", Storage="_TipificacionCanals", ThisKey="Id", OtherKey="IdConformacion")]
		public EntitySet<TipificacionCanal> Tipificaciones
		{
			get
			{
				return this._TipificacionCanals;
			}
			set
			{
				this._TipificacionCanals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TipificacionCanals(TipificacionCanal entity)
		{
			this.SendPropertyChanging();
			entity.Conformacion = this;
		}
		
		private void detach_TipificacionCanals(TipificacionCanal entity)
		{
			this.SendPropertyChanging();
			entity.Conformacion = null;
		}
	}
	
	[Table(Name="dbo.Cuenta")]
	public partial class Cuenta : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdTitular;
		
		private string _Banco;
		
		private string _Sucursal;
		
		private string _Numero;
		
		private EntityRef<Titular> _Titular;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdTitularChanging(int value);
    partial void OnIdTitularChanged();
    partial void OnBancoChanging(string value);
    partial void OnBancoChanged();
    partial void OnSucursalChanging(string value);
    partial void OnSucursalChanged();
    partial void OnNumeroChanging(string value);
    partial void OnNumeroChanged();
    #endregion
		
		public Cuenta()
		{
			this._Titular = default(EntityRef<Titular>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdTitular", DbType="Int NOT NULL")]
		public int IdTitular
		{
			get
			{
				return this._IdTitular;
			}
			set
			{
				if ((this._IdTitular != value))
				{
					if (this._Titular.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTitularChanging(value);
					this.SendPropertyChanging();
					this._IdTitular = value;
					this.SendPropertyChanged("IdTitular");
					this.OnIdTitularChanged();
				}
			}
		}
		
		[Column(Storage="_Banco", DbType="VarChar(100)")]
		public string Banco
		{
			get
			{
				return this._Banco;
			}
			set
			{
				if ((this._Banco != value))
				{
					this.OnBancoChanging(value);
					this.SendPropertyChanging();
					this._Banco = value;
					this.SendPropertyChanged("Banco");
					this.OnBancoChanged();
				}
			}
		}
		
		[Column(Storage="_Sucursal", DbType="VarChar(100)")]
		public string Sucursal
		{
			get
			{
				return this._Sucursal;
			}
			set
			{
				if ((this._Sucursal != value))
				{
					this.OnSucursalChanging(value);
					this.SendPropertyChanging();
					this._Sucursal = value;
					this.SendPropertyChanged("Sucursal");
					this.OnSucursalChanged();
				}
			}
		}
		
		[Column(Storage="_Numero", DbType="VarChar(23) NOT NULL", CanBeNull=false)]
		public string Numero
		{
			get
			{
				return this._Numero;
			}
			set
			{
				if ((this._Numero != value))
				{
					this.OnNumeroChanging(value);
					this.SendPropertyChanging();
					this._Numero = value;
					this.SendPropertyChanged("Numero");
					this.OnNumeroChanged();
				}
			}
		}
		
		[Association(Name="Titular_Cuenta", Storage="_Titular", ThisKey="IdTitular", OtherKey="Id", IsForeignKey=true)]
		public Titular Titular
		{
			get
			{
				return this._Titular.Entity;
			}
			set
			{
				Titular previousValue = this._Titular.Entity;
				if (((previousValue != value) 
							|| (this._Titular.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Titular.Entity = null;
						previousValue.Cuenta.Remove(this);
					}
					this._Titular.Entity = value;
					if ((value != null))
					{
						value.Cuenta.Add(this);
						this._IdTitular = value.Id;
					}
					else
					{
						this._IdTitular = default(int);
					}
					this.SendPropertyChanged("Titular");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Enfermedad")]
	public partial class Enfermedad : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdTipo;
		
		private string _Descripcion;
		
		private EntitySet<HistMedicamento> _HistMedicamentos;
		
		private EntitySet<DiagAnimal> _DiagAnimal;
		
		private EntityRef<TipoEnfermedad> _TipoEnfermedad;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdTipoChanging(int value);
    partial void OnIdTipoChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public Enfermedad()
		{
			this._HistMedicamentos = new EntitySet<HistMedicamento>(new Action<HistMedicamento>(this.attach_HistMedicamentos), new Action<HistMedicamento>(this.detach_HistMedicamentos));
			this._DiagAnimal = new EntitySet<DiagAnimal>(new Action<DiagAnimal>(this.attach_DiagAnimal), new Action<DiagAnimal>(this.detach_DiagAnimal));
			this._TipoEnfermedad = default(EntityRef<TipoEnfermedad>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdTipo", DbType="Int NOT NULL")]
		public int IdTipo
		{
			get
			{
				return this._IdTipo;
			}
			set
			{
				if ((this._IdTipo != value))
				{
					if (this._TipoEnfermedad.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTipoChanging(value);
					this.SendPropertyChanging();
					this._IdTipo = value;
					this.SendPropertyChanged("IdTipo");
					this.OnIdTipoChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="Enfermedad_HistMedicamento", Storage="_HistMedicamentos", ThisKey="Id", OtherKey="IdEnfermedad")]
		public EntitySet<HistMedicamento> Historicos
		{
			get
			{
				return this._HistMedicamentos;
			}
			set
			{
				this._HistMedicamentos.Assign(value);
			}
		}
		
		[Association(Name="Enfermedad_DiagAnimal", Storage="_DiagAnimal", ThisKey="Id", OtherKey="IdEnfermedad")]
		public EntitySet<DiagAnimal> DiagAnimal
		{
			get
			{
				return this._DiagAnimal;
			}
			set
			{
				this._DiagAnimal.Assign(value);
			}
		}
		
		[Association(Name="TipoEnfermedad_Enfermedad", Storage="_TipoEnfermedad", ThisKey="IdTipo", OtherKey="Id", IsForeignKey=true)]
		public TipoEnfermedad Tipo
		{
			get
			{
				return this._TipoEnfermedad.Entity;
			}
			set
			{
				TipoEnfermedad previousValue = this._TipoEnfermedad.Entity;
				if (((previousValue != value) 
							|| (this._TipoEnfermedad.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoEnfermedad.Entity = null;
						previousValue.Enfermedades.Remove(this);
					}
					this._TipoEnfermedad.Entity = value;
					if ((value != null))
					{
						value.Enfermedades.Add(this);
						this._IdTipo = value.Id;
					}
					else
					{
						this._IdTipo = default(int);
					}
					this.SendPropertyChanged("Tipo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HistMedicamentos(HistMedicamento entity)
		{
			this.SendPropertyChanging();
			entity.Enfermedad = this;
		}
		
		private void detach_HistMedicamentos(HistMedicamento entity)
		{
			this.SendPropertyChanging();
			entity.Enfermedad = null;
		}
		
		private void attach_DiagAnimal(DiagAnimal entity)
		{
			this.SendPropertyChanging();
			entity.Enfermedad = this;
		}
		
		private void detach_DiagAnimal(DiagAnimal entity)
		{
			this.SendPropertyChanging();
			entity.Enfermedad = null;
		}
	}
	
	[Table(Name="dbo.EngrasamientoCanal")]
	public partial class EngrasamientoCanal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdAnimal;
		
		private int _IdTipo;
		
		private System.DateTime _Fecha;
		
		private EntityRef<TipoEngrasamiento> _TipoEngrasamiento;
		
		private EntityRef<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdAnimalChanging(int value);
    partial void OnIdAnimalChanged();
    partial void OnIdTipoChanging(int value);
    partial void OnIdTipoChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    #endregion
		
		public EngrasamientoCanal()
		{
			this._TipoEngrasamiento = default(EntityRef<TipoEngrasamiento>);
			this._Animal = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdAnimal", DbType="Int NOT NULL")]
		public int IdAnimal
		{
			get
			{
				return this._IdAnimal;
			}
			set
			{
				if ((this._IdAnimal != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAnimalChanging(value);
					this.SendPropertyChanging();
					this._IdAnimal = value;
					this.SendPropertyChanged("IdAnimal");
					this.OnIdAnimalChanged();
				}
			}
		}
		
		[Column(Storage="_IdTipo", DbType="Int NOT NULL")]
		public int IdTipo
		{
			get
			{
				return this._IdTipo;
			}
			set
			{
				if ((this._IdTipo != value))
				{
					if (this._TipoEngrasamiento.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTipoChanging(value);
					this.SendPropertyChanging();
					this._IdTipo = value;
					this.SendPropertyChanged("IdTipo");
					this.OnIdTipoChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Association(Name="TipoEngrasamiento_EngrasamientoCanal", Storage="_TipoEngrasamiento", ThisKey="IdTipo", OtherKey="Id", IsForeignKey=true)]
		public TipoEngrasamiento Tipo
		{
			get
			{
				return this._TipoEngrasamiento.Entity;
			}
			set
			{
				TipoEngrasamiento previousValue = this._TipoEngrasamiento.Entity;
				if (((previousValue != value) 
							|| (this._TipoEngrasamiento.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoEngrasamiento.Entity = null;
						previousValue.Engrasamientos.Remove(this);
					}
					this._TipoEngrasamiento.Entity = value;
					if ((value != null))
					{
						value.Engrasamientos.Add(this);
						this._IdTipo = value.Id;
					}
					else
					{
						this._IdTipo = default(int);
					}
					this.SendPropertyChanged("Tipo");
				}
			}
		}
		
		[Association(Name="Animal_EngrasamientoCanal", Storage="_Animal", ThisKey="IdAnimal", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.EngrasamientoCanal.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.EngrasamientoCanal.Add(this);
						this._IdAnimal = value.Id;
					}
					else
					{
						this._IdAnimal = default(int);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Especie")]
	public partial class Especie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private EntitySet<ExpEsp> _ExpEsps;
		
		private EntitySet<HistMedicamento> _HistMedicamentos;
		
		private EntitySet<Raza> _Razas;
		
		private EntitySet<Marcador> _Marcadores;
		
		private EntitySet<TipoCondicion> _TipoCondicion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public Especie()
		{
			this._ExpEsps = new EntitySet<ExpEsp>(new Action<ExpEsp>(this.attach_ExpEsps), new Action<ExpEsp>(this.detach_ExpEsps));
			this._HistMedicamentos = new EntitySet<HistMedicamento>(new Action<HistMedicamento>(this.attach_HistMedicamentos), new Action<HistMedicamento>(this.detach_HistMedicamentos));
			this._Razas = new EntitySet<Raza>(new Action<Raza>(this.attach_Razas), new Action<Raza>(this.detach_Razas));
			this._Marcadores = new EntitySet<Marcador>(new Action<Marcador>(this.attach_Marcadores), new Action<Marcador>(this.detach_Marcadores));
			this._TipoCondicion = new EntitySet<TipoCondicion>(new Action<TipoCondicion>(this.attach_TipoCondicion), new Action<TipoCondicion>(this.detach_TipoCondicion));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="Especie_ExpEsp", Storage="_ExpEsps", ThisKey="Id", OtherKey="IdEspecie")]
		public EntitySet<ExpEsp> ExpEsp
		{
			get
			{
				return this._ExpEsps;
			}
			set
			{
				this._ExpEsps.Assign(value);
			}
		}
		
		[Association(Name="Especie_HistMedicamento", Storage="_HistMedicamentos", ThisKey="Id", OtherKey="IdEspecie")]
		public EntitySet<HistMedicamento> Historicos
		{
			get
			{
				return this._HistMedicamentos;
			}
			set
			{
				this._HistMedicamentos.Assign(value);
			}
		}
		
		[Association(Name="Especie_Raza", Storage="_Razas", ThisKey="Id", OtherKey="IdEspecie")]
		public EntitySet<Raza> Razas
		{
			get
			{
				return this._Razas;
			}
			set
			{
				this._Razas.Assign(value);
			}
		}
		
		[Association(Name="Especie_Marcador", Storage="_Marcadores", ThisKey="Id", OtherKey="IdEspecie")]
		public EntitySet<Marcador> Marcadores
		{
			get
			{
				return this._Marcadores;
			}
			set
			{
				this._Marcadores.Assign(value);
			}
		}
		
		[Association(Name="Especie_TipoCondicion", Storage="_TipoCondicion", ThisKey="Id", OtherKey="IdEspecie")]
		public EntitySet<TipoCondicion> TipoCondicion
		{
			get
			{
				return this._TipoCondicion;
			}
			set
			{
				this._TipoCondicion.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExpEsps(ExpEsp entity)
		{
			this.SendPropertyChanging();
			entity.Especie = this;
		}
		
		private void detach_ExpEsps(ExpEsp entity)
		{
			this.SendPropertyChanging();
			entity.Especie = null;
		}
		
		private void attach_HistMedicamentos(HistMedicamento entity)
		{
			this.SendPropertyChanging();
			entity.Especie = this;
		}
		
		private void detach_HistMedicamentos(HistMedicamento entity)
		{
			this.SendPropertyChanging();
			entity.Especie = null;
		}
		
		private void attach_Razas(Raza entity)
		{
			this.SendPropertyChanging();
			entity.Especie = this;
		}
		
		private void detach_Razas(Raza entity)
		{
			this.SendPropertyChanging();
			entity.Especie = null;
		}
		
		private void attach_Marcadores(Marcador entity)
		{
			this.SendPropertyChanging();
			entity.Especie = this;
		}
		
		private void detach_Marcadores(Marcador entity)
		{
			this.SendPropertyChanging();
			entity.Especie = null;
		}
		
		private void attach_TipoCondicion(TipoCondicion entity)
		{
			this.SendPropertyChanging();
			entity.Especie = this;
		}
		
		private void detach_TipoCondicion(TipoCondicion entity)
		{
			this.SendPropertyChanging();
			entity.Especie = null;
		}
	}
	
	[Table(Name="dbo.ExpCli")]
	public partial class ExpCli : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdExplotacion;
		
		private int _IdCliente;
		
		private System.DateTime _FechaInicio;
		
		private System.Nullable<System.DateTime> _FechaFin;
		
		private EntityRef<Cliente> _Cliente;
		
		private EntityRef<Explotacion> _Explotacion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdExplotacionChanging(int value);
    partial void OnIdExplotacionChanged();
    partial void OnIdClienteChanging(int value);
    partial void OnIdClienteChanged();
    partial void OnFechaInicioChanging(System.DateTime value);
    partial void OnFechaInicioChanged();
    partial void OnFechaFinChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaFinChanged();
    #endregion
		
		public ExpCli()
		{
			this._Cliente = default(EntityRef<Cliente>);
			this._Explotacion = default(EntityRef<Explotacion>);
			OnCreated();
		}
		
		[Column(Storage="_IdExplotacion", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdExplotacion
		{
			get
			{
				return this._IdExplotacion;
			}
			set
			{
				if ((this._IdExplotacion != value))
				{
					if (this._Explotacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdExplotacionChanging(value);
					this.SendPropertyChanging();
					this._IdExplotacion = value;
					this.SendPropertyChanged("IdExplotacion");
					this.OnIdExplotacionChanged();
				}
			}
		}
		
		[Column(Storage="_IdCliente", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdCliente
		{
			get
			{
				return this._IdCliente;
			}
			set
			{
				if ((this._IdCliente != value))
				{
					if (this._Cliente.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdClienteChanging(value);
					this.SendPropertyChanging();
					this._IdCliente = value;
					this.SendPropertyChanged("IdCliente");
					this.OnIdClienteChanged();
				}
			}
		}
		
		[Column(Storage="_FechaInicio", DbType="DateTime NOT NULL")]
		public System.DateTime FechaInicio
		{
			get
			{
				return this._FechaInicio;
			}
			set
			{
				if ((this._FechaInicio != value))
				{
					this.OnFechaInicioChanging(value);
					this.SendPropertyChanging();
					this._FechaInicio = value;
					this.SendPropertyChanged("FechaInicio");
					this.OnFechaInicioChanged();
				}
			}
		}
		
		[Column(Storage="_FechaFin", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaFin
		{
			get
			{
				return this._FechaFin;
			}
			set
			{
				if ((this._FechaFin != value))
				{
					this.OnFechaFinChanging(value);
					this.SendPropertyChanging();
					this._FechaFin = value;
					this.SendPropertyChanged("FechaFin");
					this.OnFechaFinChanged();
				}
			}
		}
		
		[Association(Name="Cliente_ExpCli", Storage="_Cliente", ThisKey="IdCliente", OtherKey="Id", IsForeignKey=true)]
		public Cliente Cliente
		{
			get
			{
				return this._Cliente.Entity;
			}
			set
			{
				Cliente previousValue = this._Cliente.Entity;
				if (((previousValue != value) 
							|| (this._Cliente.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cliente.Entity = null;
						previousValue.ExpCli.Remove(this);
					}
					this._Cliente.Entity = value;
					if ((value != null))
					{
						value.ExpCli.Add(this);
						this._IdCliente = value.Id;
					}
					else
					{
						this._IdCliente = default(int);
					}
					this.SendPropertyChanged("Cliente");
				}
			}
		}
		
		[Association(Name="Explotacion_ExpCli", Storage="_Explotacion", ThisKey="IdExplotacion", OtherKey="Id", IsForeignKey=true)]
		public Explotacion Explotacion
		{
			get
			{
				return this._Explotacion.Entity;
			}
			set
			{
				Explotacion previousValue = this._Explotacion.Entity;
				if (((previousValue != value) 
							|| (this._Explotacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Explotacion.Entity = null;
						previousValue.ExpCli.Remove(this);
					}
					this._Explotacion.Entity = value;
					if ((value != null))
					{
						value.ExpCli.Add(this);
						this._IdExplotacion = value.Id;
					}
					else
					{
						this._IdExplotacion = default(int);
					}
					this.SendPropertyChanged("Explotacion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ExpEsp")]
	public partial class ExpEsp : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdExplotacion;
		
		private int _IdEspecie;
		
		private EntityRef<Especie> _Especie;
		
		private EntityRef<Explotacion> _Explotacion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdExplotacionChanging(int value);
    partial void OnIdExplotacionChanged();
    partial void OnIdEspecieChanging(int value);
    partial void OnIdEspecieChanged();
    #endregion
		
		public ExpEsp()
		{
			this._Especie = default(EntityRef<Especie>);
			this._Explotacion = default(EntityRef<Explotacion>);
			OnCreated();
		}
		
		[Column(Storage="_IdExplotacion", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdExplotacion
		{
			get
			{
				return this._IdExplotacion;
			}
			set
			{
				if ((this._IdExplotacion != value))
				{
					if (this._Explotacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdExplotacionChanging(value);
					this.SendPropertyChanging();
					this._IdExplotacion = value;
					this.SendPropertyChanged("IdExplotacion");
					this.OnIdExplotacionChanged();
				}
			}
		}
		
		[Column(Storage="_IdEspecie", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdEspecie
		{
			get
			{
				return this._IdEspecie;
			}
			set
			{
				if ((this._IdEspecie != value))
				{
					if (this._Especie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdEspecieChanging(value);
					this.SendPropertyChanging();
					this._IdEspecie = value;
					this.SendPropertyChanged("IdEspecie");
					this.OnIdEspecieChanged();
				}
			}
		}
		
		[Association(Name="Especie_ExpEsp", Storage="_Especie", ThisKey="IdEspecie", OtherKey="Id", IsForeignKey=true)]
		public Especie Especie
		{
			get
			{
				return this._Especie.Entity;
			}
			set
			{
				Especie previousValue = this._Especie.Entity;
				if (((previousValue != value) 
							|| (this._Especie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Especie.Entity = null;
						previousValue.ExpEsp.Remove(this);
					}
					this._Especie.Entity = value;
					if ((value != null))
					{
						value.ExpEsp.Add(this);
						this._IdEspecie = value.Id;
					}
					else
					{
						this._IdEspecie = default(int);
					}
					this.SendPropertyChanged("Especie");
				}
			}
		}
		
		[Association(Name="Explotacion_ExpEsp", Storage="_Explotacion", ThisKey="IdExplotacion", OtherKey="Id", IsForeignKey=true)]
		public Explotacion Explotacion
		{
			get
			{
				return this._Explotacion.Entity;
			}
			set
			{
				Explotacion previousValue = this._Explotacion.Entity;
				if (((previousValue != value) 
							|| (this._Explotacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Explotacion.Entity = null;
						previousValue.ExpEsp.Remove(this);
					}
					this._Explotacion.Entity = value;
					if ((value != null))
					{
						value.ExpEsp.Add(this);
						this._IdExplotacion = value.Id;
					}
					else
					{
						this._IdExplotacion = default(int);
					}
					this.SendPropertyChanged("Explotacion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ExpMod")]
	public partial class ExpMod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdExplotacion;
		
		private int _IdModulo;
		
		private EntityRef<Modulo> _Modulo;
		
		private EntityRef<Explotacion> _Explotacion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdExplotacionChanging(int value);
    partial void OnIdExplotacionChanged();
    partial void OnIdModuloChanging(int value);
    partial void OnIdModuloChanged();
    #endregion
		
		public ExpMod()
		{
			this._Modulo = default(EntityRef<Modulo>);
			this._Explotacion = default(EntityRef<Explotacion>);
			OnCreated();
		}
		
		[Column(Storage="_IdExplotacion", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdExplotacion
		{
			get
			{
				return this._IdExplotacion;
			}
			set
			{
				if ((this._IdExplotacion != value))
				{
					if (this._Explotacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdExplotacionChanging(value);
					this.SendPropertyChanging();
					this._IdExplotacion = value;
					this.SendPropertyChanged("IdExplotacion");
					this.OnIdExplotacionChanged();
				}
			}
		}
		
		[Column(Storage="_IdModulo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdModulo
		{
			get
			{
				return this._IdModulo;
			}
			set
			{
				if ((this._IdModulo != value))
				{
					if (this._Modulo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdModuloChanging(value);
					this.SendPropertyChanging();
					this._IdModulo = value;
					this.SendPropertyChanged("IdModulo");
					this.OnIdModuloChanged();
				}
			}
		}
		
		[Association(Name="Modulo_ExpMod", Storage="_Modulo", ThisKey="IdModulo", OtherKey="Id", IsForeignKey=true)]
		public Modulo Modulo
		{
			get
			{
				return this._Modulo.Entity;
			}
			set
			{
				Modulo previousValue = this._Modulo.Entity;
				if (((previousValue != value) 
							|| (this._Modulo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Modulo.Entity = null;
						previousValue.ExpMod.Remove(this);
					}
					this._Modulo.Entity = value;
					if ((value != null))
					{
						value.ExpMod.Add(this);
						this._IdModulo = value.Id;
					}
					else
					{
						this._IdModulo = default(int);
					}
					this.SendPropertyChanged("Modulo");
				}
			}
		}
		
		[Association(Name="Explotacion_ExpMod", Storage="_Explotacion", ThisKey="IdExplotacion", OtherKey="Id", IsForeignKey=true)]
		public Explotacion Explotacion
		{
			get
			{
				return this._Explotacion.Entity;
			}
			set
			{
				Explotacion previousValue = this._Explotacion.Entity;
				if (((previousValue != value) 
							|| (this._Explotacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Explotacion.Entity = null;
						previousValue.ExpMod.Remove(this);
					}
					this._Explotacion.Entity = value;
					if ((value != null))
					{
						value.ExpMod.Add(this);
						this._IdExplotacion = value.Id;
					}
					else
					{
						this._IdExplotacion = default(int);
					}
					this.SendPropertyChanged("Explotacion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ExpPro")]
	public partial class ExpPro : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdExplotacion;
		
		private int _IdProveedor;
		
		private System.DateTime _FechaInicio;
		
		private System.Nullable<System.DateTime> _FechaFin;
		
		private EntityRef<Proveedor> _Proveedor;
		
		private EntityRef<Explotacion> _Explotacion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdExplotacionChanging(int value);
    partial void OnIdExplotacionChanged();
    partial void OnIdProveedorChanging(int value);
    partial void OnIdProveedorChanged();
    partial void OnFechaInicioChanging(System.DateTime value);
    partial void OnFechaInicioChanged();
    partial void OnFechaFinChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaFinChanged();
    #endregion
		
		public ExpPro()
		{
			this._Proveedor = default(EntityRef<Proveedor>);
			this._Explotacion = default(EntityRef<Explotacion>);
			OnCreated();
		}
		
		[Column(Storage="_IdExplotacion", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdExplotacion
		{
			get
			{
				return this._IdExplotacion;
			}
			set
			{
				if ((this._IdExplotacion != value))
				{
					if (this._Explotacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdExplotacionChanging(value);
					this.SendPropertyChanging();
					this._IdExplotacion = value;
					this.SendPropertyChanged("IdExplotacion");
					this.OnIdExplotacionChanged();
				}
			}
		}
		
		[Column(Storage="_IdProveedor", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdProveedor
		{
			get
			{
				return this._IdProveedor;
			}
			set
			{
				if ((this._IdProveedor != value))
				{
					if (this._Proveedor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdProveedorChanging(value);
					this.SendPropertyChanging();
					this._IdProveedor = value;
					this.SendPropertyChanged("IdProveedor");
					this.OnIdProveedorChanged();
				}
			}
		}
		
		[Column(Storage="_FechaInicio", DbType="DateTime NOT NULL")]
		public System.DateTime FechaInicio
		{
			get
			{
				return this._FechaInicio;
			}
			set
			{
				if ((this._FechaInicio != value))
				{
					this.OnFechaInicioChanging(value);
					this.SendPropertyChanging();
					this._FechaInicio = value;
					this.SendPropertyChanged("FechaInicio");
					this.OnFechaInicioChanged();
				}
			}
		}
		
		[Column(Storage="_FechaFin", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaFin
		{
			get
			{
				return this._FechaFin;
			}
			set
			{
				if ((this._FechaFin != value))
				{
					this.OnFechaFinChanging(value);
					this.SendPropertyChanging();
					this._FechaFin = value;
					this.SendPropertyChanged("FechaFin");
					this.OnFechaFinChanged();
				}
			}
		}
		
		[Association(Name="Proveedor_ExpPro", Storage="_Proveedor", ThisKey="IdProveedor", OtherKey="Id", IsForeignKey=true)]
		public Proveedor Proveedor
		{
			get
			{
				return this._Proveedor.Entity;
			}
			set
			{
				Proveedor previousValue = this._Proveedor.Entity;
				if (((previousValue != value) 
							|| (this._Proveedor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Proveedor.Entity = null;
						previousValue.ExpPro.Remove(this);
					}
					this._Proveedor.Entity = value;
					if ((value != null))
					{
						value.ExpPro.Add(this);
						this._IdProveedor = value.Id;
					}
					else
					{
						this._IdProveedor = default(int);
					}
					this.SendPropertyChanged("Proveedor");
				}
			}
		}
		
		[Association(Name="Explotacion_ExpPro", Storage="_Explotacion", ThisKey="IdExplotacion", OtherKey="Id", IsForeignKey=true)]
		public Explotacion Explotacion
		{
			get
			{
				return this._Explotacion.Entity;
			}
			set
			{
				Explotacion previousValue = this._Explotacion.Entity;
				if (((previousValue != value) 
							|| (this._Explotacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Explotacion.Entity = null;
						previousValue.ExpPro.Remove(this);
					}
					this._Explotacion.Entity = value;
					if ((value != null))
					{
						value.ExpPro.Add(this);
						this._IdExplotacion = value.Id;
					}
					else
					{
						this._IdExplotacion = default(int);
					}
					this.SendPropertyChanged("Explotacion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ExpTit")]
	public partial class ExpTit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdExplotacion;
		
		private int _IdTitular;
		
		private System.DateTime _FechaInicio;
		
		private System.Nullable<System.DateTime> _FechaFin;
		
		private EntityRef<Titular> _Titular;
		
		private EntityRef<Explotacion> _Explotacion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdExplotacionChanging(int value);
    partial void OnIdExplotacionChanged();
    partial void OnIdTitularChanging(int value);
    partial void OnIdTitularChanged();
    partial void OnFechaInicioChanging(System.DateTime value);
    partial void OnFechaInicioChanged();
    partial void OnFechaFinChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaFinChanged();
    #endregion
		
		public ExpTit()
		{
			this._Titular = default(EntityRef<Titular>);
			this._Explotacion = default(EntityRef<Explotacion>);
			OnCreated();
		}
		
		[Column(Storage="_IdExplotacion", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdExplotacion
		{
			get
			{
				return this._IdExplotacion;
			}
			set
			{
				if ((this._IdExplotacion != value))
				{
					if (this._Explotacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdExplotacionChanging(value);
					this.SendPropertyChanging();
					this._IdExplotacion = value;
					this.SendPropertyChanged("IdExplotacion");
					this.OnIdExplotacionChanged();
				}
			}
		}
		
		[Column(Storage="_IdTitular", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdTitular
		{
			get
			{
				return this._IdTitular;
			}
			set
			{
				if ((this._IdTitular != value))
				{
					if (this._Titular.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTitularChanging(value);
					this.SendPropertyChanging();
					this._IdTitular = value;
					this.SendPropertyChanged("IdTitular");
					this.OnIdTitularChanged();
				}
			}
		}
		
		[Column(Storage="_FechaInicio", DbType="DateTime NOT NULL")]
		public System.DateTime FechaInicio
		{
			get
			{
				return this._FechaInicio;
			}
			set
			{
				if ((this._FechaInicio != value))
				{
					this.OnFechaInicioChanging(value);
					this.SendPropertyChanging();
					this._FechaInicio = value;
					this.SendPropertyChanged("FechaInicio");
					this.OnFechaInicioChanged();
				}
			}
		}
		
		[Column(Storage="_FechaFin", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaFin
		{
			get
			{
				return this._FechaFin;
			}
			set
			{
				if ((this._FechaFin != value))
				{
					this.OnFechaFinChanging(value);
					this.SendPropertyChanging();
					this._FechaFin = value;
					this.SendPropertyChanged("FechaFin");
					this.OnFechaFinChanged();
				}
			}
		}
		
		[Association(Name="Titular_ExpTit", Storage="_Titular", ThisKey="IdTitular", OtherKey="Id", IsForeignKey=true)]
		public Titular Titular
		{
			get
			{
				return this._Titular.Entity;
			}
			set
			{
				Titular previousValue = this._Titular.Entity;
				if (((previousValue != value) 
							|| (this._Titular.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Titular.Entity = null;
						previousValue.ExpTit.Remove(this);
					}
					this._Titular.Entity = value;
					if ((value != null))
					{
						value.ExpTit.Add(this);
						this._IdTitular = value.Id;
					}
					else
					{
						this._IdTitular = default(int);
					}
					this.SendPropertyChanged("Titular");
				}
			}
		}
		
		[Association(Name="Explotacion_ExpTit", Storage="_Explotacion", ThisKey="IdExplotacion", OtherKey="Id", IsForeignKey=true)]
		public Explotacion Explotacion
		{
			get
			{
				return this._Explotacion.Entity;
			}
			set
			{
				Explotacion previousValue = this._Explotacion.Entity;
				if (((previousValue != value) 
							|| (this._Explotacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Explotacion.Entity = null;
						previousValue.ExpTit.Remove(this);
					}
					this._Explotacion.Entity = value;
					if ((value != null))
					{
						value.ExpTit.Add(this);
						this._IdExplotacion = value.Id;
					}
					else
					{
						this._IdExplotacion = default(int);
					}
					this.SendPropertyChanged("Explotacion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Extendida")]
	public partial class Extendida : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdLactacion;
		
		private System.Nullable<decimal> _Proteina;
		
		private System.Nullable<decimal> _Extracto;
		
		private System.Nullable<decimal> _Leche;
		
		private System.Nullable<decimal> _Lactosa;
		
		private System.Nullable<decimal> _Grasa;
		
		private System.Nullable<decimal> _ProteinaNorm;
		
		private System.Nullable<decimal> _ExtractoNorm;
		
		private System.Nullable<decimal> _LecheNorm;
		
		private System.Nullable<decimal> _LactosaNorm;
		
		private System.Nullable<decimal> _GrasaNorm;
		
		private System.Nullable<decimal> _ProteinaExt;
		
		private System.Nullable<decimal> _ExtractoExt;
		
		private System.Nullable<decimal> _LecheExt;
		
		private System.Nullable<decimal> _LactosaExt;
		
		private System.Nullable<decimal> _GrasaExt;
		
		private EntityRef<Lactacion> _Lactacion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdLactacionChanging(int value);
    partial void OnIdLactacionChanged();
    partial void OnProteinaChanging(System.Nullable<decimal> value);
    partial void OnProteinaChanged();
    partial void OnExtractoChanging(System.Nullable<decimal> value);
    partial void OnExtractoChanged();
    partial void OnLecheChanging(System.Nullable<decimal> value);
    partial void OnLecheChanged();
    partial void OnLactosaChanging(System.Nullable<decimal> value);
    partial void OnLactosaChanged();
    partial void OnGrasaChanging(System.Nullable<decimal> value);
    partial void OnGrasaChanged();
    partial void OnProteinaNormChanging(System.Nullable<decimal> value);
    partial void OnProteinaNormChanged();
    partial void OnExtractoNormChanging(System.Nullable<decimal> value);
    partial void OnExtractoNormChanged();
    partial void OnLecheNormChanging(System.Nullable<decimal> value);
    partial void OnLecheNormChanged();
    partial void OnLactosaNormChanging(System.Nullable<decimal> value);
    partial void OnLactosaNormChanged();
    partial void OnGrasaNormChanging(System.Nullable<decimal> value);
    partial void OnGrasaNormChanged();
    partial void OnProteinaExtChanging(System.Nullable<decimal> value);
    partial void OnProteinaExtChanged();
    partial void OnExtractoExtChanging(System.Nullable<decimal> value);
    partial void OnExtractoExtChanged();
    partial void OnLecheExtChanging(System.Nullable<decimal> value);
    partial void OnLecheExtChanged();
    partial void OnLactosaExtChanging(System.Nullable<decimal> value);
    partial void OnLactosaExtChanged();
    partial void OnGrasaExtChanging(System.Nullable<decimal> value);
    partial void OnGrasaExtChanged();
    #endregion
		
		public Extendida()
		{
			this._Lactacion = default(EntityRef<Lactacion>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdLactacion", DbType="Int NOT NULL")]
		public int IdLactacion
		{
			get
			{
				return this._IdLactacion;
			}
			set
			{
				if ((this._IdLactacion != value))
				{
					if (this._Lactacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdLactacionChanging(value);
					this.SendPropertyChanging();
					this._IdLactacion = value;
					this.SendPropertyChanged("IdLactacion");
					this.OnIdLactacionChanged();
				}
			}
		}
		
		[Column(Storage="_Proteina", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> Proteina
		{
			get
			{
				return this._Proteina;
			}
			set
			{
				if ((this._Proteina != value))
				{
					this.OnProteinaChanging(value);
					this.SendPropertyChanging();
					this._Proteina = value;
					this.SendPropertyChanged("Proteina");
					this.OnProteinaChanged();
				}
			}
		}
		
		[Column(Storage="_Extracto", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> Extracto
		{
			get
			{
				return this._Extracto;
			}
			set
			{
				if ((this._Extracto != value))
				{
					this.OnExtractoChanging(value);
					this.SendPropertyChanging();
					this._Extracto = value;
					this.SendPropertyChanged("Extracto");
					this.OnExtractoChanged();
				}
			}
		}
		
		[Column(Storage="_Leche", DbType="Decimal(7,2)")]
		public System.Nullable<decimal> Leche
		{
			get
			{
				return this._Leche;
			}
			set
			{
				if ((this._Leche != value))
				{
					this.OnLecheChanging(value);
					this.SendPropertyChanging();
					this._Leche = value;
					this.SendPropertyChanged("Leche");
					this.OnLecheChanged();
				}
			}
		}
		
		[Column(Storage="_Lactosa", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> Lactosa
		{
			get
			{
				return this._Lactosa;
			}
			set
			{
				if ((this._Lactosa != value))
				{
					this.OnLactosaChanging(value);
					this.SendPropertyChanging();
					this._Lactosa = value;
					this.SendPropertyChanged("Lactosa");
					this.OnLactosaChanged();
				}
			}
		}
		
		[Column(Storage="_Grasa", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> Grasa
		{
			get
			{
				return this._Grasa;
			}
			set
			{
				if ((this._Grasa != value))
				{
					this.OnGrasaChanging(value);
					this.SendPropertyChanging();
					this._Grasa = value;
					this.SendPropertyChanged("Grasa");
					this.OnGrasaChanged();
				}
			}
		}
		
		[Column(Storage="_ProteinaNorm", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> ProteinaNorm
		{
			get
			{
				return this._ProteinaNorm;
			}
			set
			{
				if ((this._ProteinaNorm != value))
				{
					this.OnProteinaNormChanging(value);
					this.SendPropertyChanging();
					this._ProteinaNorm = value;
					this.SendPropertyChanged("ProteinaNorm");
					this.OnProteinaNormChanged();
				}
			}
		}
		
		[Column(Storage="_ExtractoNorm", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> ExtractoNorm
		{
			get
			{
				return this._ExtractoNorm;
			}
			set
			{
				if ((this._ExtractoNorm != value))
				{
					this.OnExtractoNormChanging(value);
					this.SendPropertyChanging();
					this._ExtractoNorm = value;
					this.SendPropertyChanged("ExtractoNorm");
					this.OnExtractoNormChanged();
				}
			}
		}
		
		[Column(Storage="_LecheNorm", DbType="Decimal(7,2)")]
		public System.Nullable<decimal> LecheNorm
		{
			get
			{
				return this._LecheNorm;
			}
			set
			{
				if ((this._LecheNorm != value))
				{
					this.OnLecheNormChanging(value);
					this.SendPropertyChanging();
					this._LecheNorm = value;
					this.SendPropertyChanged("LecheNorm");
					this.OnLecheNormChanged();
				}
			}
		}
		
		[Column(Storage="_LactosaNorm", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> LactosaNorm
		{
			get
			{
				return this._LactosaNorm;
			}
			set
			{
				if ((this._LactosaNorm != value))
				{
					this.OnLactosaNormChanging(value);
					this.SendPropertyChanging();
					this._LactosaNorm = value;
					this.SendPropertyChanged("LactosaNorm");
					this.OnLactosaNormChanged();
				}
			}
		}
		
		[Column(Storage="_GrasaNorm", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> GrasaNorm
		{
			get
			{
				return this._GrasaNorm;
			}
			set
			{
				if ((this._GrasaNorm != value))
				{
					this.OnGrasaNormChanging(value);
					this.SendPropertyChanging();
					this._GrasaNorm = value;
					this.SendPropertyChanged("GrasaNorm");
					this.OnGrasaNormChanged();
				}
			}
		}
		
		[Column(Storage="_ProteinaExt", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> ProteinaExt
		{
			get
			{
				return this._ProteinaExt;
			}
			set
			{
				if ((this._ProteinaExt != value))
				{
					this.OnProteinaExtChanging(value);
					this.SendPropertyChanging();
					this._ProteinaExt = value;
					this.SendPropertyChanged("ProteinaExt");
					this.OnProteinaExtChanged();
				}
			}
		}
		
		[Column(Storage="_ExtractoExt", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> ExtractoExt
		{
			get
			{
				return this._ExtractoExt;
			}
			set
			{
				if ((this._ExtractoExt != value))
				{
					this.OnExtractoExtChanging(value);
					this.SendPropertyChanging();
					this._ExtractoExt = value;
					this.SendPropertyChanged("ExtractoExt");
					this.OnExtractoExtChanged();
				}
			}
		}
		
		[Column(Storage="_LecheExt", DbType="Decimal(7,2)")]
		public System.Nullable<decimal> LecheExt
		{
			get
			{
				return this._LecheExt;
			}
			set
			{
				if ((this._LecheExt != value))
				{
					this.OnLecheExtChanging(value);
					this.SendPropertyChanging();
					this._LecheExt = value;
					this.SendPropertyChanged("LecheExt");
					this.OnLecheExtChanged();
				}
			}
		}
		
		[Column(Storage="_LactosaExt", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> LactosaExt
		{
			get
			{
				return this._LactosaExt;
			}
			set
			{
				if ((this._LactosaExt != value))
				{
					this.OnLactosaExtChanging(value);
					this.SendPropertyChanging();
					this._LactosaExt = value;
					this.SendPropertyChanged("LactosaExt");
					this.OnLactosaExtChanged();
				}
			}
		}
		
		[Column(Storage="_GrasaExt", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> GrasaExt
		{
			get
			{
				return this._GrasaExt;
			}
			set
			{
				if ((this._GrasaExt != value))
				{
					this.OnGrasaExtChanging(value);
					this.SendPropertyChanging();
					this._GrasaExt = value;
					this.SendPropertyChanged("GrasaExt");
					this.OnGrasaExtChanged();
				}
			}
		}
		
		[Association(Name="Lactacion_Extendida", Storage="_Lactacion", ThisKey="IdLactacion", OtherKey="Id", IsForeignKey=true)]
		public Lactacion Lactacion
		{
			get
			{
				return this._Lactacion.Entity;
			}
			set
			{
				Lactacion previousValue = this._Lactacion.Entity;
				if (((previousValue != value) 
							|| (this._Lactacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lactacion.Entity = null;
						previousValue.Extendida.Remove(this);
					}
					this._Lactacion.Entity = value;
					if ((value != null))
					{
						value.Extendida.Add(this);
						this._IdLactacion = value.Id;
					}
					else
					{
						this._IdLactacion = default(int);
					}
					this.SendPropertyChanged("Lactacion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Facilidad")]
	public partial class Facilidad : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private System.Nullable<bool> _Sistema;
		
		private EntitySet<Parto> _Parto;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    partial void OnSistemaChanging(System.Nullable<bool> value);
    partial void OnSistemaChanged();
    #endregion
		
		public Facilidad()
		{
			this._Parto = new EntitySet<Parto>(new Action<Parto>(this.attach_Parto), new Action<Parto>(this.detach_Parto));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Column(Storage="_Sistema", DbType="Bit")]
		public System.Nullable<bool> Sistema
		{
			get
			{
				return this._Sistema;
			}
			set
			{
				if ((this._Sistema != value))
				{
					this.OnSistemaChanging(value);
					this.SendPropertyChanging();
					this._Sistema = value;
					this.SendPropertyChanged("Sistema");
					this.OnSistemaChanged();
				}
			}
		}
		
		[Association(Name="Facilidad_Parto", Storage="_Parto", ThisKey="Id", OtherKey="IdFacilidad")]
		public EntitySet<Parto> Parto
		{
			get
			{
				return this._Parto;
			}
			set
			{
				this._Parto.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Parto(Parto entity)
		{
			this.SendPropertyChanging();
			entity.Facilidad = this;
		}
		
		private void detach_Parto(Parto entity)
		{
			this.SendPropertyChanging();
			entity.Facilidad = null;
		}
	}
	
	[Table(Name="dbo.HistMedicamento")]
	public partial class HistMedicamento : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdEspecie;
		
		private int _IdEnfermedad;
		
		private int _IdMedicamento;
		
		private EntityRef<Enfermedad> _Enfermedad;
		
		private EntityRef<Especie> _Especie;
		
		private EntityRef<Producto> _Producto;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdEspecieChanging(int value);
    partial void OnIdEspecieChanged();
    partial void OnIdEnfermedadChanging(int value);
    partial void OnIdEnfermedadChanged();
    partial void OnIdMedicamentoChanging(int value);
    partial void OnIdMedicamentoChanged();
    #endregion
		
		public HistMedicamento()
		{
			this._Enfermedad = default(EntityRef<Enfermedad>);
			this._Especie = default(EntityRef<Especie>);
			this._Producto = default(EntityRef<Producto>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdEspecie", DbType="Int NOT NULL")]
		public int IdEspecie
		{
			get
			{
				return this._IdEspecie;
			}
			set
			{
				if ((this._IdEspecie != value))
				{
					if (this._Especie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdEspecieChanging(value);
					this.SendPropertyChanging();
					this._IdEspecie = value;
					this.SendPropertyChanged("IdEspecie");
					this.OnIdEspecieChanged();
				}
			}
		}
		
		[Column(Storage="_IdEnfermedad", DbType="Int NOT NULL")]
		public int IdEnfermedad
		{
			get
			{
				return this._IdEnfermedad;
			}
			set
			{
				if ((this._IdEnfermedad != value))
				{
					if (this._Enfermedad.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdEnfermedadChanging(value);
					this.SendPropertyChanging();
					this._IdEnfermedad = value;
					this.SendPropertyChanged("IdEnfermedad");
					this.OnIdEnfermedadChanged();
				}
			}
		}
		
		[Column(Storage="_IdMedicamento", DbType="Int NOT NULL")]
		public int IdMedicamento
		{
			get
			{
				return this._IdMedicamento;
			}
			set
			{
				if ((this._IdMedicamento != value))
				{
					if (this._Producto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdMedicamentoChanging(value);
					this.SendPropertyChanging();
					this._IdMedicamento = value;
					this.SendPropertyChanged("IdMedicamento");
					this.OnIdMedicamentoChanged();
				}
			}
		}
		
		[Association(Name="Enfermedad_HistMedicamento", Storage="_Enfermedad", ThisKey="IdEnfermedad", OtherKey="Id", IsForeignKey=true)]
		public Enfermedad Enfermedad
		{
			get
			{
				return this._Enfermedad.Entity;
			}
			set
			{
				Enfermedad previousValue = this._Enfermedad.Entity;
				if (((previousValue != value) 
							|| (this._Enfermedad.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enfermedad.Entity = null;
						previousValue.Historicos.Remove(this);
					}
					this._Enfermedad.Entity = value;
					if ((value != null))
					{
						value.Historicos.Add(this);
						this._IdEnfermedad = value.Id;
					}
					else
					{
						this._IdEnfermedad = default(int);
					}
					this.SendPropertyChanged("Enfermedad");
				}
			}
		}
		
		[Association(Name="Especie_HistMedicamento", Storage="_Especie", ThisKey="IdEspecie", OtherKey="Id", IsForeignKey=true)]
		public Especie Especie
		{
			get
			{
				return this._Especie.Entity;
			}
			set
			{
				Especie previousValue = this._Especie.Entity;
				if (((previousValue != value) 
							|| (this._Especie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Especie.Entity = null;
						previousValue.Historicos.Remove(this);
					}
					this._Especie.Entity = value;
					if ((value != null))
					{
						value.Historicos.Add(this);
						this._IdEspecie = value.Id;
					}
					else
					{
						this._IdEspecie = default(int);
					}
					this.SendPropertyChanged("Especie");
				}
			}
		}
		
		[Association(Name="Producto_HistMedicamento", Storage="_Producto", ThisKey="IdMedicamento", OtherKey="Id", IsForeignKey=true)]
		internal Producto Producto
		{
			get
			{
				return this._Producto.Entity;
			}
			set
			{
				Producto previousValue = this._Producto.Entity;
				if (((previousValue != value) 
							|| (this._Producto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Producto.Entity = null;
						previousValue.Historicos.Remove(this);
					}
					this._Producto.Entity = value;
					if ((value != null))
					{
						value.Historicos.Add(this);
						this._IdMedicamento = value.Id;
					}
					else
					{
						this._IdMedicamento = default(int);
					}
					this.SendPropertyChanged("Producto");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.InsPar")]
	public partial class InsPar : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdInseminacion;
		
		private int _IdParto;
		
		private EntityRef<Inseminacion> _Inseminacion;
		
		private EntityRef<Parto> _Parto;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdInseminacionChanging(int value);
    partial void OnIdInseminacionChanged();
    partial void OnIdPartoChanging(int value);
    partial void OnIdPartoChanged();
    #endregion
		
		public InsPar()
		{
			this._Inseminacion = default(EntityRef<Inseminacion>);
			this._Parto = default(EntityRef<Parto>);
			OnCreated();
		}
		
		[Column(Storage="_IdInseminacion", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdInseminacion
		{
			get
			{
				return this._IdInseminacion;
			}
			set
			{
				if ((this._IdInseminacion != value))
				{
					if (this._Inseminacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdInseminacionChanging(value);
					this.SendPropertyChanging();
					this._IdInseminacion = value;
					this.SendPropertyChanged("IdInseminacion");
					this.OnIdInseminacionChanged();
				}
			}
		}
		
		[Column(Storage="_IdParto", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdParto
		{
			get
			{
				return this._IdParto;
			}
			set
			{
				if ((this._IdParto != value))
				{
					if (this._Parto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPartoChanging(value);
					this.SendPropertyChanging();
					this._IdParto = value;
					this.SendPropertyChanged("IdParto");
					this.OnIdPartoChanged();
				}
			}
		}
		
		[Association(Name="Inseminacion_InsPar", Storage="_Inseminacion", ThisKey="IdInseminacion", OtherKey="Id", IsForeignKey=true)]
		public Inseminacion Inseminacion
		{
			get
			{
				return this._Inseminacion.Entity;
			}
			set
			{
				Inseminacion previousValue = this._Inseminacion.Entity;
				if (((previousValue != value) 
							|| (this._Inseminacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inseminacion.Entity = null;
						previousValue.InsPar.Remove(this);
					}
					this._Inseminacion.Entity = value;
					if ((value != null))
					{
						value.InsPar.Add(this);
						this._IdInseminacion = value.Id;
					}
					else
					{
						this._IdInseminacion = default(int);
					}
					this.SendPropertyChanged("Inseminacion");
				}
			}
		}
		
		[Association(Name="Parto_InsPar", Storage="_Parto", ThisKey="IdParto", OtherKey="Id", IsForeignKey=true)]
		public Parto Parto
		{
			get
			{
				return this._Parto.Entity;
			}
			set
			{
				Parto previousValue = this._Parto.Entity;
				if (((previousValue != value) 
							|| (this._Parto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parto.Entity = null;
						previousValue.InsPar.Remove(this);
					}
					this._Parto.Entity = value;
					if ((value != null))
					{
						value.InsPar.Add(this);
						this._IdParto = value.Id;
					}
					else
					{
						this._IdParto = default(int);
					}
					this.SendPropertyChanged("Parto");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Laboratorio")]
	public partial class Laboratorio : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nombre;
		
		private string _Direccion;
		
		private string _Telefono;
		
		private EntitySet<MuestraControl> _MuestraControls;
		
		private EntitySet<Analisis> _Analisis;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnDireccionChanging(string value);
    partial void OnDireccionChanged();
    partial void OnTelefonoChanging(string value);
    partial void OnTelefonoChanged();
    #endregion
		
		public Laboratorio()
		{
			this._MuestraControls = new EntitySet<MuestraControl>(new Action<MuestraControl>(this.attach_MuestraControls), new Action<MuestraControl>(this.detach_MuestraControls));
			this._Analisis = new EntitySet<Analisis>(new Action<Analisis>(this.attach_Analisis), new Action<Analisis>(this.detach_Analisis));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Column(Storage="_Direccion", DbType="VarChar(100)")]
		public string Direccion
		{
			get
			{
				return this._Direccion;
			}
			set
			{
				if ((this._Direccion != value))
				{
					this.OnDireccionChanging(value);
					this.SendPropertyChanging();
					this._Direccion = value;
					this.SendPropertyChanged("Direccion");
					this.OnDireccionChanged();
				}
			}
		}
		
		[Column(Storage="_Telefono", DbType="VarChar(9)")]
		public string Telefono
		{
			get
			{
				return this._Telefono;
			}
			set
			{
				if ((this._Telefono != value))
				{
					this.OnTelefonoChanging(value);
					this.SendPropertyChanging();
					this._Telefono = value;
					this.SendPropertyChanged("Telefono");
					this.OnTelefonoChanged();
				}
			}
		}
		
		[Association(Name="Laboratorio_MuestraControl", Storage="_MuestraControls", ThisKey="Id", OtherKey="IdLaboratorio")]
		public EntitySet<MuestraControl> Muestras
		{
			get
			{
				return this._MuestraControls;
			}
			set
			{
				this._MuestraControls.Assign(value);
			}
		}
		
		[Association(Name="Laboratorio_Analisis", Storage="_Analisis", ThisKey="Id", OtherKey="IdLaboratorio")]
		public EntitySet<Analisis> Analisis
		{
			get
			{
				return this._Analisis;
			}
			set
			{
				this._Analisis.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MuestraControls(MuestraControl entity)
		{
			this.SendPropertyChanging();
			entity.Laboratorio = this;
		}
		
		private void detach_MuestraControls(MuestraControl entity)
		{
			this.SendPropertyChanging();
			entity.Laboratorio = null;
		}
		
		private void attach_Analisis(Analisis entity)
		{
			this.SendPropertyChanging();
			entity.Laboratorio = this;
		}
		
		private void detach_Analisis(Analisis entity)
		{
			this.SendPropertyChanging();
			entity.Laboratorio = null;
		}
	}
	
	[Table(Name="dbo.LibroGenealogico")]
	public partial class LibroGenealogico : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdAnimal;
		
		private string _Madre;
		
		private string _Padre;
		
		private EntityRef<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdAnimalChanging(int value);
    partial void OnIdAnimalChanged();
    partial void OnMadreChanging(string value);
    partial void OnMadreChanged();
    partial void OnPadreChanging(string value);
    partial void OnPadreChanged();
    #endregion
		
		public LibroGenealogico()
		{
			this._Animal = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdAnimal", DbType="Int NOT NULL")]
		public int IdAnimal
		{
			get
			{
				return this._IdAnimal;
			}
			set
			{
				if ((this._IdAnimal != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAnimalChanging(value);
					this.SendPropertyChanging();
					this._IdAnimal = value;
					this.SendPropertyChanged("IdAnimal");
					this.OnIdAnimalChanged();
				}
			}
		}
		
		[Column(Storage="_Madre", DbType="VarChar(100)")]
		public string Madre
		{
			get
			{
				return this._Madre;
			}
			set
			{
				if ((this._Madre != value))
				{
					this.OnMadreChanging(value);
					this.SendPropertyChanging();
					this._Madre = value;
					this.SendPropertyChanged("Madre");
					this.OnMadreChanged();
				}
			}
		}
		
		[Column(Storage="_Padre", DbType="VarChar(100)")]
		public string Padre
		{
			get
			{
				return this._Padre;
			}
			set
			{
				if ((this._Padre != value))
				{
					this.OnPadreChanging(value);
					this.SendPropertyChanging();
					this._Padre = value;
					this.SendPropertyChanged("Padre");
					this.OnPadreChanged();
				}
			}
		}
		
		[Association(Name="Animal_LibroGenealogico", Storage="_Animal", ThisKey="IdAnimal", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.LibroGenealogico.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.LibroGenealogico.Add(this);
						this._IdAnimal = value.Id;
					}
					else
					{
						this._IdAnimal = default(int);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Modulo")]
	public partial class Modulo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _IdPrincipal;
		
		private string _Descripcion;
		
		private EntitySet<ExpMod> _ExpMod;
		
		private EntitySet<Modulo> _Modulos;
		
		private EntitySet<Menu> _Menu;
		
		private EntitySet<Proceso> _Proceso;
		
		private EntityRef<Modulo> _Principal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdPrincipalChanging(System.Nullable<int> value);
    partial void OnIdPrincipalChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public Modulo()
		{
			this._ExpMod = new EntitySet<ExpMod>(new Action<ExpMod>(this.attach_ExpMod), new Action<ExpMod>(this.detach_ExpMod));
			this._Modulos = new EntitySet<Modulo>(new Action<Modulo>(this.attach_Modulos), new Action<Modulo>(this.detach_Modulos));
			this._Menu = new EntitySet<Menu>(new Action<Menu>(this.attach_Menu), new Action<Menu>(this.detach_Menu));
			this._Proceso = new EntitySet<Proceso>(new Action<Proceso>(this.attach_Proceso), new Action<Proceso>(this.detach_Proceso));
			this._Principal = default(EntityRef<Modulo>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdPrincipal", DbType="Int")]
		public System.Nullable<int> IdPrincipal
		{
			get
			{
				return this._IdPrincipal;
			}
			set
			{
				if ((this._IdPrincipal != value))
				{
					if (this._Principal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPrincipalChanging(value);
					this.SendPropertyChanging();
					this._IdPrincipal = value;
					this.SendPropertyChanged("IdPrincipal");
					this.OnIdPrincipalChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="Modulo_ExpMod", Storage="_ExpMod", ThisKey="Id", OtherKey="IdModulo")]
		public EntitySet<ExpMod> ExpMod
		{
			get
			{
				return this._ExpMod;
			}
			set
			{
				this._ExpMod.Assign(value);
			}
		}
		
		[Association(Name="Modulo_Modulo", Storage="_Modulos", ThisKey="Id", OtherKey="IdPrincipal")]
		public EntitySet<Modulo> Modulos
		{
			get
			{
				return this._Modulos;
			}
			set
			{
				this._Modulos.Assign(value);
			}
		}
		
		[Association(Name="Modulo_Menu", Storage="_Menu", ThisKey="Id", OtherKey="IdModulo")]
		public EntitySet<Menu> Menu
		{
			get
			{
				return this._Menu;
			}
			set
			{
				this._Menu.Assign(value);
			}
		}
		
		[Association(Name="Modulo_Proceso", Storage="_Proceso", ThisKey="Id", OtherKey="IdModulo")]
		public EntitySet<Proceso> Proceso
		{
			get
			{
				return this._Proceso;
			}
			set
			{
				this._Proceso.Assign(value);
			}
		}
		
		[Association(Name="Modulo_Modulo", Storage="_Principal", ThisKey="IdPrincipal", OtherKey="Id", IsForeignKey=true)]
		public Modulo Principal
		{
			get
			{
				return this._Principal.Entity;
			}
			set
			{
				Modulo previousValue = this._Principal.Entity;
				if (((previousValue != value) 
							|| (this._Principal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Principal.Entity = null;
						previousValue.Modulos.Remove(this);
					}
					this._Principal.Entity = value;
					if ((value != null))
					{
						value.Modulos.Add(this);
						this._IdPrincipal = value.Id;
					}
					else
					{
						this._IdPrincipal = default(Nullable<int>);
					}
					this.SendPropertyChanged("Principal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExpMod(ExpMod entity)
		{
			this.SendPropertyChanging();
			entity.Modulo = this;
		}
		
		private void detach_ExpMod(ExpMod entity)
		{
			this.SendPropertyChanging();
			entity.Modulo = null;
		}
		
		private void attach_Modulos(Modulo entity)
		{
			this.SendPropertyChanging();
			entity.Principal = this;
		}
		
		private void detach_Modulos(Modulo entity)
		{
			this.SendPropertyChanging();
			entity.Principal = null;
		}
		
		private void attach_Menu(Menu entity)
		{
			this.SendPropertyChanging();
			entity.Modulo = this;
		}
		
		private void detach_Menu(Menu entity)
		{
			this.SendPropertyChanging();
			entity.Modulo = null;
		}
		
		private void attach_Proceso(Proceso entity)
		{
			this.SendPropertyChanging();
			entity.Modulo = this;
		}
		
		private void detach_Proceso(Proceso entity)
		{
			this.SendPropertyChanging();
			entity.Modulo = null;
		}
	}
	
	[Table(Name="dbo.Momento")]
	public partial class Momento : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private EntitySet<Peso> _Pesos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public Momento()
		{
			this._Pesos = new EntitySet<Peso>(new Action<Peso>(this.attach_Pesos), new Action<Peso>(this.detach_Pesos));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="Momento_Peso", Storage="_Pesos", ThisKey="Id", OtherKey="IdMomento")]
		public EntitySet<Peso> Pesos
		{
			get
			{
				return this._Pesos;
			}
			set
			{
				this._Pesos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Pesos(Peso entity)
		{
			this.SendPropertyChanging();
			entity.Momento = this;
		}
		
		private void detach_Pesos(Peso entity)
		{
			this.SendPropertyChanging();
			entity.Momento = null;
		}
	}
	
	[Table(Name="dbo.Motivo")]
	public partial class Motivo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private EntitySet<Secado> _Secados;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public Motivo()
		{
			this._Secados = new EntitySet<Secado>(new Action<Secado>(this.attach_Secados), new Action<Secado>(this.detach_Secados));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="Motivo_Secado", Storage="_Secados", ThisKey="Id", OtherKey="IdMotivo")]
		public EntitySet<Secado> Secados
		{
			get
			{
				return this._Secados;
			}
			set
			{
				this._Secados.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Secados(Secado entity)
		{
			this.SendPropertyChanging();
			entity.Motivo = this;
		}
		
		private void detach_Secados(Secado entity)
		{
			this.SendPropertyChanging();
			entity.Motivo = null;
		}
	}
	
	[Table(Name="dbo.MuestraControl")]
	public partial class MuestraControl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdControl;
		
		private int _IdLaboratorio;
		
		private System.DateTime _Fecha;
		
		private System.Nullable<decimal> _RctoCelular;
		
		private System.Nullable<decimal> _Grasa;
		
		private System.Nullable<decimal> _Urea;
		
		private System.Nullable<decimal> _Proteina;
		
		private System.Nullable<decimal> _Lactosa;
		
		private System.Nullable<decimal> _ExtractoSeco;
		
		private System.Nullable<decimal> _ExtractoSecoMagro;
		
		private System.Nullable<decimal> _ExtractoQuesero;
		
		private System.Nullable<decimal> _LinealPto;
		
		private System.Nullable<decimal> _Germenes;
		
		private System.Nullable<decimal> _PuntoCrioscopico;
		
		private System.Nullable<bool> _Ionhibidores;
		
		private EntityRef<Laboratorio> _Laboratorio;
		
		private EntityRef<ControlLeche> _ControlLeche;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdControlChanging(int value);
    partial void OnIdControlChanged();
    partial void OnIdLaboratorioChanging(int value);
    partial void OnIdLaboratorioChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    partial void OnRctoCelularChanging(System.Nullable<decimal> value);
    partial void OnRctoCelularChanged();
    partial void OnGrasaChanging(System.Nullable<decimal> value);
    partial void OnGrasaChanged();
    partial void OnUreaChanging(System.Nullable<decimal> value);
    partial void OnUreaChanged();
    partial void OnProteinaChanging(System.Nullable<decimal> value);
    partial void OnProteinaChanged();
    partial void OnLactosaChanging(System.Nullable<decimal> value);
    partial void OnLactosaChanged();
    partial void OnExtractoSecoChanging(System.Nullable<decimal> value);
    partial void OnExtractoSecoChanged();
    partial void OnExtractoSecoMagroChanging(System.Nullable<decimal> value);
    partial void OnExtractoSecoMagroChanged();
    partial void OnExtractoQueseroChanging(System.Nullable<decimal> value);
    partial void OnExtractoQueseroChanged();
    partial void OnLinealPtoChanging(System.Nullable<decimal> value);
    partial void OnLinealPtoChanged();
    partial void OnGermenesChanging(System.Nullable<decimal> value);
    partial void OnGermenesChanged();
    partial void OnPuntoCrioscopicoChanging(System.Nullable<decimal> value);
    partial void OnPuntoCrioscopicoChanged();
    partial void OnIonhibidoresChanging(System.Nullable<bool> value);
    partial void OnIonhibidoresChanged();
    #endregion
		
		public MuestraControl()
		{
			this._Laboratorio = default(EntityRef<Laboratorio>);
			this._ControlLeche = default(EntityRef<ControlLeche>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdControl", DbType="Int NOT NULL")]
		public int IdControl
		{
			get
			{
				return this._IdControl;
			}
			set
			{
				if ((this._IdControl != value))
				{
					if (this._ControlLeche.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdControlChanging(value);
					this.SendPropertyChanging();
					this._IdControl = value;
					this.SendPropertyChanged("IdControl");
					this.OnIdControlChanged();
				}
			}
		}
		
		[Column(Storage="_IdLaboratorio", DbType="Int NOT NULL")]
		public int IdLaboratorio
		{
			get
			{
				return this._IdLaboratorio;
			}
			set
			{
				if ((this._IdLaboratorio != value))
				{
					if (this._Laboratorio.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdLaboratorioChanging(value);
					this.SendPropertyChanging();
					this._IdLaboratorio = value;
					this.SendPropertyChanged("IdLaboratorio");
					this.OnIdLaboratorioChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Column(Storage="_RctoCelular", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> RctoCelular
		{
			get
			{
				return this._RctoCelular;
			}
			set
			{
				if ((this._RctoCelular != value))
				{
					this.OnRctoCelularChanging(value);
					this.SendPropertyChanging();
					this._RctoCelular = value;
					this.SendPropertyChanged("RctoCelular");
					this.OnRctoCelularChanged();
				}
			}
		}
		
		[Column(Storage="_Grasa", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> Grasa
		{
			get
			{
				return this._Grasa;
			}
			set
			{
				if ((this._Grasa != value))
				{
					this.OnGrasaChanging(value);
					this.SendPropertyChanging();
					this._Grasa = value;
					this.SendPropertyChanged("Grasa");
					this.OnGrasaChanged();
				}
			}
		}
		
		[Column(Storage="_Urea", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> Urea
		{
			get
			{
				return this._Urea;
			}
			set
			{
				if ((this._Urea != value))
				{
					this.OnUreaChanging(value);
					this.SendPropertyChanging();
					this._Urea = value;
					this.SendPropertyChanged("Urea");
					this.OnUreaChanged();
				}
			}
		}
		
		[Column(Storage="_Proteina", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> Proteina
		{
			get
			{
				return this._Proteina;
			}
			set
			{
				if ((this._Proteina != value))
				{
					this.OnProteinaChanging(value);
					this.SendPropertyChanging();
					this._Proteina = value;
					this.SendPropertyChanged("Proteina");
					this.OnProteinaChanged();
				}
			}
		}
		
		[Column(Storage="_Lactosa", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> Lactosa
		{
			get
			{
				return this._Lactosa;
			}
			set
			{
				if ((this._Lactosa != value))
				{
					this.OnLactosaChanging(value);
					this.SendPropertyChanging();
					this._Lactosa = value;
					this.SendPropertyChanged("Lactosa");
					this.OnLactosaChanged();
				}
			}
		}
		
		[Column(Storage="_ExtractoSeco", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> ExtractoSeco
		{
			get
			{
				return this._ExtractoSeco;
			}
			set
			{
				if ((this._ExtractoSeco != value))
				{
					this.OnExtractoSecoChanging(value);
					this.SendPropertyChanging();
					this._ExtractoSeco = value;
					this.SendPropertyChanged("ExtractoSeco");
					this.OnExtractoSecoChanged();
				}
			}
		}
		
		[Column(Storage="_ExtractoSecoMagro", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> ExtractoSecoMagro
		{
			get
			{
				return this._ExtractoSecoMagro;
			}
			set
			{
				if ((this._ExtractoSecoMagro != value))
				{
					this.OnExtractoSecoMagroChanging(value);
					this.SendPropertyChanging();
					this._ExtractoSecoMagro = value;
					this.SendPropertyChanged("ExtractoSecoMagro");
					this.OnExtractoSecoMagroChanged();
				}
			}
		}
		
		[Column(Storage="_ExtractoQuesero", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> ExtractoQuesero
		{
			get
			{
				return this._ExtractoQuesero;
			}
			set
			{
				if ((this._ExtractoQuesero != value))
				{
					this.OnExtractoQueseroChanging(value);
					this.SendPropertyChanging();
					this._ExtractoQuesero = value;
					this.SendPropertyChanged("ExtractoQuesero");
					this.OnExtractoQueseroChanged();
				}
			}
		}
		
		[Column(Storage="_LinealPto", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> LinealPto
		{
			get
			{
				return this._LinealPto;
			}
			set
			{
				if ((this._LinealPto != value))
				{
					this.OnLinealPtoChanging(value);
					this.SendPropertyChanging();
					this._LinealPto = value;
					this.SendPropertyChanged("LinealPto");
					this.OnLinealPtoChanged();
				}
			}
		}
		
		[Column(Storage="_Germenes", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> Germenes
		{
			get
			{
				return this._Germenes;
			}
			set
			{
				if ((this._Germenes != value))
				{
					this.OnGermenesChanging(value);
					this.SendPropertyChanging();
					this._Germenes = value;
					this.SendPropertyChanged("Germenes");
					this.OnGermenesChanged();
				}
			}
		}
		
		[Column(Storage="_PuntoCrioscopico", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> PuntoCrioscopico
		{
			get
			{
				return this._PuntoCrioscopico;
			}
			set
			{
				if ((this._PuntoCrioscopico != value))
				{
					this.OnPuntoCrioscopicoChanging(value);
					this.SendPropertyChanging();
					this._PuntoCrioscopico = value;
					this.SendPropertyChanged("PuntoCrioscopico");
					this.OnPuntoCrioscopicoChanged();
				}
			}
		}
		
		[Column(Storage="_Ionhibidores", DbType="Bit")]
		public System.Nullable<bool> Ionhibidores
		{
			get
			{
				return this._Ionhibidores;
			}
			set
			{
				if ((this._Ionhibidores != value))
				{
					this.OnIonhibidoresChanging(value);
					this.SendPropertyChanging();
					this._Ionhibidores = value;
					this.SendPropertyChanged("Ionhibidores");
					this.OnIonhibidoresChanged();
				}
			}
		}
		
		[Association(Name="Laboratorio_MuestraControl", Storage="_Laboratorio", ThisKey="IdLaboratorio", OtherKey="Id", IsForeignKey=true)]
		public Laboratorio Laboratorio
		{
			get
			{
				return this._Laboratorio.Entity;
			}
			set
			{
				Laboratorio previousValue = this._Laboratorio.Entity;
				if (((previousValue != value) 
							|| (this._Laboratorio.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Laboratorio.Entity = null;
						previousValue.Muestras.Remove(this);
					}
					this._Laboratorio.Entity = value;
					if ((value != null))
					{
						value.Muestras.Add(this);
						this._IdLaboratorio = value.Id;
					}
					else
					{
						this._IdLaboratorio = default(int);
					}
					this.SendPropertyChanged("Laboratorio");
				}
			}
		}
		
		[Association(Name="ControlLeche_MuestraControl", Storage="_ControlLeche", ThisKey="IdControl", OtherKey="Id", IsForeignKey=true)]
		public ControlLeche ControlLeche
		{
			get
			{
				return this._ControlLeche.Entity;
			}
			set
			{
				ControlLeche previousValue = this._ControlLeche.Entity;
				if (((previousValue != value) 
							|| (this._ControlLeche.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ControlLeche.Entity = null;
						previousValue.MuestraControl.Remove(this);
					}
					this._ControlLeche.Entity = value;
					if ((value != null))
					{
						value.MuestraControl.Add(this);
						this._IdControl = value.Id;
					}
					else
					{
						this._IdControl = default(int);
					}
					this.SendPropertyChanged("ControlLeche");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Municipio")]
	public partial class Municipio : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdProvincia;
		
		private string _Codigo;
		
		private string _Descripcion;
		
		private EntitySet<Explotacion> _Explotacion;
		
		private EntityRef<Provincia> _Provincia;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdProvinciaChanging(int value);
    partial void OnIdProvinciaChanged();
    partial void OnCodigoChanging(string value);
    partial void OnCodigoChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public Municipio()
		{
			this._Explotacion = new EntitySet<Explotacion>(new Action<Explotacion>(this.attach_Explotacion), new Action<Explotacion>(this.detach_Explotacion));
			this._Provincia = default(EntityRef<Provincia>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdProvincia", DbType="Int NOT NULL")]
		public int IdProvincia
		{
			get
			{
				return this._IdProvincia;
			}
			set
			{
				if ((this._IdProvincia != value))
				{
					if (this._Provincia.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdProvinciaChanging(value);
					this.SendPropertyChanging();
					this._IdProvincia = value;
					this.SendPropertyChanged("IdProvincia");
					this.OnIdProvinciaChanged();
				}
			}
		}
		
		[Column(Storage="_Codigo", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string Codigo
		{
			get
			{
				return this._Codigo;
			}
			set
			{
				if ((this._Codigo != value))
				{
					this.OnCodigoChanging(value);
					this.SendPropertyChanging();
					this._Codigo = value;
					this.SendPropertyChanged("Codigo");
					this.OnCodigoChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="Municipio_Explotacion", Storage="_Explotacion", ThisKey="Id", OtherKey="IdMunicipio")]
		public EntitySet<Explotacion> Explotacion
		{
			get
			{
				return this._Explotacion;
			}
			set
			{
				this._Explotacion.Assign(value);
			}
		}
		
		[Association(Name="Provincia_Municipio", Storage="_Provincia", ThisKey="IdProvincia", OtherKey="Id", IsForeignKey=true)]
		public Provincia Provincia
		{
			get
			{
				return this._Provincia.Entity;
			}
			set
			{
				Provincia previousValue = this._Provincia.Entity;
				if (((previousValue != value) 
							|| (this._Provincia.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Provincia.Entity = null;
						previousValue.Municipios.Remove(this);
					}
					this._Provincia.Entity = value;
					if ((value != null))
					{
						value.Municipios.Add(this);
						this._IdProvincia = value.Id;
					}
					else
					{
						this._IdProvincia = default(int);
					}
					this.SendPropertyChanged("Provincia");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Explotacion(Explotacion entity)
		{
			this.SendPropertyChanging();
			entity.Municipio = this;
		}
		
		private void detach_Explotacion(Explotacion entity)
		{
			this.SendPropertyChanging();
			entity.Municipio = null;
		}
	}
	
	[Table(Name="dbo.Naturaleza")]
	public partial class Naturaleza : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private System.Nullable<bool> _Sistema;
		
		private EntitySet<Gasto> _Gasto;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    partial void OnSistemaChanging(System.Nullable<bool> value);
    partial void OnSistemaChanged();
    #endregion
		
		public Naturaleza()
		{
			this._Gasto = new EntitySet<Gasto>(new Action<Gasto>(this.attach_Gasto), new Action<Gasto>(this.detach_Gasto));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Column(Storage="_Sistema", DbType="Bit")]
		public System.Nullable<bool> Sistema
		{
			get
			{
				return this._Sistema;
			}
			set
			{
				if ((this._Sistema != value))
				{
					this.OnSistemaChanging(value);
					this.SendPropertyChanging();
					this._Sistema = value;
					this.SendPropertyChanged("Sistema");
					this.OnSistemaChanged();
				}
			}
		}
		
		[Association(Name="Naturaleza_Gasto", Storage="_Gasto", ThisKey="Id", OtherKey="IdNaturaleza")]
		public EntitySet<Gasto> Gasto
		{
			get
			{
				return this._Gasto;
			}
			set
			{
				this._Gasto.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Gasto(Gasto entity)
		{
			this.SendPropertyChanging();
			entity.Naturaleza = this;
		}
		
		private void detach_Gasto(Gasto entity)
		{
			this.SendPropertyChanging();
			entity.Naturaleza = null;
		}
	}
	
	[Table(Name="dbo.Parcela")]
	public partial class Parcela : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdTitular;
		
		private string _Nombre;
		
		private string _Poligono;
		
		private decimal _Extension;
		
		private EntitySet<Abonado> _Abonados;
		
		private EntitySet<Recolecta> _Recolectas;
		
		private EntitySet<Siembra> _Siembras;
		
		private EntitySet<TratParcela> _TratParcelas;
		
		private EntitySet<Gasto> _Gasto;
		
		private EntitySet<Pastoreo> _Pastoreo;
		
		private EntityRef<Titular> _Titular;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdTitularChanging(int value);
    partial void OnIdTitularChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnPoligonoChanging(string value);
    partial void OnPoligonoChanged();
    partial void OnExtensionChanging(decimal value);
    partial void OnExtensionChanged();
    #endregion
		
		public Parcela()
		{
			this._Abonados = new EntitySet<Abonado>(new Action<Abonado>(this.attach_Abonados), new Action<Abonado>(this.detach_Abonados));
			this._Recolectas = new EntitySet<Recolecta>(new Action<Recolecta>(this.attach_Recolectas), new Action<Recolecta>(this.detach_Recolectas));
			this._Siembras = new EntitySet<Siembra>(new Action<Siembra>(this.attach_Siembras), new Action<Siembra>(this.detach_Siembras));
			this._TratParcelas = new EntitySet<TratParcela>(new Action<TratParcela>(this.attach_TratParcelas), new Action<TratParcela>(this.detach_TratParcelas));
			this._Gasto = new EntitySet<Gasto>(new Action<Gasto>(this.attach_Gasto), new Action<Gasto>(this.detach_Gasto));
			this._Pastoreo = new EntitySet<Pastoreo>(new Action<Pastoreo>(this.attach_Pastoreo), new Action<Pastoreo>(this.detach_Pastoreo));
			this._Titular = default(EntityRef<Titular>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdTitular", DbType="Int NOT NULL")]
		public int IdTitular
		{
			get
			{
				return this._IdTitular;
			}
			set
			{
				if ((this._IdTitular != value))
				{
					if (this._Titular.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTitularChanging(value);
					this.SendPropertyChanging();
					this._IdTitular = value;
					this.SendPropertyChanged("IdTitular");
					this.OnIdTitularChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Column(Storage="_Poligono", DbType="VarChar(255)")]
		public string Poligono
		{
			get
			{
				return this._Poligono;
			}
			set
			{
				if ((this._Poligono != value))
				{
					this.OnPoligonoChanging(value);
					this.SendPropertyChanging();
					this._Poligono = value;
					this.SendPropertyChanged("Poligono");
					this.OnPoligonoChanged();
				}
			}
		}
		
		[Column(Storage="_Extension", DbType="Decimal(6,2) NOT NULL")]
		public decimal Extension
		{
			get
			{
				return this._Extension;
			}
			set
			{
				if ((this._Extension != value))
				{
					this.OnExtensionChanging(value);
					this.SendPropertyChanging();
					this._Extension = value;
					this.SendPropertyChanged("Extension");
					this.OnExtensionChanged();
				}
			}
		}
		
		[Association(Name="Parcela_Abonado", Storage="_Abonados", ThisKey="Id", OtherKey="IdParcela")]
		public EntitySet<Abonado> Abonados
		{
			get
			{
				return this._Abonados;
			}
			set
			{
				this._Abonados.Assign(value);
			}
		}
		
		[Association(Name="Parcela_Recolecta", Storage="_Recolectas", ThisKey="Id", OtherKey="IdParcela")]
		public EntitySet<Recolecta> Recolectas
		{
			get
			{
				return this._Recolectas;
			}
			set
			{
				this._Recolectas.Assign(value);
			}
		}
		
		[Association(Name="Parcela_Siembra", Storage="_Siembras", ThisKey="Id", OtherKey="IdParcela")]
		public EntitySet<Siembra> Siembras
		{
			get
			{
				return this._Siembras;
			}
			set
			{
				this._Siembras.Assign(value);
			}
		}
		
		[Association(Name="Parcela_TratParcela", Storage="_TratParcelas", ThisKey="Id", OtherKey="IdParcela")]
		public EntitySet<TratParcela> Tratamientos
		{
			get
			{
				return this._TratParcelas;
			}
			set
			{
				this._TratParcelas.Assign(value);
			}
		}
		
		[Association(Name="Parcela_Gasto", Storage="_Gasto", ThisKey="Id", OtherKey="IdParcela")]
		public EntitySet<Gasto> Gasto
		{
			get
			{
				return this._Gasto;
			}
			set
			{
				this._Gasto.Assign(value);
			}
		}
		
		[Association(Name="Parcela_Pastoreo", Storage="_Pastoreo", ThisKey="Id", OtherKey="IdParcela")]
		public EntitySet<Pastoreo> Pastoreo
		{
			get
			{
				return this._Pastoreo;
			}
			set
			{
				this._Pastoreo.Assign(value);
			}
		}
		
		[Association(Name="Titular_Parcela", Storage="_Titular", ThisKey="IdTitular", OtherKey="Id", IsForeignKey=true)]
		public Titular Titular
		{
			get
			{
				return this._Titular.Entity;
			}
			set
			{
				Titular previousValue = this._Titular.Entity;
				if (((previousValue != value) 
							|| (this._Titular.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Titular.Entity = null;
						previousValue.Parcela.Remove(this);
					}
					this._Titular.Entity = value;
					if ((value != null))
					{
						value.Parcela.Add(this);
						this._IdTitular = value.Id;
					}
					else
					{
						this._IdTitular = default(int);
					}
					this.SendPropertyChanged("Titular");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Abonados(Abonado entity)
		{
			this.SendPropertyChanging();
			entity.Parcela = this;
		}
		
		private void detach_Abonados(Abonado entity)
		{
			this.SendPropertyChanging();
			entity.Parcela = null;
		}
		
		private void attach_Recolectas(Recolecta entity)
		{
			this.SendPropertyChanging();
			entity.Parcela = this;
		}
		
		private void detach_Recolectas(Recolecta entity)
		{
			this.SendPropertyChanging();
			entity.Parcela = null;
		}
		
		private void attach_Siembras(Siembra entity)
		{
			this.SendPropertyChanging();
			entity.Parcela = this;
		}
		
		private void detach_Siembras(Siembra entity)
		{
			this.SendPropertyChanging();
			entity.Parcela = null;
		}
		
		private void attach_TratParcelas(TratParcela entity)
		{
			this.SendPropertyChanging();
			entity.Parcela = this;
		}
		
		private void detach_TratParcelas(TratParcela entity)
		{
			this.SendPropertyChanging();
			entity.Parcela = null;
		}
		
		private void attach_Gasto(Gasto entity)
		{
			this.SendPropertyChanging();
			entity.Parcela = this;
		}
		
		private void detach_Gasto(Gasto entity)
		{
			this.SendPropertyChanging();
			entity.Parcela = null;
		}
		
		private void attach_Pastoreo(Pastoreo entity)
		{
			this.SendPropertyChanging();
			entity.Parcela = this;
		}
		
		private void detach_Pastoreo(Pastoreo entity)
		{
			this.SendPropertyChanging();
			entity.Parcela = null;
		}
	}
	
	[Table(Name="dbo.Peso")]
	public partial class Peso : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _IdMomento;
		
		private int _IdAnimal;
		
		private decimal _Peso1;
		
		private System.DateTime _Fecha;
		
		private bool _Modificable;
		
		private EntityRef<Momento> _Momento;
		
		private EntityRef<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdMomentoChanging(System.Nullable<int> value);
    partial void OnIdMomentoChanged();
    partial void OnIdAnimalChanging(int value);
    partial void OnIdAnimalChanged();
    partial void OnPeso1Changing(decimal value);
    partial void OnPeso1Changed();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    partial void OnModificableChanging(bool value);
    partial void OnModificableChanged();
    #endregion
		
		public Peso()
		{
			this._Momento = default(EntityRef<Momento>);
			this._Animal = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdMomento", DbType="Int")]
		public System.Nullable<int> IdMomento
		{
			get
			{
				return this._IdMomento;
			}
			set
			{
				if ((this._IdMomento != value))
				{
					if (this._Momento.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdMomentoChanging(value);
					this.SendPropertyChanging();
					this._IdMomento = value;
					this.SendPropertyChanged("IdMomento");
					this.OnIdMomentoChanged();
				}
			}
		}
		
		[Column(Storage="_IdAnimal", DbType="Int NOT NULL")]
		public int IdAnimal
		{
			get
			{
				return this._IdAnimal;
			}
			set
			{
				if ((this._IdAnimal != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAnimalChanging(value);
					this.SendPropertyChanging();
					this._IdAnimal = value;
					this.SendPropertyChanged("IdAnimal");
					this.OnIdAnimalChanged();
				}
			}
		}
		
		[Column(Name="Peso", Storage="_Peso1", DbType="Decimal(6,2) NOT NULL")]
		public decimal Peso1
		{
			get
			{
				return this._Peso1;
			}
			set
			{
				if ((this._Peso1 != value))
				{
					this.OnPeso1Changing(value);
					this.SendPropertyChanging();
					this._Peso1 = value;
					this.SendPropertyChanged("Peso1");
					this.OnPeso1Changed();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Column(Storage="_Modificable", DbType="Bit NOT NULL")]
		public bool Modificable
		{
			get
			{
				return this._Modificable;
			}
			set
			{
				if ((this._Modificable != value))
				{
					this.OnModificableChanging(value);
					this.SendPropertyChanging();
					this._Modificable = value;
					this.SendPropertyChanged("Modificable");
					this.OnModificableChanged();
				}
			}
		}
		
		[Association(Name="Momento_Peso", Storage="_Momento", ThisKey="IdMomento", OtherKey="Id", IsForeignKey=true)]
		public Momento Momento
		{
			get
			{
				return this._Momento.Entity;
			}
			set
			{
				Momento previousValue = this._Momento.Entity;
				if (((previousValue != value) 
							|| (this._Momento.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Momento.Entity = null;
						previousValue.Pesos.Remove(this);
					}
					this._Momento.Entity = value;
					if ((value != null))
					{
						value.Pesos.Add(this);
						this._IdMomento = value.Id;
					}
					else
					{
						this._IdMomento = default(Nullable<int>);
					}
					this.SendPropertyChanged("Momento");
				}
			}
		}
		
		[Association(Name="Animal_Peso", Storage="_Animal", ThisKey="IdAnimal", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.Peso.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.Peso.Add(this);
						this._IdAnimal = value.Id;
					}
					else
					{
						this._IdAnimal = default(int);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Plaga")]
	public partial class Plaga : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private EntitySet<TratParcela> _TratParcelas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public Plaga()
		{
			this._TratParcelas = new EntitySet<TratParcela>(new Action<TratParcela>(this.attach_TratParcelas), new Action<TratParcela>(this.detach_TratParcelas));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="Plaga_TratParcela", Storage="_TratParcelas", ThisKey="Id", OtherKey="IdPlaga")]
		public EntitySet<TratParcela> Tratamientos
		{
			get
			{
				return this._TratParcelas;
			}
			set
			{
				this._TratParcelas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TratParcelas(TratParcela entity)
		{
			this.SendPropertyChanging();
			entity.Plaga = this;
		}
		
		private void detach_TratParcelas(TratParcela entity)
		{
			this.SendPropertyChanging();
			entity.Plaga = null;
		}
	}
	
	[Table(Name="dbo.Producto")]
	public partial class Producto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdTipo;
		
		private System.Nullable<int> _IdFamilia;
		
		private string _Descripcion;
		
		private System.Nullable<decimal> _SupresionLeche;
		
		private System.Nullable<decimal> _SupresionCarne;
		
		private System.Nullable<bool> _Sistema;
		
		private EntitySet<Abonado> _Abonados;
		
		private EntitySet<Composicion> _Composicions;
		
		private EntitySet<HistMedicamento> _HistMedicamentos;
		
		private EntitySet<Recolecta> _Recolectas;
		
		private EntitySet<Siembra> _Siembras;
		
		private EntitySet<TratParcela> _TratParcelas;
		
		private EntitySet<ProHig> _ProHig;
		
		private EntitySet<ProPro> _ProPro;
		
		private EntitySet<Transformacion> _Transformaciones;
		
		private EntitySet<Receta> _Receta;
		
		private EntitySet<Venta> _Venta;
		
		private EntitySet<Compra> _Compra;
		
		private EntitySet<Movimiento> _Movimiento;
		
		private EntitySet<Stock> _Stock;
		
		private EntityRef<TipoProducto> _TipoProducto;
		
		private EntityRef<Familia> _Familia;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdTipoChanging(int value);
    partial void OnIdTipoChanged();
    partial void OnIdFamiliaChanging(System.Nullable<int> value);
    partial void OnIdFamiliaChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    partial void OnSupresionLecheChanging(System.Nullable<decimal> value);
    partial void OnSupresionLecheChanged();
    partial void OnSupresionCarneChanging(System.Nullable<decimal> value);
    partial void OnSupresionCarneChanged();
    partial void OnSistemaChanging(System.Nullable<bool> value);
    partial void OnSistemaChanged();
    #endregion
		
		public Producto()
		{
			this._Abonados = new EntitySet<Abonado>(new Action<Abonado>(this.attach_Abonados), new Action<Abonado>(this.detach_Abonados));
			this._Composicions = new EntitySet<Composicion>(new Action<Composicion>(this.attach_Composicions), new Action<Composicion>(this.detach_Composicions));
			this._HistMedicamentos = new EntitySet<HistMedicamento>(new Action<HistMedicamento>(this.attach_HistMedicamentos), new Action<HistMedicamento>(this.detach_HistMedicamentos));
			this._Recolectas = new EntitySet<Recolecta>(new Action<Recolecta>(this.attach_Recolectas), new Action<Recolecta>(this.detach_Recolectas));
			this._Siembras = new EntitySet<Siembra>(new Action<Siembra>(this.attach_Siembras), new Action<Siembra>(this.detach_Siembras));
			this._TratParcelas = new EntitySet<TratParcela>(new Action<TratParcela>(this.attach_TratParcelas), new Action<TratParcela>(this.detach_TratParcelas));
			this._ProHig = new EntitySet<ProHig>(new Action<ProHig>(this.attach_ProHig), new Action<ProHig>(this.detach_ProHig));
			this._ProPro = new EntitySet<ProPro>(new Action<ProPro>(this.attach_ProPro), new Action<ProPro>(this.detach_ProPro));
			this._Transformaciones = new EntitySet<Transformacion>(new Action<Transformacion>(this.attach_Transformaciones), new Action<Transformacion>(this.detach_Transformaciones));
			this._Receta = new EntitySet<Receta>(new Action<Receta>(this.attach_Receta), new Action<Receta>(this.detach_Receta));
			this._Venta = new EntitySet<Venta>(new Action<Venta>(this.attach_Venta), new Action<Venta>(this.detach_Venta));
			this._Compra = new EntitySet<Compra>(new Action<Compra>(this.attach_Compra), new Action<Compra>(this.detach_Compra));
			this._Movimiento = new EntitySet<Movimiento>(new Action<Movimiento>(this.attach_Movimiento), new Action<Movimiento>(this.detach_Movimiento));
			this._Stock = new EntitySet<Stock>(new Action<Stock>(this.attach_Stock), new Action<Stock>(this.detach_Stock));
			this._TipoProducto = default(EntityRef<TipoProducto>);
			this._Familia = default(EntityRef<Familia>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdTipo", DbType="Int NOT NULL")]
		public int IdTipo
		{
			get
			{
				return this._IdTipo;
			}
			set
			{
				if ((this._IdTipo != value))
				{
					if (this._TipoProducto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTipoChanging(value);
					this.SendPropertyChanging();
					this._IdTipo = value;
					this.SendPropertyChanged("IdTipo");
					this.OnIdTipoChanged();
				}
			}
		}
		
		[Column(Storage="_IdFamilia", DbType="Int")]
		public System.Nullable<int> IdFamilia
		{
			get
			{
				return this._IdFamilia;
			}
			set
			{
				if ((this._IdFamilia != value))
				{
					if (this._Familia.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdFamiliaChanging(value);
					this.SendPropertyChanging();
					this._IdFamilia = value;
					this.SendPropertyChanged("IdFamilia");
					this.OnIdFamiliaChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Column(Storage="_SupresionLeche", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> SupresionLeche
		{
			get
			{
				return this._SupresionLeche;
			}
			set
			{
				if ((this._SupresionLeche != value))
				{
					this.OnSupresionLecheChanging(value);
					this.SendPropertyChanging();
					this._SupresionLeche = value;
					this.SendPropertyChanged("SupresionLeche");
					this.OnSupresionLecheChanged();
				}
			}
		}
		
		[Column(Storage="_SupresionCarne", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> SupresionCarne
		{
			get
			{
				return this._SupresionCarne;
			}
			set
			{
				if ((this._SupresionCarne != value))
				{
					this.OnSupresionCarneChanging(value);
					this.SendPropertyChanging();
					this._SupresionCarne = value;
					this.SendPropertyChanged("SupresionCarne");
					this.OnSupresionCarneChanged();
				}
			}
		}
		
		[Column(Storage="_Sistema", DbType="Bit")]
		public System.Nullable<bool> Sistema
		{
			get
			{
				return this._Sistema;
			}
			set
			{
				if ((this._Sistema != value))
				{
					this.OnSistemaChanging(value);
					this.SendPropertyChanging();
					this._Sistema = value;
					this.SendPropertyChanged("Sistema");
					this.OnSistemaChanged();
				}
			}
		}
		
		[Association(Name="Producto_Abonado", Storage="_Abonados", ThisKey="Id", OtherKey="IdAbono")]
		public EntitySet<Abonado> Abonados
		{
			get
			{
				return this._Abonados;
			}
			set
			{
				this._Abonados.Assign(value);
			}
		}
		
		[Association(Name="Producto_Composicion", Storage="_Composicions", ThisKey="Id", OtherKey="IdAlimento")]
		public EntitySet<Composicion> Composiciones
		{
			get
			{
				return this._Composicions;
			}
			set
			{
				this._Composicions.Assign(value);
			}
		}
		
		[Association(Name="Producto_HistMedicamento", Storage="_HistMedicamentos", ThisKey="Id", OtherKey="IdMedicamento")]
		public EntitySet<HistMedicamento> Historicos
		{
			get
			{
				return this._HistMedicamentos;
			}
			set
			{
				this._HistMedicamentos.Assign(value);
			}
		}
		
		[Association(Name="Producto_Recolecta", Storage="_Recolectas", ThisKey="Id", OtherKey="IdForraje")]
		public EntitySet<Recolecta> Recolectas
		{
			get
			{
				return this._Recolectas;
			}
			set
			{
				this._Recolectas.Assign(value);
			}
		}
		
		[Association(Name="Producto_Siembra", Storage="_Siembras", ThisKey="Id", OtherKey="IdSemilla")]
		public EntitySet<Siembra> Siembras
		{
			get
			{
				return this._Siembras;
			}
			set
			{
				this._Siembras.Assign(value);
			}
		}
		
		[Association(Name="Producto_TratParcela", Storage="_TratParcelas", ThisKey="Id", OtherKey="IdProducto")]
		public EntitySet<TratParcela> TratsParcelas
		{
			get
			{
				return this._TratParcelas;
			}
			set
			{
				this._TratParcelas.Assign(value);
			}
		}
		
		[Association(Name="Producto_ProHig", Storage="_ProHig", ThisKey="Id", OtherKey="IdProducto")]
		public EntitySet<ProHig> ProHig
		{
			get
			{
				return this._ProHig;
			}
			set
			{
				this._ProHig.Assign(value);
			}
		}
		
		[Association(Name="Producto_ProPro", Storage="_ProPro", ThisKey="Id", OtherKey="IdProducto")]
		public EntitySet<ProPro> ProPro
		{
			get
			{
				return this._ProPro;
			}
			set
			{
				this._ProPro.Assign(value);
			}
		}
		
		[Association(Name="Producto_Transformacion", Storage="_Transformaciones", ThisKey="Id", OtherKey="IdProducto")]
		public EntitySet<Transformacion> Transformaciones
		{
			get
			{
				return this._Transformaciones;
			}
			set
			{
				this._Transformaciones.Assign(value);
			}
		}
		
		[Association(Name="Producto_Receta", Storage="_Receta", ThisKey="Id", OtherKey="IdMedicamento")]
		public EntitySet<Receta> Receta
		{
			get
			{
				return this._Receta;
			}
			set
			{
				this._Receta.Assign(value);
			}
		}
		
		[Association(Name="Producto_Venta", Storage="_Venta", ThisKey="Id", OtherKey="IdProducto")]
		public EntitySet<Venta> Venta
		{
			get
			{
				return this._Venta;
			}
			set
			{
				this._Venta.Assign(value);
			}
		}
		
		[Association(Name="Producto_Compra", Storage="_Compra", ThisKey="Id", OtherKey="IdProducto")]
		public EntitySet<Compra> Compra
		{
			get
			{
				return this._Compra;
			}
			set
			{
				this._Compra.Assign(value);
			}
		}
		
		[Association(Name="Producto_Movimiento", Storage="_Movimiento", ThisKey="Id", OtherKey="IdProducto")]
		public EntitySet<Movimiento> Movimiento
		{
			get
			{
				return this._Movimiento;
			}
			set
			{
				this._Movimiento.Assign(value);
			}
		}
		
		[Association(Name="Producto_Stock", Storage="_Stock", ThisKey="Id", OtherKey="IdProducto")]
		public EntitySet<Stock> Stock
		{
			get
			{
				return this._Stock;
			}
			set
			{
				this._Stock.Assign(value);
			}
		}
		
		[Association(Name="TipoProducto_Producto", Storage="_TipoProducto", ThisKey="IdTipo", OtherKey="Id", IsForeignKey=true)]
		public TipoProducto Tipo
		{
			get
			{
				return this._TipoProducto.Entity;
			}
			set
			{
				TipoProducto previousValue = this._TipoProducto.Entity;
				if (((previousValue != value) 
							|| (this._TipoProducto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoProducto.Entity = null;
						previousValue.Productos.Remove(this);
					}
					this._TipoProducto.Entity = value;
					if ((value != null))
					{
						value.Productos.Add(this);
						this._IdTipo = value.Id;
					}
					else
					{
						this._IdTipo = default(int);
					}
					this.SendPropertyChanged("Tipo");
				}
			}
		}
		
		[Association(Name="Familia_Producto", Storage="_Familia", ThisKey="IdFamilia", OtherKey="Id", IsForeignKey=true)]
		public Familia Familia
		{
			get
			{
				return this._Familia.Entity;
			}
			set
			{
				Familia previousValue = this._Familia.Entity;
				if (((previousValue != value) 
							|| (this._Familia.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Familia.Entity = null;
						previousValue.Producto.Remove(this);
					}
					this._Familia.Entity = value;
					if ((value != null))
					{
						value.Producto.Add(this);
						this._IdFamilia = value.Id;
					}
					else
					{
						this._IdFamilia = default(Nullable<int>);
					}
					this.SendPropertyChanged("Familia");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Abonados(Abonado entity)
		{
			this.SendPropertyChanging();
			entity.Abono = this;
		}
		
		private void detach_Abonados(Abonado entity)
		{
			this.SendPropertyChanging();
			entity.Abono = null;
		}
		
		private void attach_Composicions(Composicion entity)
		{
			this.SendPropertyChanging();
			entity.Alimento = this;
		}
		
		private void detach_Composicions(Composicion entity)
		{
			this.SendPropertyChanging();
			entity.Alimento = null;
		}
		
		private void attach_HistMedicamentos(HistMedicamento entity)
		{
			this.SendPropertyChanging();
			entity.Producto = this;
		}
		
		private void detach_HistMedicamentos(HistMedicamento entity)
		{
			this.SendPropertyChanging();
			entity.Producto = null;
		}
		
		private void attach_Recolectas(Recolecta entity)
		{
			this.SendPropertyChanging();
			entity.Forraje = this;
		}
		
		private void detach_Recolectas(Recolecta entity)
		{
			this.SendPropertyChanging();
			entity.Forraje = null;
		}
		
		private void attach_Siembras(Siembra entity)
		{
			this.SendPropertyChanging();
			entity.Semilla = this;
		}
		
		private void detach_Siembras(Siembra entity)
		{
			this.SendPropertyChanging();
			entity.Semilla = null;
		}
		
		private void attach_TratParcelas(TratParcela entity)
		{
			this.SendPropertyChanging();
			entity.Producto = this;
		}
		
		private void detach_TratParcelas(TratParcela entity)
		{
			this.SendPropertyChanging();
			entity.Producto = null;
		}
		
		private void attach_ProHig(ProHig entity)
		{
			this.SendPropertyChanging();
			entity.Producto = this;
		}
		
		private void detach_ProHig(ProHig entity)
		{
			this.SendPropertyChanging();
			entity.Producto = null;
		}
		
		private void attach_ProPro(ProPro entity)
		{
			this.SendPropertyChanging();
			entity.Producto = this;
		}
		
		private void detach_ProPro(ProPro entity)
		{
			this.SendPropertyChanging();
			entity.Producto = null;
		}
		
		private void attach_Transformaciones(Transformacion entity)
		{
			this.SendPropertyChanging();
			entity.Producto = this;
		}
		
		private void detach_Transformaciones(Transformacion entity)
		{
			this.SendPropertyChanging();
			entity.Producto = null;
		}
		
		private void attach_Receta(Receta entity)
		{
			this.SendPropertyChanging();
			entity.Producto = this;
		}
		
		private void detach_Receta(Receta entity)
		{
			this.SendPropertyChanging();
			entity.Producto = null;
		}
		
		private void attach_Venta(Venta entity)
		{
			this.SendPropertyChanging();
			entity.Producto = this;
		}
		
		private void detach_Venta(Venta entity)
		{
			this.SendPropertyChanging();
			entity.Producto = null;
		}
		
		private void attach_Compra(Compra entity)
		{
			this.SendPropertyChanging();
			entity.Producto = this;
		}
		
		private void detach_Compra(Compra entity)
		{
			this.SendPropertyChanging();
			entity.Producto = null;
		}
		
		private void attach_Movimiento(Movimiento entity)
		{
			this.SendPropertyChanging();
			entity.Producto = this;
		}
		
		private void detach_Movimiento(Movimiento entity)
		{
			this.SendPropertyChanging();
			entity.Producto = null;
		}
		
		private void attach_Stock(Stock entity)
		{
			this.SendPropertyChanging();
			entity.Producto = this;
		}
		
		private void detach_Stock(Stock entity)
		{
			this.SendPropertyChanging();
			entity.Producto = null;
		}
	}
	
	[Table(Name="dbo.Provincia")]
	public partial class Provincia : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Codigo;
		
		private string _Descripcion;
		
		private EntitySet<Municipio> _Municipios;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCodigoChanging(string value);
    partial void OnCodigoChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public Provincia()
		{
			this._Municipios = new EntitySet<Municipio>(new Action<Municipio>(this.attach_Municipios), new Action<Municipio>(this.detach_Municipios));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Codigo", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string Codigo
		{
			get
			{
				return this._Codigo;
			}
			set
			{
				if ((this._Codigo != value))
				{
					this.OnCodigoChanging(value);
					this.SendPropertyChanging();
					this._Codigo = value;
					this.SendPropertyChanged("Codigo");
					this.OnCodigoChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="Provincia_Municipio", Storage="_Municipios", ThisKey="Id", OtherKey="IdProvincia")]
		public EntitySet<Municipio> Municipios
		{
			get
			{
				return this._Municipios;
			}
			set
			{
				this._Municipios.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Municipios(Municipio entity)
		{
			this.SendPropertyChanging();
			entity.Provincia = this;
		}
		
		private void detach_Municipios(Municipio entity)
		{
			this.SendPropertyChanging();
			entity.Provincia = null;
		}
	}
	
	[Table(Name="dbo.Racion")]
	public partial class Racion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private decimal _Peso;
		
		private EntitySet<Composicion> _Composicions;
		
		private EntitySet<Asignacion> _Asignacion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    partial void OnPesoChanging(decimal value);
    partial void OnPesoChanged();
    #endregion
		
		public Racion()
		{
			this._Composicions = new EntitySet<Composicion>(new Action<Composicion>(this.attach_Composicions), new Action<Composicion>(this.detach_Composicions));
			this._Asignacion = new EntitySet<Asignacion>(new Action<Asignacion>(this.attach_Asignacion), new Action<Asignacion>(this.detach_Asignacion));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Column(Storage="_Peso", DbType="Decimal(7,2) NOT NULL")]
		public decimal Peso
		{
			get
			{
				return this._Peso;
			}
			set
			{
				if ((this._Peso != value))
				{
					this.OnPesoChanging(value);
					this.SendPropertyChanging();
					this._Peso = value;
					this.SendPropertyChanged("Peso");
					this.OnPesoChanged();
				}
			}
		}
		
		[Association(Name="Racion_Composicion", Storage="_Composicions", ThisKey="Id", OtherKey="IdRacion")]
		public EntitySet<Composicion> Composiciones
		{
			get
			{
				return this._Composicions;
			}
			set
			{
				this._Composicions.Assign(value);
			}
		}
		
		[Association(Name="Racion_Asignacion", Storage="_Asignacion", ThisKey="Id", OtherKey="IdRacion")]
		public EntitySet<Asignacion> Asignacion
		{
			get
			{
				return this._Asignacion;
			}
			set
			{
				this._Asignacion.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Composicions(Composicion entity)
		{
			this.SendPropertyChanging();
			entity.Racion = this;
		}
		
		private void detach_Composicions(Composicion entity)
		{
			this.SendPropertyChanging();
			entity.Racion = null;
		}
		
		private void attach_Asignacion(Asignacion entity)
		{
			this.SendPropertyChanging();
			entity.Racion = this;
		}
		
		private void detach_Asignacion(Asignacion entity)
		{
			this.SendPropertyChanging();
			entity.Racion = null;
		}
	}
	
	[Table(Name="dbo.Raza")]
	public partial class Raza : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdEspecie;
		
		private string _Descripcion;
		
		private EntitySet<Animal> _Animal;
		
		private EntityRef<Especie> _Especie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdEspecieChanging(int value);
    partial void OnIdEspecieChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public Raza()
		{
			this._Animal = new EntitySet<Animal>(new Action<Animal>(this.attach_Animal), new Action<Animal>(this.detach_Animal));
			this._Especie = default(EntityRef<Especie>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdEspecie", DbType="Int NOT NULL")]
		public int IdEspecie
		{
			get
			{
				return this._IdEspecie;
			}
			set
			{
				if ((this._IdEspecie != value))
				{
					if (this._Especie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdEspecieChanging(value);
					this.SendPropertyChanging();
					this._IdEspecie = value;
					this.SendPropertyChanged("IdEspecie");
					this.OnIdEspecieChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="Raza_Animal", Storage="_Animal", ThisKey="Id", OtherKey="IdRaza")]
		public EntitySet<Animal> Animal
		{
			get
			{
				return this._Animal;
			}
			set
			{
				this._Animal.Assign(value);
			}
		}
		
		[Association(Name="Especie_Raza", Storage="_Especie", ThisKey="IdEspecie", OtherKey="Id", IsForeignKey=true)]
		public Especie Especie
		{
			get
			{
				return this._Especie.Entity;
			}
			set
			{
				Especie previousValue = this._Especie.Entity;
				if (((previousValue != value) 
							|| (this._Especie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Especie.Entity = null;
						previousValue.Razas.Remove(this);
					}
					this._Especie.Entity = value;
					if ((value != null))
					{
						value.Razas.Add(this);
						this._IdEspecie = value.Id;
					}
					else
					{
						this._IdEspecie = default(int);
					}
					this.SendPropertyChanged("Especie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animal(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Raza = this;
		}
		
		private void detach_Animal(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Raza = null;
		}
	}
	
	[Table(Name="dbo.Recolecta")]
	public partial class Recolecta : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdForraje;
		
		private int _IdParcela;
		
		private decimal _Cantidad;
		
		private System.DateTime _Fecha;
		
		private EntityRef<Parcela> _Parcela;
		
		private EntityRef<Producto> _Producto;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdForrajeChanging(int value);
    partial void OnIdForrajeChanged();
    partial void OnIdParcelaChanging(int value);
    partial void OnIdParcelaChanged();
    partial void OnCantidadChanging(decimal value);
    partial void OnCantidadChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    #endregion
		
		public Recolecta()
		{
			this._Parcela = default(EntityRef<Parcela>);
			this._Producto = default(EntityRef<Producto>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdForraje", DbType="Int NOT NULL")]
		public int IdForraje
		{
			get
			{
				return this._IdForraje;
			}
			set
			{
				if ((this._IdForraje != value))
				{
					if (this._Producto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdForrajeChanging(value);
					this.SendPropertyChanging();
					this._IdForraje = value;
					this.SendPropertyChanged("IdForraje");
					this.OnIdForrajeChanged();
				}
			}
		}
		
		[Column(Storage="_IdParcela", DbType="Int NOT NULL")]
		public int IdParcela
		{
			get
			{
				return this._IdParcela;
			}
			set
			{
				if ((this._IdParcela != value))
				{
					if (this._Parcela.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdParcelaChanging(value);
					this.SendPropertyChanging();
					this._IdParcela = value;
					this.SendPropertyChanged("IdParcela");
					this.OnIdParcelaChanged();
				}
			}
		}
		
		[Column(Storage="_Cantidad", DbType="Decimal(6,2) NOT NULL")]
		public decimal Cantidad
		{
			get
			{
				return this._Cantidad;
			}
			set
			{
				if ((this._Cantidad != value))
				{
					this.OnCantidadChanging(value);
					this.SendPropertyChanging();
					this._Cantidad = value;
					this.SendPropertyChanged("Cantidad");
					this.OnCantidadChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Association(Name="Parcela_Recolecta", Storage="_Parcela", ThisKey="IdParcela", OtherKey="Id", IsForeignKey=true)]
		public Parcela Parcela
		{
			get
			{
				return this._Parcela.Entity;
			}
			set
			{
				Parcela previousValue = this._Parcela.Entity;
				if (((previousValue != value) 
							|| (this._Parcela.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parcela.Entity = null;
						previousValue.Recolectas.Remove(this);
					}
					this._Parcela.Entity = value;
					if ((value != null))
					{
						value.Recolectas.Add(this);
						this._IdParcela = value.Id;
					}
					else
					{
						this._IdParcela = default(int);
					}
					this.SendPropertyChanged("Parcela");
				}
			}
		}
		
		[Association(Name="Producto_Recolecta", Storage="_Producto", ThisKey="IdForraje", OtherKey="Id", IsForeignKey=true)]
		public Producto Forraje
		{
			get
			{
				return this._Producto.Entity;
			}
			set
			{
				Producto previousValue = this._Producto.Entity;
				if (((previousValue != value) 
							|| (this._Producto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Producto.Entity = null;
						previousValue.Recolectas.Remove(this);
					}
					this._Producto.Entity = value;
					if ((value != null))
					{
						value.Recolectas.Add(this);
						this._IdForraje = value.Id;
					}
					else
					{
						this._IdForraje = default(int);
					}
					this.SendPropertyChanged("Forraje");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.RendimientoCanal")]
	public partial class RendimientoCanal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdAnimal;
		
		private decimal _Rendimiento;
		
		private System.DateTime _Fecha;
		
		private EntityRef<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdAnimalChanging(int value);
    partial void OnIdAnimalChanged();
    partial void OnRendimientoChanging(decimal value);
    partial void OnRendimientoChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    #endregion
		
		public RendimientoCanal()
		{
			this._Animal = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdAnimal", DbType="Int NOT NULL")]
		public int IdAnimal
		{
			get
			{
				return this._IdAnimal;
			}
			set
			{
				if ((this._IdAnimal != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAnimalChanging(value);
					this.SendPropertyChanging();
					this._IdAnimal = value;
					this.SendPropertyChanged("IdAnimal");
					this.OnIdAnimalChanged();
				}
			}
		}
		
		[Column(Storage="_Rendimiento", DbType="Decimal(6,2) NOT NULL")]
		public decimal Rendimiento
		{
			get
			{
				return this._Rendimiento;
			}
			set
			{
				if ((this._Rendimiento != value))
				{
					this.OnRendimientoChanging(value);
					this.SendPropertyChanging();
					this._Rendimiento = value;
					this.SendPropertyChanged("Rendimiento");
					this.OnRendimientoChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Association(Name="Animal_RendimientoCanal", Storage="_Animal", ThisKey="IdAnimal", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.RendimientoCanal.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.RendimientoCanal.Add(this);
						this._IdAnimal = value.Id;
					}
					else
					{
						this._IdAnimal = default(int);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Secado")]
	public partial class Secado : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _IdTipo;
		
		private System.Nullable<int> _IdMotivo;
		
		private int _IdHembra;
		
		private System.DateTime _Fecha;
		
		private bool _Modificable;
		
		private EntityRef<Motivo> _Motivo;
		
		private EntityRef<TipoSecado> _TipoSecado;
		
		private EntityRef<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdTipoChanging(System.Nullable<int> value);
    partial void OnIdTipoChanged();
    partial void OnIdMotivoChanging(System.Nullable<int> value);
    partial void OnIdMotivoChanged();
    partial void OnIdHembraChanging(int value);
    partial void OnIdHembraChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    partial void OnModificableChanging(bool value);
    partial void OnModificableChanged();
    #endregion
		
		public Secado()
		{
			this._Motivo = default(EntityRef<Motivo>);
			this._TipoSecado = default(EntityRef<TipoSecado>);
			this._Animal = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdTipo", DbType="Int")]
		public System.Nullable<int> IdTipo
		{
			get
			{
				return this._IdTipo;
			}
			set
			{
				if ((this._IdTipo != value))
				{
					if (this._TipoSecado.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTipoChanging(value);
					this.SendPropertyChanging();
					this._IdTipo = value;
					this.SendPropertyChanged("IdTipo");
					this.OnIdTipoChanged();
				}
			}
		}
		
		[Column(Storage="_IdMotivo", DbType="Int")]
		public System.Nullable<int> IdMotivo
		{
			get
			{
				return this._IdMotivo;
			}
			set
			{
				if ((this._IdMotivo != value))
				{
					if (this._Motivo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdMotivoChanging(value);
					this.SendPropertyChanging();
					this._IdMotivo = value;
					this.SendPropertyChanged("IdMotivo");
					this.OnIdMotivoChanged();
				}
			}
		}
		
		[Column(Storage="_IdHembra", DbType="Int NOT NULL")]
		public int IdHembra
		{
			get
			{
				return this._IdHembra;
			}
			set
			{
				if ((this._IdHembra != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdHembraChanging(value);
					this.SendPropertyChanging();
					this._IdHembra = value;
					this.SendPropertyChanged("IdHembra");
					this.OnIdHembraChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Column(Storage="_Modificable", DbType="Bit NOT NULL")]
		public bool Modificable
		{
			get
			{
				return this._Modificable;
			}
			set
			{
				if ((this._Modificable != value))
				{
					this.OnModificableChanging(value);
					this.SendPropertyChanging();
					this._Modificable = value;
					this.SendPropertyChanged("Modificable");
					this.OnModificableChanged();
				}
			}
		}
		
		[Association(Name="Motivo_Secado", Storage="_Motivo", ThisKey="IdMotivo", OtherKey="Id", IsForeignKey=true)]
		public Motivo Motivo
		{
			get
			{
				return this._Motivo.Entity;
			}
			set
			{
				Motivo previousValue = this._Motivo.Entity;
				if (((previousValue != value) 
							|| (this._Motivo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Motivo.Entity = null;
						previousValue.Secados.Remove(this);
					}
					this._Motivo.Entity = value;
					if ((value != null))
					{
						value.Secados.Add(this);
						this._IdMotivo = value.Id;
					}
					else
					{
						this._IdMotivo = default(Nullable<int>);
					}
					this.SendPropertyChanged("Motivo");
				}
			}
		}
		
		[Association(Name="TipoSecado_Secado", Storage="_TipoSecado", ThisKey="IdTipo", OtherKey="Id", IsForeignKey=true)]
		public TipoSecado Tipo
		{
			get
			{
				return this._TipoSecado.Entity;
			}
			set
			{
				TipoSecado previousValue = this._TipoSecado.Entity;
				if (((previousValue != value) 
							|| (this._TipoSecado.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoSecado.Entity = null;
						previousValue.Secados.Remove(this);
					}
					this._TipoSecado.Entity = value;
					if ((value != null))
					{
						value.Secados.Add(this);
						this._IdTipo = value.Id;
					}
					else
					{
						this._IdTipo = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tipo");
				}
			}
		}
		
		[Association(Name="Animal_Secado", Storage="_Animal", ThisKey="IdHembra", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.Secado.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.Secado.Add(this);
						this._IdHembra = value.Id;
					}
					else
					{
						this._IdHembra = default(int);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Siembra")]
	public partial class Siembra : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdSemilla;
		
		private int _IdParcela;
		
		private decimal _Cantidad;
		
		private System.DateTime _Fecha;
		
		private EntitySet<Gasto> _Gasto;
		
		private EntityRef<Parcela> _Parcela;
		
		private EntityRef<Producto> _Producto;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdSemillaChanging(int value);
    partial void OnIdSemillaChanged();
    partial void OnIdParcelaChanging(int value);
    partial void OnIdParcelaChanged();
    partial void OnCantidadChanging(decimal value);
    partial void OnCantidadChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    #endregion
		
		public Siembra()
		{
			this._Gasto = new EntitySet<Gasto>(new Action<Gasto>(this.attach_Gasto), new Action<Gasto>(this.detach_Gasto));
			this._Parcela = default(EntityRef<Parcela>);
			this._Producto = default(EntityRef<Producto>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdSemilla", DbType="Int NOT NULL")]
		public int IdSemilla
		{
			get
			{
				return this._IdSemilla;
			}
			set
			{
				if ((this._IdSemilla != value))
				{
					if (this._Producto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdSemillaChanging(value);
					this.SendPropertyChanging();
					this._IdSemilla = value;
					this.SendPropertyChanged("IdSemilla");
					this.OnIdSemillaChanged();
				}
			}
		}
		
		[Column(Storage="_IdParcela", DbType="Int NOT NULL")]
		public int IdParcela
		{
			get
			{
				return this._IdParcela;
			}
			set
			{
				if ((this._IdParcela != value))
				{
					if (this._Parcela.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdParcelaChanging(value);
					this.SendPropertyChanging();
					this._IdParcela = value;
					this.SendPropertyChanged("IdParcela");
					this.OnIdParcelaChanged();
				}
			}
		}
		
		[Column(Storage="_Cantidad", DbType="Decimal(6,2) NOT NULL")]
		public decimal Cantidad
		{
			get
			{
				return this._Cantidad;
			}
			set
			{
				if ((this._Cantidad != value))
				{
					this.OnCantidadChanging(value);
					this.SendPropertyChanging();
					this._Cantidad = value;
					this.SendPropertyChanged("Cantidad");
					this.OnCantidadChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Association(Name="Siembra_Gasto", Storage="_Gasto", ThisKey="Id", OtherKey="IdSiembra")]
		public EntitySet<Gasto> Gasto
		{
			get
			{
				return this._Gasto;
			}
			set
			{
				this._Gasto.Assign(value);
			}
		}
		
		[Association(Name="Parcela_Siembra", Storage="_Parcela", ThisKey="IdParcela", OtherKey="Id", IsForeignKey=true)]
		public Parcela Parcela
		{
			get
			{
				return this._Parcela.Entity;
			}
			set
			{
				Parcela previousValue = this._Parcela.Entity;
				if (((previousValue != value) 
							|| (this._Parcela.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parcela.Entity = null;
						previousValue.Siembras.Remove(this);
					}
					this._Parcela.Entity = value;
					if ((value != null))
					{
						value.Siembras.Add(this);
						this._IdParcela = value.Id;
					}
					else
					{
						this._IdParcela = default(int);
					}
					this.SendPropertyChanged("Parcela");
				}
			}
		}
		
		[Association(Name="Producto_Siembra", Storage="_Producto", ThisKey="IdSemilla", OtherKey="Id", IsForeignKey=true)]
		public Producto Semilla
		{
			get
			{
				return this._Producto.Entity;
			}
			set
			{
				Producto previousValue = this._Producto.Entity;
				if (((previousValue != value) 
							|| (this._Producto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Producto.Entity = null;
						previousValue.Siembras.Remove(this);
					}
					this._Producto.Entity = value;
					if ((value != null))
					{
						value.Siembras.Add(this);
						this._IdSemilla = value.Id;
					}
					else
					{
						this._IdSemilla = default(int);
					}
					this.SendPropertyChanged("Semilla");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Gasto(Gasto entity)
		{
			this.SendPropertyChanging();
			entity.Siembra = this;
		}
		
		private void detach_Gasto(Gasto entity)
		{
			this.SendPropertyChanging();
			entity.Siembra = null;
		}
	}
	
	[Table(Name="dbo.StatusControl")]
	public partial class StatusControl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Codigo;
		
		private string _Descripcion;
		
		private EntitySet<ControlLeche> _ControlLeche;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCodigoChanging(string value);
    partial void OnCodigoChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public StatusControl()
		{
			this._ControlLeche = new EntitySet<ControlLeche>(new Action<ControlLeche>(this.attach_ControlLeche), new Action<ControlLeche>(this.detach_ControlLeche));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Codigo", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string Codigo
		{
			get
			{
				return this._Codigo;
			}
			set
			{
				if ((this._Codigo != value))
				{
					this.OnCodigoChanging(value);
					this.SendPropertyChanging();
					this._Codigo = value;
					this.SendPropertyChanged("Codigo");
					this.OnCodigoChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="StatusControl_ControlLeche", Storage="_ControlLeche", ThisKey="Id", OtherKey="IdControl")]
		public EntitySet<ControlLeche> ControlLeche
		{
			get
			{
				return this._ControlLeche;
			}
			set
			{
				this._ControlLeche.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ControlLeche(ControlLeche entity)
		{
			this.SendPropertyChanging();
			entity.StatusControl = this;
		}
		
		private void detach_ControlLeche(ControlLeche entity)
		{
			this.SendPropertyChanging();
			entity.StatusControl = null;
		}
	}
	
	[Table(Name="dbo.StatusOrdeno")]
	public partial class StatusOrdeno : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private EntitySet<ControlLeche> _ControlLeche;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public StatusOrdeno()
		{
			this._ControlLeche = new EntitySet<ControlLeche>(new Action<ControlLeche>(this.attach_ControlLeche), new Action<ControlLeche>(this.detach_ControlLeche));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="StatusOrdeno_ControlLeche", Storage="_ControlLeche", ThisKey="Id", OtherKey="IdOrdeno")]
		public EntitySet<ControlLeche> ControlLeche
		{
			get
			{
				return this._ControlLeche;
			}
			set
			{
				this._ControlLeche.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ControlLeche(ControlLeche entity)
		{
			this.SendPropertyChanging();
			entity.StatusOrdeno = this;
		}
		
		private void detach_ControlLeche(ControlLeche entity)
		{
			this.SendPropertyChanging();
			entity.StatusOrdeno = null;
		}
	}
	
	[Table(Name="dbo.Talla")]
	public partial class Talla : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private EntitySet<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public Talla()
		{
			this._Animal = new EntitySet<Animal>(new Action<Animal>(this.attach_Animal), new Action<Animal>(this.detach_Animal));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="Talla_Animal", Storage="_Animal", ThisKey="Id", OtherKey="IdTalla")]
		public EntitySet<Animal> Animal
		{
			get
			{
				return this._Animal;
			}
			set
			{
				this._Animal.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animal(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Talla = this;
		}
		
		private void detach_Animal(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Talla = null;
		}
	}
	
	[Table(Name="dbo.Tarea")]
	public partial class Tarea : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdExplotacion;
		
		private string _Descripcion;
		
		private System.DateTime _Fecha;
		
		private EntityRef<Explotacion> _Explotacion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdExplotacionChanging(int value);
    partial void OnIdExplotacionChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    #endregion
		
		public Tarea()
		{
			this._Explotacion = default(EntityRef<Explotacion>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdExplotacion", DbType="Int NOT NULL")]
		public int IdExplotacion
		{
			get
			{
				return this._IdExplotacion;
			}
			set
			{
				if ((this._IdExplotacion != value))
				{
					if (this._Explotacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdExplotacionChanging(value);
					this.SendPropertyChanging();
					this._IdExplotacion = value;
					this.SendPropertyChanged("IdExplotacion");
					this.OnIdExplotacionChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Association(Name="Explotacion_Tarea", Storage="_Explotacion", ThisKey="IdExplotacion", OtherKey="Id", IsForeignKey=true)]
		public Explotacion Explotacion
		{
			get
			{
				return this._Explotacion.Entity;
			}
			set
			{
				Explotacion previousValue = this._Explotacion.Entity;
				if (((previousValue != value) 
							|| (this._Explotacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Explotacion.Entity = null;
						previousValue.Tarea.Remove(this);
					}
					this._Explotacion.Entity = value;
					if ((value != null))
					{
						value.Tarea.Add(this);
						this._IdExplotacion = value.Id;
					}
					else
					{
						this._IdExplotacion = default(int);
					}
					this.SendPropertyChanged("Explotacion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TipificacionCanal")]
	public partial class TipificacionCanal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdAnimal;
		
		private int _IdConformacion;
		
		private int _IdCategoria;
		
		private System.DateTime _Fecha;
		
		private EntityRef<Categoria> _Categoria;
		
		private EntityRef<ConformacionCanal> _ConformacionCanal;
		
		private EntityRef<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdAnimalChanging(int value);
    partial void OnIdAnimalChanged();
    partial void OnIdConformacionChanging(int value);
    partial void OnIdConformacionChanged();
    partial void OnIdCategoriaChanging(int value);
    partial void OnIdCategoriaChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    #endregion
		
		public TipificacionCanal()
		{
			this._Categoria = default(EntityRef<Categoria>);
			this._ConformacionCanal = default(EntityRef<ConformacionCanal>);
			this._Animal = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdAnimal", DbType="Int NOT NULL")]
		public int IdAnimal
		{
			get
			{
				return this._IdAnimal;
			}
			set
			{
				if ((this._IdAnimal != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAnimalChanging(value);
					this.SendPropertyChanging();
					this._IdAnimal = value;
					this.SendPropertyChanged("IdAnimal");
					this.OnIdAnimalChanged();
				}
			}
		}
		
		[Column(Storage="_IdConformacion", DbType="Int NOT NULL")]
		public int IdConformacion
		{
			get
			{
				return this._IdConformacion;
			}
			set
			{
				if ((this._IdConformacion != value))
				{
					if (this._ConformacionCanal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdConformacionChanging(value);
					this.SendPropertyChanging();
					this._IdConformacion = value;
					this.SendPropertyChanged("IdConformacion");
					this.OnIdConformacionChanged();
				}
			}
		}
		
		[Column(Storage="_IdCategoria", DbType="Int NOT NULL")]
		public int IdCategoria
		{
			get
			{
				return this._IdCategoria;
			}
			set
			{
				if ((this._IdCategoria != value))
				{
					if (this._Categoria.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCategoriaChanging(value);
					this.SendPropertyChanging();
					this._IdCategoria = value;
					this.SendPropertyChanged("IdCategoria");
					this.OnIdCategoriaChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Association(Name="Categoria_TipificacionCanal", Storage="_Categoria", ThisKey="IdCategoria", OtherKey="Id", IsForeignKey=true)]
		public Categoria Categoria
		{
			get
			{
				return this._Categoria.Entity;
			}
			set
			{
				Categoria previousValue = this._Categoria.Entity;
				if (((previousValue != value) 
							|| (this._Categoria.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Categoria.Entity = null;
						previousValue.Tipificaciones.Remove(this);
					}
					this._Categoria.Entity = value;
					if ((value != null))
					{
						value.Tipificaciones.Add(this);
						this._IdCategoria = value.Id;
					}
					else
					{
						this._IdCategoria = default(int);
					}
					this.SendPropertyChanged("Categoria");
				}
			}
		}
		
		[Association(Name="ConformacionCanal_TipificacionCanal", Storage="_ConformacionCanal", ThisKey="IdConformacion", OtherKey="Id", IsForeignKey=true)]
		public ConformacionCanal Conformacion
		{
			get
			{
				return this._ConformacionCanal.Entity;
			}
			set
			{
				ConformacionCanal previousValue = this._ConformacionCanal.Entity;
				if (((previousValue != value) 
							|| (this._ConformacionCanal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ConformacionCanal.Entity = null;
						previousValue.Tipificaciones.Remove(this);
					}
					this._ConformacionCanal.Entity = value;
					if ((value != null))
					{
						value.Tipificaciones.Add(this);
						this._IdConformacion = value.Id;
					}
					else
					{
						this._IdConformacion = default(int);
					}
					this.SendPropertyChanged("Conformacion");
				}
			}
		}
		
		[Association(Name="Animal_TipificacionCanal", Storage="_Animal", ThisKey="IdAnimal", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.TipificacionCanal.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.TipificacionCanal.Add(this);
						this._IdAnimal = value.Id;
					}
					else
					{
						this._IdAnimal = default(int);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TipoAborto")]
	public partial class TipoAborto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private System.Nullable<bool> _Sistema;
		
		private EntitySet<Aborto> _Aborto;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    partial void OnSistemaChanging(System.Nullable<bool> value);
    partial void OnSistemaChanged();
    #endregion
		
		public TipoAborto()
		{
			this._Aborto = new EntitySet<Aborto>(new Action<Aborto>(this.attach_Aborto), new Action<Aborto>(this.detach_Aborto));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Column(Storage="_Sistema", DbType="Bit")]
		public System.Nullable<bool> Sistema
		{
			get
			{
				return this._Sistema;
			}
			set
			{
				if ((this._Sistema != value))
				{
					this.OnSistemaChanging(value);
					this.SendPropertyChanging();
					this._Sistema = value;
					this.SendPropertyChanged("Sistema");
					this.OnSistemaChanged();
				}
			}
		}
		
		[Association(Name="TipoAborto_Aborto", Storage="_Aborto", ThisKey="Id", OtherKey="IdTipo")]
		public EntitySet<Aborto> Aborto
		{
			get
			{
				return this._Aborto;
			}
			set
			{
				this._Aborto.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Aborto(Aborto entity)
		{
			this.SendPropertyChanging();
			entity.TipoAborto = this;
		}
		
		private void detach_Aborto(Aborto entity)
		{
			this.SendPropertyChanging();
			entity.TipoAborto = null;
		}
	}
	
	[Table(Name="dbo.TipoBaja")]
	public partial class TipoBaja : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private System.Nullable<bool> _Sistema;
		
		private EntitySet<Baja> _Baja;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    partial void OnSistemaChanging(System.Nullable<bool> value);
    partial void OnSistemaChanged();
    #endregion
		
		public TipoBaja()
		{
			this._Baja = new EntitySet<Baja>(new Action<Baja>(this.attach_Baja), new Action<Baja>(this.detach_Baja));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Column(Storage="_Sistema", DbType="Bit")]
		public System.Nullable<bool> Sistema
		{
			get
			{
				return this._Sistema;
			}
			set
			{
				if ((this._Sistema != value))
				{
					this.OnSistemaChanging(value);
					this.SendPropertyChanging();
					this._Sistema = value;
					this.SendPropertyChanged("Sistema");
					this.OnSistemaChanged();
				}
			}
		}
		
		[Association(Name="TipoBaja_Baja", Storage="_Baja", ThisKey="Id", OtherKey="IdTipo")]
		public EntitySet<Baja> Baja
		{
			get
			{
				return this._Baja;
			}
			set
			{
				this._Baja.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Baja(Baja entity)
		{
			this.SendPropertyChanging();
			entity.TipoBaja = this;
		}
		
		private void detach_Baja(Baja entity)
		{
			this.SendPropertyChanging();
			entity.TipoBaja = null;
		}
	}
	
	[Table(Name="dbo.TipoCompra")]
	public partial class TipoCompra : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private EntitySet<Compra> _Compra;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public TipoCompra()
		{
			this._Compra = new EntitySet<Compra>(new Action<Compra>(this.attach_Compra), new Action<Compra>(this.detach_Compra));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="TipoCompra_Compra", Storage="_Compra", ThisKey="Id", OtherKey="IdClasificacion")]
		public EntitySet<Compra> Compra
		{
			get
			{
				return this._Compra;
			}
			set
			{
				this._Compra.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Compra(Compra entity)
		{
			this.SendPropertyChanging();
			entity.TipoCompra = this;
		}
		
		private void detach_Compra(Compra entity)
		{
			this.SendPropertyChanging();
			entity.TipoCompra = null;
		}
	}
	
	[Table(Name="dbo.TipoDiagnostico")]
	public partial class TipoDiagnostico : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private System.Nullable<bool> _Sistema;
		
		private EntitySet<DiagInseminacion> _DiagInseminacion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    partial void OnSistemaChanging(System.Nullable<bool> value);
    partial void OnSistemaChanged();
    #endregion
		
		public TipoDiagnostico()
		{
			this._DiagInseminacion = new EntitySet<DiagInseminacion>(new Action<DiagInseminacion>(this.attach_DiagInseminacion), new Action<DiagInseminacion>(this.detach_DiagInseminacion));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Column(Storage="_Sistema", DbType="Bit")]
		public System.Nullable<bool> Sistema
		{
			get
			{
				return this._Sistema;
			}
			set
			{
				if ((this._Sistema != value))
				{
					this.OnSistemaChanging(value);
					this.SendPropertyChanging();
					this._Sistema = value;
					this.SendPropertyChanged("Sistema");
					this.OnSistemaChanged();
				}
			}
		}
		
		[Association(Name="TipoDiagnostico_DiagInseminacion", Storage="_DiagInseminacion", ThisKey="Id", OtherKey="IdTipo")]
		public EntitySet<DiagInseminacion> DiagInseminacion
		{
			get
			{
				return this._DiagInseminacion;
			}
			set
			{
				this._DiagInseminacion.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DiagInseminacion(DiagInseminacion entity)
		{
			this.SendPropertyChanging();
			entity.TipoDiagnostico = this;
		}
		
		private void detach_DiagInseminacion(DiagInseminacion entity)
		{
			this.SendPropertyChanging();
			entity.TipoDiagnostico = null;
		}
	}
	
	[Table(Name="dbo.TipoEnfermedad")]
	public partial class TipoEnfermedad : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private EntitySet<Enfermedad> _Enfermedads;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public TipoEnfermedad()
		{
			this._Enfermedads = new EntitySet<Enfermedad>(new Action<Enfermedad>(this.attach_Enfermedads), new Action<Enfermedad>(this.detach_Enfermedads));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="TipoEnfermedad_Enfermedad", Storage="_Enfermedads", ThisKey="Id", OtherKey="IdTipo")]
		public EntitySet<Enfermedad> Enfermedades
		{
			get
			{
				return this._Enfermedads;
			}
			set
			{
				this._Enfermedads.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Enfermedads(Enfermedad entity)
		{
			this.SendPropertyChanging();
			entity.Tipo = this;
		}
		
		private void detach_Enfermedads(Enfermedad entity)
		{
			this.SendPropertyChanging();
			entity.Tipo = null;
		}
	}
	
	[Table(Name="dbo.TipoEngrasamiento")]
	public partial class TipoEngrasamiento : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private string _Detalle;
		
		private EntitySet<EngrasamientoCanal> _EngrasamientoCanals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    partial void OnDetalleChanging(string value);
    partial void OnDetalleChanged();
    #endregion
		
		public TipoEngrasamiento()
		{
			this._EngrasamientoCanals = new EntitySet<EngrasamientoCanal>(new Action<EngrasamientoCanal>(this.attach_EngrasamientoCanals), new Action<EngrasamientoCanal>(this.detach_EngrasamientoCanals));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Column(Storage="_Detalle", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Detalle
		{
			get
			{
				return this._Detalle;
			}
			set
			{
				if ((this._Detalle != value))
				{
					this.OnDetalleChanging(value);
					this.SendPropertyChanging();
					this._Detalle = value;
					this.SendPropertyChanged("Detalle");
					this.OnDetalleChanged();
				}
			}
		}
		
		[Association(Name="TipoEngrasamiento_EngrasamientoCanal", Storage="_EngrasamientoCanals", ThisKey="Id", OtherKey="IdTipo")]
		public EntitySet<EngrasamientoCanal> Engrasamientos
		{
			get
			{
				return this._EngrasamientoCanals;
			}
			set
			{
				this._EngrasamientoCanals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EngrasamientoCanals(EngrasamientoCanal entity)
		{
			this.SendPropertyChanging();
			entity.Tipo = this;
		}
		
		private void detach_EngrasamientoCanals(EngrasamientoCanal entity)
		{
			this.SendPropertyChanging();
			entity.Tipo = null;
		}
	}
	
	[Table(Name="dbo.TipoInseminacion")]
	public partial class TipoInseminacion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private System.Nullable<bool> _Sistema;
		
		private EntitySet<Inseminacion> _Inseminacion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    partial void OnSistemaChanging(System.Nullable<bool> value);
    partial void OnSistemaChanged();
    #endregion
		
		public TipoInseminacion()
		{
			this._Inseminacion = new EntitySet<Inseminacion>(new Action<Inseminacion>(this.attach_Inseminacion), new Action<Inseminacion>(this.detach_Inseminacion));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Column(Storage="_Sistema", DbType="Bit")]
		public System.Nullable<bool> Sistema
		{
			get
			{
				return this._Sistema;
			}
			set
			{
				if ((this._Sistema != value))
				{
					this.OnSistemaChanging(value);
					this.SendPropertyChanging();
					this._Sistema = value;
					this.SendPropertyChanged("Sistema");
					this.OnSistemaChanged();
				}
			}
		}
		
		[Association(Name="TipoInseminacion_Inseminacion", Storage="_Inseminacion", ThisKey="Id", OtherKey="IdTipo")]
		public EntitySet<Inseminacion> Inseminacion
		{
			get
			{
				return this._Inseminacion;
			}
			set
			{
				this._Inseminacion.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Inseminacion(Inseminacion entity)
		{
			this.SendPropertyChanging();
			entity.TipoInseminacion = this;
		}
		
		private void detach_Inseminacion(Inseminacion entity)
		{
			this.SendPropertyChanging();
			entity.TipoInseminacion = null;
		}
	}
	
	[Table(Name="dbo.TipoProducto")]
	public partial class TipoProducto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private System.Nullable<bool> _Familia;
		
		private System.Nullable<bool> _Sistema;
		
		private EntitySet<Producto> _Productos;
		
		private EntitySet<Familia> _Familia1;
		
		private EntitySet<Venta> _Venta;
		
		private EntitySet<Compra> _Compra;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    partial void OnFamiliaChanging(System.Nullable<bool> value);
    partial void OnFamiliaChanged();
    partial void OnSistemaChanging(System.Nullable<bool> value);
    partial void OnSistemaChanged();
    #endregion
		
		public TipoProducto()
		{
			this._Productos = new EntitySet<Producto>(new Action<Producto>(this.attach_Productos), new Action<Producto>(this.detach_Productos));
			this._Familia1 = new EntitySet<Familia>(new Action<Familia>(this.attach_Familia1), new Action<Familia>(this.detach_Familia1));
			this._Venta = new EntitySet<Venta>(new Action<Venta>(this.attach_Venta), new Action<Venta>(this.detach_Venta));
			this._Compra = new EntitySet<Compra>(new Action<Compra>(this.attach_Compra), new Action<Compra>(this.detach_Compra));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Column(Storage="_Familia", DbType="Bit")]
		public System.Nullable<bool> Familia
		{
			get
			{
				return this._Familia;
			}
			set
			{
				if ((this._Familia != value))
				{
					this.OnFamiliaChanging(value);
					this.SendPropertyChanging();
					this._Familia = value;
					this.SendPropertyChanged("Familia");
					this.OnFamiliaChanged();
				}
			}
		}
		
		[Column(Storage="_Sistema", DbType="Bit")]
		public System.Nullable<bool> Sistema
		{
			get
			{
				return this._Sistema;
			}
			set
			{
				if ((this._Sistema != value))
				{
					this.OnSistemaChanging(value);
					this.SendPropertyChanging();
					this._Sistema = value;
					this.SendPropertyChanged("Sistema");
					this.OnSistemaChanged();
				}
			}
		}
		
		[Association(Name="TipoProducto_Producto", Storage="_Productos", ThisKey="Id", OtherKey="IdTipo")]
		public EntitySet<Producto> Productos
		{
			get
			{
				return this._Productos;
			}
			set
			{
				this._Productos.Assign(value);
			}
		}
		
		[Association(Name="TipoProducto_Familia", Storage="_Familia1", ThisKey="Id", OtherKey="IdTipo")]
		public EntitySet<Familia> Familia1
		{
			get
			{
				return this._Familia1;
			}
			set
			{
				this._Familia1.Assign(value);
			}
		}
		
		[Association(Name="TipoProducto_Venta", Storage="_Venta", ThisKey="Id", OtherKey="IdTipo")]
		public EntitySet<Venta> Venta
		{
			get
			{
				return this._Venta;
			}
			set
			{
				this._Venta.Assign(value);
			}
		}
		
		[Association(Name="TipoProducto_Compra", Storage="_Compra", ThisKey="Id", OtherKey="IdTipo")]
		public EntitySet<Compra> Compra
		{
			get
			{
				return this._Compra;
			}
			set
			{
				this._Compra.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Productos(Producto entity)
		{
			this.SendPropertyChanging();
			entity.Tipo = this;
		}
		
		private void detach_Productos(Producto entity)
		{
			this.SendPropertyChanging();
			entity.Tipo = null;
		}
		
		private void attach_Familia1(Familia entity)
		{
			this.SendPropertyChanging();
			entity.TipoProducto = this;
		}
		
		private void detach_Familia1(Familia entity)
		{
			this.SendPropertyChanging();
			entity.TipoProducto = null;
		}
		
		private void attach_Venta(Venta entity)
		{
			this.SendPropertyChanging();
			entity.TipoProducto = this;
		}
		
		private void detach_Venta(Venta entity)
		{
			this.SendPropertyChanging();
			entity.TipoProducto = null;
		}
		
		private void attach_Compra(Compra entity)
		{
			this.SendPropertyChanging();
			entity.TipoProducto = this;
		}
		
		private void detach_Compra(Compra entity)
		{
			this.SendPropertyChanging();
			entity.TipoProducto = null;
		}
	}
	
	[Table(Name="dbo.TipoSecado")]
	public partial class TipoSecado : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private System.Nullable<bool> _Sistema;
		
		private EntitySet<Secado> _Secados;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    partial void OnSistemaChanging(System.Nullable<bool> value);
    partial void OnSistemaChanged();
    #endregion
		
		public TipoSecado()
		{
			this._Secados = new EntitySet<Secado>(new Action<Secado>(this.attach_Secados), new Action<Secado>(this.detach_Secados));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Column(Storage="_Sistema", DbType="Bit")]
		public System.Nullable<bool> Sistema
		{
			get
			{
				return this._Sistema;
			}
			set
			{
				if ((this._Sistema != value))
				{
					this.OnSistemaChanging(value);
					this.SendPropertyChanging();
					this._Sistema = value;
					this.SendPropertyChanged("Sistema");
					this.OnSistemaChanged();
				}
			}
		}
		
		[Association(Name="TipoSecado_Secado", Storage="_Secados", ThisKey="Id", OtherKey="IdTipo")]
		public EntitySet<Secado> Secados
		{
			get
			{
				return this._Secados;
			}
			set
			{
				this._Secados.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Secados(Secado entity)
		{
			this.SendPropertyChanging();
			entity.Tipo = this;
		}
		
		private void detach_Secados(Secado entity)
		{
			this.SendPropertyChanging();
			entity.Tipo = null;
		}
	}
	
	[Table(Name="dbo.TipoVenta")]
	public partial class TipoVenta : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private EntitySet<Venta> _Venta;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public TipoVenta()
		{
			this._Venta = new EntitySet<Venta>(new Action<Venta>(this.attach_Venta), new Action<Venta>(this.detach_Venta));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="TipoVenta_Venta", Storage="_Venta", ThisKey="Id", OtherKey="IdClasificacion")]
		public EntitySet<Venta> Venta
		{
			get
			{
				return this._Venta;
			}
			set
			{
				this._Venta.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Venta(Venta entity)
		{
			this.SendPropertyChanging();
			entity.TipoVenta = this;
		}
		
		private void detach_Venta(Venta entity)
		{
			this.SendPropertyChanging();
			entity.TipoVenta = null;
		}
	}
	
	[Table(Name="dbo.TratParcela")]
	public partial class TratParcela : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdParcela;
		
		private int _IdPlaga;
		
		private int _IdProducto;
		
		private string _Tipo;
		
		private string _Situacion;
		
		private decimal _Superficie;
		
		private decimal _Caldo;
		
		private System.DateTime _Fecha;
		
		private EntitySet<Gasto> _Gasto;
		
		private EntityRef<Parcela> _Parcela;
		
		private EntityRef<Plaga> _Plaga;
		
		private EntityRef<Producto> _Producto;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdParcelaChanging(int value);
    partial void OnIdParcelaChanged();
    partial void OnIdPlagaChanging(int value);
    partial void OnIdPlagaChanged();
    partial void OnIdProductoChanging(int value);
    partial void OnIdProductoChanged();
    partial void OnTipoChanging(string value);
    partial void OnTipoChanged();
    partial void OnSituacionChanging(string value);
    partial void OnSituacionChanged();
    partial void OnSuperficieChanging(decimal value);
    partial void OnSuperficieChanged();
    partial void OnCaldoChanging(decimal value);
    partial void OnCaldoChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    #endregion
		
		public TratParcela()
		{
			this._Gasto = new EntitySet<Gasto>(new Action<Gasto>(this.attach_Gasto), new Action<Gasto>(this.detach_Gasto));
			this._Parcela = default(EntityRef<Parcela>);
			this._Plaga = default(EntityRef<Plaga>);
			this._Producto = default(EntityRef<Producto>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdParcela", DbType="Int NOT NULL")]
		public int IdParcela
		{
			get
			{
				return this._IdParcela;
			}
			set
			{
				if ((this._IdParcela != value))
				{
					if (this._Parcela.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdParcelaChanging(value);
					this.SendPropertyChanging();
					this._IdParcela = value;
					this.SendPropertyChanged("IdParcela");
					this.OnIdParcelaChanged();
				}
			}
		}
		
		[Column(Storage="_IdPlaga", DbType="Int NOT NULL")]
		public int IdPlaga
		{
			get
			{
				return this._IdPlaga;
			}
			set
			{
				if ((this._IdPlaga != value))
				{
					if (this._Plaga.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPlagaChanging(value);
					this.SendPropertyChanging();
					this._IdPlaga = value;
					this.SendPropertyChanged("IdPlaga");
					this.OnIdPlagaChanged();
				}
			}
		}
		
		[Column(Storage="_IdProducto", DbType="Int NOT NULL")]
		public int IdProducto
		{
			get
			{
				return this._IdProducto;
			}
			set
			{
				if ((this._IdProducto != value))
				{
					if (this._Producto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdProductoChanging(value);
					this.SendPropertyChanging();
					this._IdProducto = value;
					this.SendPropertyChanged("IdProducto");
					this.OnIdProductoChanged();
				}
			}
		}
		
		[Column(Storage="_Tipo", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Tipo
		{
			get
			{
				return this._Tipo;
			}
			set
			{
				if ((this._Tipo != value))
				{
					this.OnTipoChanging(value);
					this.SendPropertyChanging();
					this._Tipo = value;
					this.SendPropertyChanged("Tipo");
					this.OnTipoChanged();
				}
			}
		}
		
		[Column(Storage="_Situacion", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Situacion
		{
			get
			{
				return this._Situacion;
			}
			set
			{
				if ((this._Situacion != value))
				{
					this.OnSituacionChanging(value);
					this.SendPropertyChanging();
					this._Situacion = value;
					this.SendPropertyChanged("Situacion");
					this.OnSituacionChanged();
				}
			}
		}
		
		[Column(Storage="_Superficie", DbType="Decimal(6,2) NOT NULL")]
		public decimal Superficie
		{
			get
			{
				return this._Superficie;
			}
			set
			{
				if ((this._Superficie != value))
				{
					this.OnSuperficieChanging(value);
					this.SendPropertyChanging();
					this._Superficie = value;
					this.SendPropertyChanged("Superficie");
					this.OnSuperficieChanged();
				}
			}
		}
		
		[Column(Storage="_Caldo", DbType="Decimal(6,2) NOT NULL")]
		public decimal Caldo
		{
			get
			{
				return this._Caldo;
			}
			set
			{
				if ((this._Caldo != value))
				{
					this.OnCaldoChanging(value);
					this.SendPropertyChanging();
					this._Caldo = value;
					this.SendPropertyChanged("Caldo");
					this.OnCaldoChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Association(Name="TratParcela_Gasto", Storage="_Gasto", ThisKey="Id", OtherKey="IdTratParcela")]
		public EntitySet<Gasto> Gasto
		{
			get
			{
				return this._Gasto;
			}
			set
			{
				this._Gasto.Assign(value);
			}
		}
		
		[Association(Name="Parcela_TratParcela", Storage="_Parcela", ThisKey="IdParcela", OtherKey="Id", IsForeignKey=true)]
		public Parcela Parcela
		{
			get
			{
				return this._Parcela.Entity;
			}
			set
			{
				Parcela previousValue = this._Parcela.Entity;
				if (((previousValue != value) 
							|| (this._Parcela.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parcela.Entity = null;
						previousValue.Tratamientos.Remove(this);
					}
					this._Parcela.Entity = value;
					if ((value != null))
					{
						value.Tratamientos.Add(this);
						this._IdParcela = value.Id;
					}
					else
					{
						this._IdParcela = default(int);
					}
					this.SendPropertyChanged("Parcela");
				}
			}
		}
		
		[Association(Name="Plaga_TratParcela", Storage="_Plaga", ThisKey="IdPlaga", OtherKey="Id", IsForeignKey=true)]
		public Plaga Plaga
		{
			get
			{
				return this._Plaga.Entity;
			}
			set
			{
				Plaga previousValue = this._Plaga.Entity;
				if (((previousValue != value) 
							|| (this._Plaga.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Plaga.Entity = null;
						previousValue.Tratamientos.Remove(this);
					}
					this._Plaga.Entity = value;
					if ((value != null))
					{
						value.Tratamientos.Add(this);
						this._IdPlaga = value.Id;
					}
					else
					{
						this._IdPlaga = default(int);
					}
					this.SendPropertyChanged("Plaga");
				}
			}
		}
		
		[Association(Name="Producto_TratParcela", Storage="_Producto", ThisKey="IdProducto", OtherKey="Id", IsForeignKey=true)]
		public Producto Producto
		{
			get
			{
				return this._Producto.Entity;
			}
			set
			{
				Producto previousValue = this._Producto.Entity;
				if (((previousValue != value) 
							|| (this._Producto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Producto.Entity = null;
						previousValue.TratsParcelas.Remove(this);
					}
					this._Producto.Entity = value;
					if ((value != null))
					{
						value.TratsParcelas.Add(this);
						this._IdProducto = value.Id;
					}
					else
					{
						this._IdProducto = default(int);
					}
					this.SendPropertyChanged("Producto");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Gasto(Gasto entity)
		{
			this.SendPropertyChanging();
			entity.TratParcela = this;
		}
		
		private void detach_Gasto(Gasto entity)
		{
			this.SendPropertyChanging();
			entity.TratParcela = null;
		}
	}
	
	[Table(Name="dbo.TipoAlta")]
	public partial class TipoAlta : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private System.Nullable<bool> _Sistema;
		
		private EntitySet<Alta> _Alta;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    partial void OnSistemaChanging(System.Nullable<bool> value);
    partial void OnSistemaChanged();
    #endregion
		
		public TipoAlta()
		{
			this._Alta = new EntitySet<Alta>(new Action<Alta>(this.attach_Alta), new Action<Alta>(this.detach_Alta));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Column(Storage="_Sistema", DbType="Bit")]
		public System.Nullable<bool> Sistema
		{
			get
			{
				return this._Sistema;
			}
			set
			{
				if ((this._Sistema != value))
				{
					this.OnSistemaChanging(value);
					this.SendPropertyChanging();
					this._Sistema = value;
					this.SendPropertyChanged("Sistema");
					this.OnSistemaChanged();
				}
			}
		}
		
		[Association(Name="TipoAlta_Alta", Storage="_Alta", ThisKey="Id", OtherKey="IdTipo")]
		public EntitySet<Alta> Alta
		{
			get
			{
				return this._Alta;
			}
			set
			{
				this._Alta.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Alta(Alta entity)
		{
			this.SendPropertyChanging();
			entity.TipoAlta = this;
		}
		
		private void detach_Alta(Alta entity)
		{
			this.SendPropertyChanging();
			entity.TipoAlta = null;
		}
	}
	
	[Table(Name="dbo.Familia")]
	public partial class Familia : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdTipo;
		
		private string _Descripcion;
		
		private System.Nullable<bool> _Sistema;
		
		private EntitySet<Producto> _Producto;
		
		private EntityRef<TipoProducto> _TipoProducto;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdTipoChanging(int value);
    partial void OnIdTipoChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    partial void OnSistemaChanging(System.Nullable<bool> value);
    partial void OnSistemaChanged();
    #endregion
		
		public Familia()
		{
			this._Producto = new EntitySet<Producto>(new Action<Producto>(this.attach_Producto), new Action<Producto>(this.detach_Producto));
			this._TipoProducto = default(EntityRef<TipoProducto>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdTipo", DbType="Int NOT NULL")]
		public int IdTipo
		{
			get
			{
				return this._IdTipo;
			}
			set
			{
				if ((this._IdTipo != value))
				{
					if (this._TipoProducto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTipoChanging(value);
					this.SendPropertyChanging();
					this._IdTipo = value;
					this.SendPropertyChanged("IdTipo");
					this.OnIdTipoChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Column(Storage="_Sistema", DbType="Bit")]
		public System.Nullable<bool> Sistema
		{
			get
			{
				return this._Sistema;
			}
			set
			{
				if ((this._Sistema != value))
				{
					this.OnSistemaChanging(value);
					this.SendPropertyChanging();
					this._Sistema = value;
					this.SendPropertyChanged("Sistema");
					this.OnSistemaChanged();
				}
			}
		}
		
		[Association(Name="Familia_Producto", Storage="_Producto", ThisKey="Id", OtherKey="IdFamilia")]
		public EntitySet<Producto> Producto
		{
			get
			{
				return this._Producto;
			}
			set
			{
				this._Producto.Assign(value);
			}
		}
		
		[Association(Name="TipoProducto_Familia", Storage="_TipoProducto", ThisKey="IdTipo", OtherKey="Id", IsForeignKey=true)]
		public TipoProducto TipoProducto
		{
			get
			{
				return this._TipoProducto.Entity;
			}
			set
			{
				TipoProducto previousValue = this._TipoProducto.Entity;
				if (((previousValue != value) 
							|| (this._TipoProducto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoProducto.Entity = null;
						previousValue.Familia1.Remove(this);
					}
					this._TipoProducto.Entity = value;
					if ((value != null))
					{
						value.Familia1.Add(this);
						this._IdTipo = value.Id;
					}
					else
					{
						this._IdTipo = default(int);
					}
					this.SendPropertyChanged("TipoProducto");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Producto(Producto entity)
		{
			this.SendPropertyChanging();
			entity.Familia = this;
		}
		
		private void detach_Producto(Producto entity)
		{
			this.SendPropertyChanging();
			entity.Familia = null;
		}
	}
	
	[Table(Name="dbo.Asignacion")]
	public partial class Asignacion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdRacion;
		
		private int _IdAnimal;
		
		private decimal _Porcentaje;
		
		private System.DateTime _FechaInicio;
		
		private System.Nullable<System.DateTime> _FechaFin;
		
		private EntitySet<Gasto> _Gasto;
		
		private EntityRef<Racion> _Racion;
		
		private EntityRef<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdRacionChanging(int value);
    partial void OnIdRacionChanged();
    partial void OnIdAnimalChanging(int value);
    partial void OnIdAnimalChanged();
    partial void OnPorcentajeChanging(decimal value);
    partial void OnPorcentajeChanged();
    partial void OnFechaInicioChanging(System.DateTime value);
    partial void OnFechaInicioChanged();
    partial void OnFechaFinChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaFinChanged();
    #endregion
		
		public Asignacion()
		{
			this._Gasto = new EntitySet<Gasto>(new Action<Gasto>(this.attach_Gasto), new Action<Gasto>(this.detach_Gasto));
			this._Racion = default(EntityRef<Racion>);
			this._Animal = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdRacion", DbType="Int NOT NULL")]
		public int IdRacion
		{
			get
			{
				return this._IdRacion;
			}
			set
			{
				if ((this._IdRacion != value))
				{
					if (this._Racion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdRacionChanging(value);
					this.SendPropertyChanging();
					this._IdRacion = value;
					this.SendPropertyChanged("IdRacion");
					this.OnIdRacionChanged();
				}
			}
		}
		
		[Column(Storage="_IdAnimal", DbType="Int NOT NULL")]
		public int IdAnimal
		{
			get
			{
				return this._IdAnimal;
			}
			set
			{
				if ((this._IdAnimal != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAnimalChanging(value);
					this.SendPropertyChanging();
					this._IdAnimal = value;
					this.SendPropertyChanged("IdAnimal");
					this.OnIdAnimalChanged();
				}
			}
		}
		
		[Column(Storage="_Porcentaje", DbType="Decimal(6,2) NOT NULL")]
		public decimal Porcentaje
		{
			get
			{
				return this._Porcentaje;
			}
			set
			{
				if ((this._Porcentaje != value))
				{
					this.OnPorcentajeChanging(value);
					this.SendPropertyChanging();
					this._Porcentaje = value;
					this.SendPropertyChanged("Porcentaje");
					this.OnPorcentajeChanged();
				}
			}
		}
		
		[Column(Storage="_FechaInicio", DbType="DateTime NOT NULL")]
		public System.DateTime FechaInicio
		{
			get
			{
				return this._FechaInicio;
			}
			set
			{
				if ((this._FechaInicio != value))
				{
					this.OnFechaInicioChanging(value);
					this.SendPropertyChanging();
					this._FechaInicio = value;
					this.SendPropertyChanged("FechaInicio");
					this.OnFechaInicioChanged();
				}
			}
		}
		
		[Column(Storage="_FechaFin", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaFin
		{
			get
			{
				return this._FechaFin;
			}
			set
			{
				if ((this._FechaFin != value))
				{
					this.OnFechaFinChanging(value);
					this.SendPropertyChanging();
					this._FechaFin = value;
					this.SendPropertyChanged("FechaFin");
					this.OnFechaFinChanged();
				}
			}
		}
		
		[Association(Name="Asignacion_Gasto", Storage="_Gasto", ThisKey="Id", OtherKey="IdAsignacion")]
		public EntitySet<Gasto> Gasto
		{
			get
			{
				return this._Gasto;
			}
			set
			{
				this._Gasto.Assign(value);
			}
		}
		
		[Association(Name="Racion_Asignacion", Storage="_Racion", ThisKey="IdRacion", OtherKey="Id", IsForeignKey=true)]
		public Racion Racion
		{
			get
			{
				return this._Racion.Entity;
			}
			set
			{
				Racion previousValue = this._Racion.Entity;
				if (((previousValue != value) 
							|| (this._Racion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Racion.Entity = null;
						previousValue.Asignacion.Remove(this);
					}
					this._Racion.Entity = value;
					if ((value != null))
					{
						value.Asignacion.Add(this);
						this._IdRacion = value.Id;
					}
					else
					{
						this._IdRacion = default(int);
					}
					this.SendPropertyChanged("Racion");
				}
			}
		}
		
		[Association(Name="Animal_Asignacion", Storage="_Animal", ThisKey="IdAnimal", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.Asignacion.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.Asignacion.Add(this);
						this._IdAnimal = value.Id;
					}
					else
					{
						this._IdAnimal = default(int);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Gasto(Gasto entity)
		{
			this.SendPropertyChanging();
			entity.Asignacion = this;
		}
		
		private void detach_Gasto(Gasto entity)
		{
			this.SendPropertyChanging();
			entity.Asignacion = null;
		}
	}
	
	[Table(Name="dbo.Analisis")]
	public partial class Analisis : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdTipo;
		
		private int _IdAnimal;
		
		private int _IdLaboratorio;
		
		private System.DateTime _Fecha;
		
		private string _Registro;
		
		private bool _FiliacionCompatible;
		
		private EntityRef<Laboratorio> _Laboratorio;
		
		private EntityRef<TipoAnalisis> _Tipo;
		
		private EntityRef<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdTipoChanging(int value);
    partial void OnIdTipoChanged();
    partial void OnIdAnimalChanging(int value);
    partial void OnIdAnimalChanged();
    partial void OnIdLaboratorioChanging(int value);
    partial void OnIdLaboratorioChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    partial void OnRegistroChanging(string value);
    partial void OnRegistroChanged();
    partial void OnFiliacionCompatibleChanging(bool value);
    partial void OnFiliacionCompatibleChanged();
    #endregion
		
		public Analisis()
		{
			this._Laboratorio = default(EntityRef<Laboratorio>);
			this._Tipo = default(EntityRef<TipoAnalisis>);
			this._Animal = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdTipo", DbType="Int NOT NULL")]
		public int IdTipo
		{
			get
			{
				return this._IdTipo;
			}
			set
			{
				if ((this._IdTipo != value))
				{
					if (this._Tipo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTipoChanging(value);
					this.SendPropertyChanging();
					this._IdTipo = value;
					this.SendPropertyChanged("IdTipo");
					this.OnIdTipoChanged();
				}
			}
		}
		
		[Column(Storage="_IdAnimal", DbType="Int NOT NULL")]
		public int IdAnimal
		{
			get
			{
				return this._IdAnimal;
			}
			set
			{
				if ((this._IdAnimal != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAnimalChanging(value);
					this.SendPropertyChanging();
					this._IdAnimal = value;
					this.SendPropertyChanged("IdAnimal");
					this.OnIdAnimalChanged();
				}
			}
		}
		
		[Column(Storage="_IdLaboratorio", DbType="Int NOT NULL")]
		public int IdLaboratorio
		{
			get
			{
				return this._IdLaboratorio;
			}
			set
			{
				if ((this._IdLaboratorio != value))
				{
					if (this._Laboratorio.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdLaboratorioChanging(value);
					this.SendPropertyChanging();
					this._IdLaboratorio = value;
					this.SendPropertyChanged("IdLaboratorio");
					this.OnIdLaboratorioChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Column(Storage="_Registro", DbType="VarChar(5)")]
		public string Registro
		{
			get
			{
				return this._Registro;
			}
			set
			{
				if ((this._Registro != value))
				{
					this.OnRegistroChanging(value);
					this.SendPropertyChanging();
					this._Registro = value;
					this.SendPropertyChanged("Registro");
					this.OnRegistroChanged();
				}
			}
		}
		
		[Column(Storage="_FiliacionCompatible", DbType="Bit NOT NULL")]
		public bool FiliacionCompatible
		{
			get
			{
				return this._FiliacionCompatible;
			}
			set
			{
				if ((this._FiliacionCompatible != value))
				{
					this.OnFiliacionCompatibleChanging(value);
					this.SendPropertyChanging();
					this._FiliacionCompatible = value;
					this.SendPropertyChanged("FiliacionCompatible");
					this.OnFiliacionCompatibleChanged();
				}
			}
		}
		
		[Association(Name="Laboratorio_Analisis", Storage="_Laboratorio", ThisKey="IdLaboratorio", OtherKey="Id", IsForeignKey=true)]
		public Laboratorio Laboratorio
		{
			get
			{
				return this._Laboratorio.Entity;
			}
			set
			{
				Laboratorio previousValue = this._Laboratorio.Entity;
				if (((previousValue != value) 
							|| (this._Laboratorio.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Laboratorio.Entity = null;
						previousValue.Analisis.Remove(this);
					}
					this._Laboratorio.Entity = value;
					if ((value != null))
					{
						value.Analisis.Add(this);
						this._IdLaboratorio = value.Id;
					}
					else
					{
						this._IdLaboratorio = default(int);
					}
					this.SendPropertyChanged("Laboratorio");
				}
			}
		}
		
		[Association(Name="TipoAnalisis_Analisis", Storage="_Tipo", ThisKey="IdTipo", OtherKey="Id", IsForeignKey=true)]
		public TipoAnalisis Tipo
		{
			get
			{
				return this._Tipo.Entity;
			}
			set
			{
				TipoAnalisis previousValue = this._Tipo.Entity;
				if (((previousValue != value) 
							|| (this._Tipo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tipo.Entity = null;
						previousValue.Analisis.Remove(this);
					}
					this._Tipo.Entity = value;
					if ((value != null))
					{
						value.Analisis.Add(this);
						this._IdTipo = value.Id;
					}
					else
					{
						this._IdTipo = default(int);
					}
					this.SendPropertyChanged("Tipo");
				}
			}
		}
		
		[Association(Name="Animal_Analisis", Storage="_Animal", ThisKey="IdAnimal", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.Analisis.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.Analisis.Add(this);
						this._IdAnimal = value.Id;
					}
					else
					{
						this._IdAnimal = default(int);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TipoAnalisis")]
	public partial class TipoAnalisis : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private EntitySet<Analisis> _Analisis;
		
		private EntitySet<Marcador> _Marcadores;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public TipoAnalisis()
		{
			this._Analisis = new EntitySet<Analisis>(new Action<Analisis>(this.attach_Analisis), new Action<Analisis>(this.detach_Analisis));
			this._Marcadores = new EntitySet<Marcador>(new Action<Marcador>(this.attach_Marcadores), new Action<Marcador>(this.detach_Marcadores));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="TipoAnalisis_Analisis", Storage="_Analisis", ThisKey="Id", OtherKey="IdTipo")]
		public EntitySet<Analisis> Analisis
		{
			get
			{
				return this._Analisis;
			}
			set
			{
				this._Analisis.Assign(value);
			}
		}
		
		[Association(Name="TipoAnalisis_Marcador", Storage="_Marcadores", ThisKey="Id", OtherKey="IdTipo")]
		public EntitySet<Marcador> Marcadores
		{
			get
			{
				return this._Marcadores;
			}
			set
			{
				this._Marcadores.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Analisis(Analisis entity)
		{
			this.SendPropertyChanging();
			entity.Tipo = this;
		}
		
		private void detach_Analisis(Analisis entity)
		{
			this.SendPropertyChanging();
			entity.Tipo = null;
		}
		
		private void attach_Marcadores(Marcador entity)
		{
			this.SendPropertyChanging();
			entity.Tipo = this;
		}
		
		private void detach_Marcadores(Marcador entity)
		{
			this.SendPropertyChanging();
			entity.Tipo = null;
		}
	}
	
	[Table(Name="dbo.Combinacion")]
	public partial class Combinacion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdMarcador1;
		
		private int _IdMarcador2;
		
		private string _Grupo;
		
		private string _Riesgo;
		
		private EntityRef<Marcador> _Marcador1;
		
		private EntityRef<Marcador> _Marcador2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdMarcador1Changing(int value);
    partial void OnIdMarcador1Changed();
    partial void OnIdMarcador2Changing(int value);
    partial void OnIdMarcador2Changed();
    partial void OnGrupoChanging(string value);
    partial void OnGrupoChanged();
    partial void OnRiesgoChanging(string value);
    partial void OnRiesgoChanged();
    #endregion
		
		public Combinacion()
		{
			this._Marcador1 = default(EntityRef<Marcador>);
			this._Marcador2 = default(EntityRef<Marcador>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdMarcador1", DbType="Int NOT NULL")]
		public int IdMarcador1
		{
			get
			{
				return this._IdMarcador1;
			}
			set
			{
				if ((this._IdMarcador1 != value))
				{
					if (this._Marcador1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdMarcador1Changing(value);
					this.SendPropertyChanging();
					this._IdMarcador1 = value;
					this.SendPropertyChanged("IdMarcador1");
					this.OnIdMarcador1Changed();
				}
			}
		}
		
		[Column(Storage="_IdMarcador2", DbType="Int NOT NULL")]
		public int IdMarcador2
		{
			get
			{
				return this._IdMarcador2;
			}
			set
			{
				if ((this._IdMarcador2 != value))
				{
					if (this._Marcador2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdMarcador2Changing(value);
					this.SendPropertyChanging();
					this._IdMarcador2 = value;
					this.SendPropertyChanged("IdMarcador2");
					this.OnIdMarcador2Changed();
				}
			}
		}
		
		[Column(Storage="_Grupo", DbType="VarChar(5)")]
		public string Grupo
		{
			get
			{
				return this._Grupo;
			}
			set
			{
				if ((this._Grupo != value))
				{
					this.OnGrupoChanging(value);
					this.SendPropertyChanging();
					this._Grupo = value;
					this.SendPropertyChanged("Grupo");
					this.OnGrupoChanged();
				}
			}
		}
		
		[Column(Storage="_Riesgo", DbType="VarChar(35)")]
		public string Riesgo
		{
			get
			{
				return this._Riesgo;
			}
			set
			{
				if ((this._Riesgo != value))
				{
					this.OnRiesgoChanging(value);
					this.SendPropertyChanging();
					this._Riesgo = value;
					this.SendPropertyChanged("Riesgo");
					this.OnRiesgoChanged();
				}
			}
		}
		
		[Association(Name="Marcador_Combinacion", Storage="_Marcador1", ThisKey="IdMarcador1", OtherKey="Id", IsForeignKey=true)]
		public Marcador Marcador1
		{
			get
			{
				return this._Marcador1.Entity;
			}
			set
			{
				Marcador previousValue = this._Marcador1.Entity;
				if (((previousValue != value) 
							|| (this._Marcador1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Marcador1.Entity = null;
						previousValue.Combinaciones1.Remove(this);
					}
					this._Marcador1.Entity = value;
					if ((value != null))
					{
						value.Combinaciones1.Add(this);
						this._IdMarcador1 = value.Id;
					}
					else
					{
						this._IdMarcador1 = default(int);
					}
					this.SendPropertyChanged("Marcador1");
				}
			}
		}
		
		[Association(Name="Marcador_Combinacion1", Storage="_Marcador2", ThisKey="IdMarcador2", OtherKey="Id", IsForeignKey=true)]
		public Marcador Marcador2
		{
			get
			{
				return this._Marcador2.Entity;
			}
			set
			{
				Marcador previousValue = this._Marcador2.Entity;
				if (((previousValue != value) 
							|| (this._Marcador2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Marcador2.Entity = null;
						previousValue.Combinaciones2.Remove(this);
					}
					this._Marcador2.Entity = value;
					if ((value != null))
					{
						value.Combinaciones2.Add(this);
						this._IdMarcador2 = value.Id;
					}
					else
					{
						this._IdMarcador2 = default(int);
					}
					this.SendPropertyChanged("Marcador2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Marcador")]
	public partial class Marcador : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdTipo;
		
		private int _IdEspecie;
		
		private string _Marcador1;
		
		private EntitySet<Combinacion> _Combinaciones1;
		
		private EntitySet<Combinacion> _Combinaciones2;
		
		private EntityRef<Especie> _Especie;
		
		private EntityRef<TipoAnalisis> _Tipo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdTipoChanging(int value);
    partial void OnIdTipoChanged();
    partial void OnIdEspecieChanging(int value);
    partial void OnIdEspecieChanged();
    partial void OnMarcador1Changing(string value);
    partial void OnMarcador1Changed();
    #endregion
		
		public Marcador()
		{
			this._Combinaciones1 = new EntitySet<Combinacion>(new Action<Combinacion>(this.attach_Combinaciones1), new Action<Combinacion>(this.detach_Combinaciones1));
			this._Combinaciones2 = new EntitySet<Combinacion>(new Action<Combinacion>(this.attach_Combinaciones2), new Action<Combinacion>(this.detach_Combinaciones2));
			this._Especie = default(EntityRef<Especie>);
			this._Tipo = default(EntityRef<TipoAnalisis>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdTipo", DbType="Int NOT NULL")]
		public int IdTipo
		{
			get
			{
				return this._IdTipo;
			}
			set
			{
				if ((this._IdTipo != value))
				{
					if (this._Tipo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTipoChanging(value);
					this.SendPropertyChanging();
					this._IdTipo = value;
					this.SendPropertyChanged("IdTipo");
					this.OnIdTipoChanged();
				}
			}
		}
		
		[Column(Storage="_IdEspecie", DbType="Int NOT NULL")]
		public int IdEspecie
		{
			get
			{
				return this._IdEspecie;
			}
			set
			{
				if ((this._IdEspecie != value))
				{
					if (this._Especie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdEspecieChanging(value);
					this.SendPropertyChanging();
					this._IdEspecie = value;
					this.SendPropertyChanged("IdEspecie");
					this.OnIdEspecieChanged();
				}
			}
		}
		
		[Column(Name="Marcador", Storage="_Marcador1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Marcador1
		{
			get
			{
				return this._Marcador1;
			}
			set
			{
				if ((this._Marcador1 != value))
				{
					this.OnMarcador1Changing(value);
					this.SendPropertyChanging();
					this._Marcador1 = value;
					this.SendPropertyChanged("Marcador1");
					this.OnMarcador1Changed();
				}
			}
		}
		
		[Association(Name="Marcador_Combinacion", Storage="_Combinaciones1", ThisKey="Id", OtherKey="IdMarcador1")]
		public EntitySet<Combinacion> Combinaciones1
		{
			get
			{
				return this._Combinaciones1;
			}
			set
			{
				this._Combinaciones1.Assign(value);
			}
		}
		
		[Association(Name="Marcador_Combinacion1", Storage="_Combinaciones2", ThisKey="Id", OtherKey="IdMarcador2")]
		public EntitySet<Combinacion> Combinaciones2
		{
			get
			{
				return this._Combinaciones2;
			}
			set
			{
				this._Combinaciones2.Assign(value);
			}
		}
		
		[Association(Name="Especie_Marcador", Storage="_Especie", ThisKey="IdEspecie", OtherKey="Id", IsForeignKey=true)]
		public Especie Especie
		{
			get
			{
				return this._Especie.Entity;
			}
			set
			{
				Especie previousValue = this._Especie.Entity;
				if (((previousValue != value) 
							|| (this._Especie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Especie.Entity = null;
						previousValue.Marcadores.Remove(this);
					}
					this._Especie.Entity = value;
					if ((value != null))
					{
						value.Marcadores.Add(this);
						this._IdEspecie = value.Id;
					}
					else
					{
						this._IdEspecie = default(int);
					}
					this.SendPropertyChanged("Especie");
				}
			}
		}
		
		[Association(Name="TipoAnalisis_Marcador", Storage="_Tipo", ThisKey="IdTipo", OtherKey="Id", IsForeignKey=true)]
		public TipoAnalisis Tipo
		{
			get
			{
				return this._Tipo.Entity;
			}
			set
			{
				TipoAnalisis previousValue = this._Tipo.Entity;
				if (((previousValue != value) 
							|| (this._Tipo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tipo.Entity = null;
						previousValue.Marcadores.Remove(this);
					}
					this._Tipo.Entity = value;
					if ((value != null))
					{
						value.Marcadores.Add(this);
						this._IdTipo = value.Id;
					}
					else
					{
						this._IdTipo = default(int);
					}
					this.SendPropertyChanged("Tipo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Combinaciones1(Combinacion entity)
		{
			this.SendPropertyChanging();
			entity.Marcador1 = this;
		}
		
		private void detach_Combinaciones1(Combinacion entity)
		{
			this.SendPropertyChanging();
			entity.Marcador1 = null;
		}
		
		private void attach_Combinaciones2(Combinacion entity)
		{
			this.SendPropertyChanging();
			entity.Marcador2 = this;
		}
		
		private void detach_Combinaciones2(Combinacion entity)
		{
			this.SendPropertyChanging();
			entity.Marcador2 = null;
		}
	}
	
	[Table(Name="dbo.Resena")]
	public partial class Resena : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdAnimal;
		
		private int _IdVeterinario;
		
		private string _Lugar;
		
		private string _Cabeza;
		
		private string _Cuello;
		
		private string _ExtAntIzda;
		
		private string _ExtAntDcha;
		
		private string _ExtPostIzda;
		
		private string _ExtPostDcha;
		
		private string _Cuerpo;
		
		private System.DateTime _Fecha;
		
		private EntityRef<Veterinario> _Veterinario;
		
		private EntityRef<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdAnimalChanging(int value);
    partial void OnIdAnimalChanged();
    partial void OnIdVeterinarioChanging(int value);
    partial void OnIdVeterinarioChanged();
    partial void OnLugarChanging(string value);
    partial void OnLugarChanged();
    partial void OnCabezaChanging(string value);
    partial void OnCabezaChanged();
    partial void OnCuelloChanging(string value);
    partial void OnCuelloChanged();
    partial void OnExtAntIzdaChanging(string value);
    partial void OnExtAntIzdaChanged();
    partial void OnExtAntDchaChanging(string value);
    partial void OnExtAntDchaChanged();
    partial void OnExtPostIzdaChanging(string value);
    partial void OnExtPostIzdaChanged();
    partial void OnExtPostDchaChanging(string value);
    partial void OnExtPostDchaChanged();
    partial void OnCuerpoChanging(string value);
    partial void OnCuerpoChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    #endregion
		
		public Resena()
		{
			this._Veterinario = default(EntityRef<Veterinario>);
			this._Animal = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdAnimal", DbType="Int NOT NULL")]
		public int IdAnimal
		{
			get
			{
				return this._IdAnimal;
			}
			set
			{
				if ((this._IdAnimal != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAnimalChanging(value);
					this.SendPropertyChanging();
					this._IdAnimal = value;
					this.SendPropertyChanged("IdAnimal");
					this.OnIdAnimalChanged();
				}
			}
		}
		
		[Column(Storage="_IdVeterinario", DbType="Int NOT NULL")]
		public int IdVeterinario
		{
			get
			{
				return this._IdVeterinario;
			}
			set
			{
				if ((this._IdVeterinario != value))
				{
					if (this._Veterinario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdVeterinarioChanging(value);
					this.SendPropertyChanging();
					this._IdVeterinario = value;
					this.SendPropertyChanged("IdVeterinario");
					this.OnIdVeterinarioChanged();
				}
			}
		}
		
		[Column(Storage="_Lugar", DbType="VarChar(80)")]
		public string Lugar
		{
			get
			{
				return this._Lugar;
			}
			set
			{
				if ((this._Lugar != value))
				{
					this.OnLugarChanging(value);
					this.SendPropertyChanging();
					this._Lugar = value;
					this.SendPropertyChanged("Lugar");
					this.OnLugarChanged();
				}
			}
		}
		
		[Column(Storage="_Cabeza", DbType="VarChar(250)")]
		public string Cabeza
		{
			get
			{
				return this._Cabeza;
			}
			set
			{
				if ((this._Cabeza != value))
				{
					this.OnCabezaChanging(value);
					this.SendPropertyChanging();
					this._Cabeza = value;
					this.SendPropertyChanged("Cabeza");
					this.OnCabezaChanged();
				}
			}
		}
		
		[Column(Storage="_Cuello", DbType="VarChar(250)")]
		public string Cuello
		{
			get
			{
				return this._Cuello;
			}
			set
			{
				if ((this._Cuello != value))
				{
					this.OnCuelloChanging(value);
					this.SendPropertyChanging();
					this._Cuello = value;
					this.SendPropertyChanged("Cuello");
					this.OnCuelloChanged();
				}
			}
		}
		
		[Column(Storage="_ExtAntIzda", DbType="VarChar(250)")]
		public string ExtAntIzda
		{
			get
			{
				return this._ExtAntIzda;
			}
			set
			{
				if ((this._ExtAntIzda != value))
				{
					this.OnExtAntIzdaChanging(value);
					this.SendPropertyChanging();
					this._ExtAntIzda = value;
					this.SendPropertyChanged("ExtAntIzda");
					this.OnExtAntIzdaChanged();
				}
			}
		}
		
		[Column(Storage="_ExtAntDcha", DbType="VarChar(250)")]
		public string ExtAntDcha
		{
			get
			{
				return this._ExtAntDcha;
			}
			set
			{
				if ((this._ExtAntDcha != value))
				{
					this.OnExtAntDchaChanging(value);
					this.SendPropertyChanging();
					this._ExtAntDcha = value;
					this.SendPropertyChanged("ExtAntDcha");
					this.OnExtAntDchaChanged();
				}
			}
		}
		
		[Column(Storage="_ExtPostIzda", DbType="VarChar(250)")]
		public string ExtPostIzda
		{
			get
			{
				return this._ExtPostIzda;
			}
			set
			{
				if ((this._ExtPostIzda != value))
				{
					this.OnExtPostIzdaChanging(value);
					this.SendPropertyChanging();
					this._ExtPostIzda = value;
					this.SendPropertyChanged("ExtPostIzda");
					this.OnExtPostIzdaChanged();
				}
			}
		}
		
		[Column(Storage="_ExtPostDcha", DbType="VarChar(250)")]
		public string ExtPostDcha
		{
			get
			{
				return this._ExtPostDcha;
			}
			set
			{
				if ((this._ExtPostDcha != value))
				{
					this.OnExtPostDchaChanging(value);
					this.SendPropertyChanging();
					this._ExtPostDcha = value;
					this.SendPropertyChanged("ExtPostDcha");
					this.OnExtPostDchaChanged();
				}
			}
		}
		
		[Column(Storage="_Cuerpo", DbType="VarChar(250)")]
		public string Cuerpo
		{
			get
			{
				return this._Cuerpo;
			}
			set
			{
				if ((this._Cuerpo != value))
				{
					this.OnCuerpoChanging(value);
					this.SendPropertyChanging();
					this._Cuerpo = value;
					this.SendPropertyChanged("Cuerpo");
					this.OnCuerpoChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Association(Name="Veterinario_Resena", Storage="_Veterinario", ThisKey="IdVeterinario", OtherKey="Id", IsForeignKey=true)]
		public Veterinario Veterinario
		{
			get
			{
				return this._Veterinario.Entity;
			}
			set
			{
				Veterinario previousValue = this._Veterinario.Entity;
				if (((previousValue != value) 
							|| (this._Veterinario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Veterinario.Entity = null;
						previousValue.Resena.Remove(this);
					}
					this._Veterinario.Entity = value;
					if ((value != null))
					{
						value.Resena.Add(this);
						this._IdVeterinario = value.Id;
					}
					else
					{
						this._IdVeterinario = default(int);
					}
					this.SendPropertyChanged("Veterinario");
				}
			}
		}
		
		[Association(Name="Animal_Resena", Storage="_Animal", ThisKey="IdAnimal", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.Resena.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.Resena.Add(this);
						this._IdAnimal = value.Id;
					}
					else
					{
						this._IdAnimal = default(int);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Menu")]
	public partial class Menu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _IdModulo;
		
		private System.Nullable<int> _IdMenuSuperior;
		
		private int _Orden;
		
		private string _Texto;
		
		private bool _Visible;
		
		private EntitySet<Menu> _Menu2;
		
		private EntityRef<Menu> _Menu1;
		
		private EntityRef<Modulo> _Modulo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdModuloChanging(System.Nullable<int> value);
    partial void OnIdModuloChanged();
    partial void OnIdMenuSuperiorChanging(System.Nullable<int> value);
    partial void OnIdMenuSuperiorChanged();
    partial void OnOrdenChanging(int value);
    partial void OnOrdenChanged();
    partial void OnTextoChanging(string value);
    partial void OnTextoChanged();
    partial void OnVisibleChanging(bool value);
    partial void OnVisibleChanged();
    #endregion
		
		public Menu()
		{
			this._Menu2 = new EntitySet<Menu>(new Action<Menu>(this.attach_Menu2), new Action<Menu>(this.detach_Menu2));
			this._Menu1 = default(EntityRef<Menu>);
			this._Modulo = default(EntityRef<Modulo>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdModulo", DbType="Int")]
		public System.Nullable<int> IdModulo
		{
			get
			{
				return this._IdModulo;
			}
			set
			{
				if ((this._IdModulo != value))
				{
					if (this._Modulo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdModuloChanging(value);
					this.SendPropertyChanging();
					this._IdModulo = value;
					this.SendPropertyChanged("IdModulo");
					this.OnIdModuloChanged();
				}
			}
		}
		
		[Column(Storage="_IdMenuSuperior", DbType="Int")]
		public System.Nullable<int> IdMenuSuperior
		{
			get
			{
				return this._IdMenuSuperior;
			}
			set
			{
				if ((this._IdMenuSuperior != value))
				{
					if (this._Menu1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdMenuSuperiorChanging(value);
					this.SendPropertyChanging();
					this._IdMenuSuperior = value;
					this.SendPropertyChanged("IdMenuSuperior");
					this.OnIdMenuSuperiorChanged();
				}
			}
		}
		
		[Column(Storage="_Orden", DbType="Int NOT NULL")]
		public int Orden
		{
			get
			{
				return this._Orden;
			}
			set
			{
				if ((this._Orden != value))
				{
					this.OnOrdenChanging(value);
					this.SendPropertyChanging();
					this._Orden = value;
					this.SendPropertyChanged("Orden");
					this.OnOrdenChanged();
				}
			}
		}
		
		[Column(Storage="_Texto", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Texto
		{
			get
			{
				return this._Texto;
			}
			set
			{
				if ((this._Texto != value))
				{
					this.OnTextoChanging(value);
					this.SendPropertyChanging();
					this._Texto = value;
					this.SendPropertyChanged("Texto");
					this.OnTextoChanged();
				}
			}
		}
		
		[Column(Storage="_Visible", DbType="Bit NOT NULL")]
		public bool Visible
		{
			get
			{
				return this._Visible;
			}
			set
			{
				if ((this._Visible != value))
				{
					this.OnVisibleChanging(value);
					this.SendPropertyChanging();
					this._Visible = value;
					this.SendPropertyChanged("Visible");
					this.OnVisibleChanged();
				}
			}
		}
		
		[Association(Name="Menu_Menu", Storage="_Menu2", ThisKey="Id", OtherKey="IdMenuSuperior")]
		public EntitySet<Menu> Menu2
		{
			get
			{
				return this._Menu2;
			}
			set
			{
				this._Menu2.Assign(value);
			}
		}
		
		[Association(Name="Menu_Menu", Storage="_Menu1", ThisKey="IdMenuSuperior", OtherKey="Id", IsForeignKey=true)]
		public Menu Menu1
		{
			get
			{
				return this._Menu1.Entity;
			}
			set
			{
				Menu previousValue = this._Menu1.Entity;
				if (((previousValue != value) 
							|| (this._Menu1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Menu1.Entity = null;
						previousValue.Menu2.Remove(this);
					}
					this._Menu1.Entity = value;
					if ((value != null))
					{
						value.Menu2.Add(this);
						this._IdMenuSuperior = value.Id;
					}
					else
					{
						this._IdMenuSuperior = default(Nullable<int>);
					}
					this.SendPropertyChanged("Menu1");
				}
			}
		}
		
		[Association(Name="Modulo_Menu", Storage="_Modulo", ThisKey="IdModulo", OtherKey="Id", IsForeignKey=true)]
		public Modulo Modulo
		{
			get
			{
				return this._Modulo.Entity;
			}
			set
			{
				Modulo previousValue = this._Modulo.Entity;
				if (((previousValue != value) 
							|| (this._Modulo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Modulo.Entity = null;
						previousValue.Menu.Remove(this);
					}
					this._Modulo.Entity = value;
					if ((value != null))
					{
						value.Menu.Add(this);
						this._IdModulo = value.Id;
					}
					else
					{
						this._IdModulo = default(Nullable<int>);
					}
					this.SendPropertyChanged("Modulo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Menu2(Menu entity)
		{
			this.SendPropertyChanging();
			entity.Menu1 = this;
		}
		
		private void detach_Menu2(Menu entity)
		{
			this.SendPropertyChanging();
			entity.Menu1 = null;
		}
	}
	
	[Table(Name="dbo.Proceso")]
	public partial class Proceso : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _IdModulo;
		
		private string _Nombre;
		
		private string _Formulario;
		
		private System.Nullable<bool> _ValorBoolInicial;
		
		private EntityRef<Modulo> _Modulo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdModuloChanging(System.Nullable<int> value);
    partial void OnIdModuloChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnFormularioChanging(string value);
    partial void OnFormularioChanged();
    partial void OnValorBoolInicialChanging(System.Nullable<bool> value);
    partial void OnValorBoolInicialChanged();
    #endregion
		
		public Proceso()
		{
			this._Modulo = default(EntityRef<Modulo>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdModulo", DbType="Int")]
		public System.Nullable<int> IdModulo
		{
			get
			{
				return this._IdModulo;
			}
			set
			{
				if ((this._IdModulo != value))
				{
					if (this._Modulo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdModuloChanging(value);
					this.SendPropertyChanging();
					this._IdModulo = value;
					this.SendPropertyChanged("IdModulo");
					this.OnIdModuloChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Column(Storage="_Formulario", DbType="VarChar(200)")]
		public string Formulario
		{
			get
			{
				return this._Formulario;
			}
			set
			{
				if ((this._Formulario != value))
				{
					this.OnFormularioChanging(value);
					this.SendPropertyChanging();
					this._Formulario = value;
					this.SendPropertyChanged("Formulario");
					this.OnFormularioChanged();
				}
			}
		}
		
		[Column(Storage="_ValorBoolInicial", DbType="Bit")]
		public System.Nullable<bool> ValorBoolInicial
		{
			get
			{
				return this._ValorBoolInicial;
			}
			set
			{
				if ((this._ValorBoolInicial != value))
				{
					this.OnValorBoolInicialChanging(value);
					this.SendPropertyChanging();
					this._ValorBoolInicial = value;
					this.SendPropertyChanged("ValorBoolInicial");
					this.OnValorBoolInicialChanged();
				}
			}
		}
		
		[Association(Name="Modulo_Proceso", Storage="_Modulo", ThisKey="IdModulo", OtherKey="Id", IsForeignKey=true)]
		public Modulo Modulo
		{
			get
			{
				return this._Modulo.Entity;
			}
			set
			{
				Modulo previousValue = this._Modulo.Entity;
				if (((previousValue != value) 
							|| (this._Modulo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Modulo.Entity = null;
						previousValue.Proceso.Remove(this);
					}
					this._Modulo.Entity = value;
					if ((value != null))
					{
						value.Proceso.Add(this);
						this._IdModulo = value.Id;
					}
					else
					{
						this._IdModulo = default(Nullable<int>);
					}
					this.SendPropertyChanged("Modulo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TipoPersonal")]
	public partial class TipoPersonal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private EntitySet<Veterinario> _Veterinario;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public TipoPersonal()
		{
			this._Veterinario = new EntitySet<Veterinario>(new Action<Veterinario>(this.attach_Veterinario), new Action<Veterinario>(this.detach_Veterinario));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="TipoPersonal_Veterinario", Storage="_Veterinario", ThisKey="Id", OtherKey="IdTipo")]
		public EntitySet<Veterinario> Veterinario
		{
			get
			{
				return this._Veterinario;
			}
			set
			{
				this._Veterinario.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Veterinario(Veterinario entity)
		{
			this.SendPropertyChanging();
			entity.TipoPersonal = this;
		}
		
		private void detach_Veterinario(Veterinario entity)
		{
			this.SendPropertyChanging();
			entity.TipoPersonal = null;
		}
	}
	
	[Table(Name="dbo.TipoCubricion")]
	public partial class TipoCubricion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private EntitySet<Cubricion> _Cubricion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public TipoCubricion()
		{
			this._Cubricion = new EntitySet<Cubricion>(new Action<Cubricion>(this.attach_Cubricion), new Action<Cubricion>(this.detach_Cubricion));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="TipoCubricion_Cubricion", Storage="_Cubricion", ThisKey="Id", OtherKey="IdTipo")]
		public EntitySet<Cubricion> Cubricion
		{
			get
			{
				return this._Cubricion;
			}
			set
			{
				this._Cubricion.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cubricion(Cubricion entity)
		{
			this.SendPropertyChanging();
			entity.TipoCubricion = this;
		}
		
		private void detach_Cubricion(Cubricion entity)
		{
			this.SendPropertyChanging();
			entity.TipoCubricion = null;
		}
	}
	
	[Table(Name="dbo.TipoParto")]
	public partial class TipoParto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private System.Nullable<int> _Crias;
		
		private System.Nullable<bool> _Sistema;
		
		private EntitySet<Parto> _Parto;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    partial void OnCriasChanging(System.Nullable<int> value);
    partial void OnCriasChanged();
    partial void OnSistemaChanging(System.Nullable<bool> value);
    partial void OnSistemaChanged();
    #endregion
		
		public TipoParto()
		{
			this._Parto = new EntitySet<Parto>(new Action<Parto>(this.attach_Parto), new Action<Parto>(this.detach_Parto));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Column(Storage="_Crias", DbType="Int")]
		public System.Nullable<int> Crias
		{
			get
			{
				return this._Crias;
			}
			set
			{
				if ((this._Crias != value))
				{
					this.OnCriasChanging(value);
					this.SendPropertyChanging();
					this._Crias = value;
					this.SendPropertyChanged("Crias");
					this.OnCriasChanged();
				}
			}
		}
		
		[Column(Storage="_Sistema", DbType="Bit")]
		public System.Nullable<bool> Sistema
		{
			get
			{
				return this._Sistema;
			}
			set
			{
				if ((this._Sistema != value))
				{
					this.OnSistemaChanging(value);
					this.SendPropertyChanging();
					this._Sistema = value;
					this.SendPropertyChanged("Sistema");
					this.OnSistemaChanged();
				}
			}
		}
		
		[Association(Name="TipoParto_Parto", Storage="_Parto", ThisKey="Id", OtherKey="IdTipo")]
		public EntitySet<Parto> Parto
		{
			get
			{
				return this._Parto;
			}
			set
			{
				this._Parto.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Parto(Parto entity)
		{
			this.SendPropertyChanging();
			entity.TipoParto = this;
		}
		
		private void detach_Parto(Parto entity)
		{
			this.SendPropertyChanging();
			entity.TipoParto = null;
		}
	}
	
	[Table(Name="dbo.TipoContacto")]
	public partial class TipoContacto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private System.Nullable<bool> _Sistema;
		
		private EntitySet<Contacto> _Contacto;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    partial void OnSistemaChanging(System.Nullable<bool> value);
    partial void OnSistemaChanged();
    #endregion
		
		public TipoContacto()
		{
			this._Contacto = new EntitySet<Contacto>(new Action<Contacto>(this.attach_Contacto), new Action<Contacto>(this.detach_Contacto));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Column(Storage="_Sistema", DbType="Bit")]
		public System.Nullable<bool> Sistema
		{
			get
			{
				return this._Sistema;
			}
			set
			{
				if ((this._Sistema != value))
				{
					this.OnSistemaChanging(value);
					this.SendPropertyChanging();
					this._Sistema = value;
					this.SendPropertyChanged("Sistema");
					this.OnSistemaChanged();
				}
			}
		}
		
		[Association(Name="TipoContacto_Contacto", Storage="_Contacto", ThisKey="Id", OtherKey="IdTipo")]
		public EntitySet<Contacto> Contacto
		{
			get
			{
				return this._Contacto;
			}
			set
			{
				this._Contacto.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contacto(Contacto entity)
		{
			this.SendPropertyChanging();
			entity.TipoContacto = this;
		}
		
		private void detach_Contacto(Contacto entity)
		{
			this.SendPropertyChanging();
			entity.TipoContacto = null;
		}
	}
	
	[Table(Name="dbo.Proveedor")]
	public partial class Proveedor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nombre;
		
		private string _Direccion;
		
		private string _CP;
		
		private string _DNI;
		
		private string _Telefono;
		
		private string _Movil;
		
		private string _Email;
		
		private System.DateTime _FechaAlta;
		
		private System.Nullable<System.DateTime> _FechaBaja;
		
		private EntitySet<ExpPro> _ExpPro;
		
		private EntitySet<Compra> _Compra;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnDireccionChanging(string value);
    partial void OnDireccionChanged();
    partial void OnCPChanging(string value);
    partial void OnCPChanged();
    partial void OnDNIChanging(string value);
    partial void OnDNIChanged();
    partial void OnTelefonoChanging(string value);
    partial void OnTelefonoChanged();
    partial void OnMovilChanging(string value);
    partial void OnMovilChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFechaAltaChanging(System.DateTime value);
    partial void OnFechaAltaChanged();
    partial void OnFechaBajaChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaBajaChanged();
    #endregion
		
		public Proveedor()
		{
			this._ExpPro = new EntitySet<ExpPro>(new Action<ExpPro>(this.attach_ExpPro), new Action<ExpPro>(this.detach_ExpPro));
			this._Compra = new EntitySet<Compra>(new Action<Compra>(this.attach_Compra), new Action<Compra>(this.detach_Compra));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Column(Storage="_Direccion", DbType="VarChar(100)")]
		public string Direccion
		{
			get
			{
				return this._Direccion;
			}
			set
			{
				if ((this._Direccion != value))
				{
					this.OnDireccionChanging(value);
					this.SendPropertyChanging();
					this._Direccion = value;
					this.SendPropertyChanged("Direccion");
					this.OnDireccionChanged();
				}
			}
		}
		
		[Column(Storage="_CP", DbType="VarChar(5)")]
		public string CP
		{
			get
			{
				return this._CP;
			}
			set
			{
				if ((this._CP != value))
				{
					this.OnCPChanging(value);
					this.SendPropertyChanging();
					this._CP = value;
					this.SendPropertyChanged("CP");
					this.OnCPChanged();
				}
			}
		}
		
		[Column(Storage="_DNI", DbType="VarChar(9) NOT NULL", CanBeNull=false)]
		public string DNI
		{
			get
			{
				return this._DNI;
			}
			set
			{
				if ((this._DNI != value))
				{
					this.OnDNIChanging(value);
					this.SendPropertyChanging();
					this._DNI = value;
					this.SendPropertyChanged("DNI");
					this.OnDNIChanged();
				}
			}
		}
		
		[Column(Storage="_Telefono", DbType="VarChar(9)")]
		public string Telefono
		{
			get
			{
				return this._Telefono;
			}
			set
			{
				if ((this._Telefono != value))
				{
					this.OnTelefonoChanging(value);
					this.SendPropertyChanging();
					this._Telefono = value;
					this.SendPropertyChanged("Telefono");
					this.OnTelefonoChanged();
				}
			}
		}
		
		[Column(Storage="_Movil", DbType="VarChar(9)")]
		public string Movil
		{
			get
			{
				return this._Movil;
			}
			set
			{
				if ((this._Movil != value))
				{
					this.OnMovilChanging(value);
					this.SendPropertyChanging();
					this._Movil = value;
					this.SendPropertyChanged("Movil");
					this.OnMovilChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(255)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_FechaAlta", DbType="DateTime NOT NULL")]
		public System.DateTime FechaAlta
		{
			get
			{
				return this._FechaAlta;
			}
			set
			{
				if ((this._FechaAlta != value))
				{
					this.OnFechaAltaChanging(value);
					this.SendPropertyChanging();
					this._FechaAlta = value;
					this.SendPropertyChanged("FechaAlta");
					this.OnFechaAltaChanged();
				}
			}
		}
		
		[Column(Storage="_FechaBaja", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaBaja
		{
			get
			{
				return this._FechaBaja;
			}
			set
			{
				if ((this._FechaBaja != value))
				{
					this.OnFechaBajaChanging(value);
					this.SendPropertyChanging();
					this._FechaBaja = value;
					this.SendPropertyChanged("FechaBaja");
					this.OnFechaBajaChanged();
				}
			}
		}
		
		[Association(Name="Proveedor_ExpPro", Storage="_ExpPro", ThisKey="Id", OtherKey="IdProveedor")]
		public EntitySet<ExpPro> ExpPro
		{
			get
			{
				return this._ExpPro;
			}
			set
			{
				this._ExpPro.Assign(value);
			}
		}
		
		[Association(Name="Proveedor_Compra", Storage="_Compra", ThisKey="Id", OtherKey="IdProveedor")]
		public EntitySet<Compra> Compra
		{
			get
			{
				return this._Compra;
			}
			set
			{
				this._Compra.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExpPro(ExpPro entity)
		{
			this.SendPropertyChanging();
			entity.Proveedor = this;
		}
		
		private void detach_ExpPro(ExpPro entity)
		{
			this.SendPropertyChanging();
			entity.Proveedor = null;
		}
		
		private void attach_Compra(Compra entity)
		{
			this.SendPropertyChanging();
			entity.Proveedor = this;
		}
		
		private void detach_Compra(Compra entity)
		{
			this.SendPropertyChanging();
			entity.Proveedor = null;
		}
	}
	
	[Table(Name="dbo.Cliente")]
	public partial class Cliente : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nombre;
		
		private string _Direccion;
		
		private string _CP;
		
		private string _DNI;
		
		private string _Telefono;
		
		private string _Movil;
		
		private string _Email;
		
		private System.DateTime _FechaAlta;
		
		private System.Nullable<System.DateTime> _FechaBaja;
		
		private EntitySet<ExpCli> _ExpCli;
		
		private EntitySet<Venta> _Venta;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnDireccionChanging(string value);
    partial void OnDireccionChanged();
    partial void OnCPChanging(string value);
    partial void OnCPChanged();
    partial void OnDNIChanging(string value);
    partial void OnDNIChanged();
    partial void OnTelefonoChanging(string value);
    partial void OnTelefonoChanged();
    partial void OnMovilChanging(string value);
    partial void OnMovilChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFechaAltaChanging(System.DateTime value);
    partial void OnFechaAltaChanged();
    partial void OnFechaBajaChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaBajaChanged();
    #endregion
		
		public Cliente()
		{
			this._ExpCli = new EntitySet<ExpCli>(new Action<ExpCli>(this.attach_ExpCli), new Action<ExpCli>(this.detach_ExpCli));
			this._Venta = new EntitySet<Venta>(new Action<Venta>(this.attach_Venta), new Action<Venta>(this.detach_Venta));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Column(Storage="_Direccion", DbType="VarChar(100)")]
		public string Direccion
		{
			get
			{
				return this._Direccion;
			}
			set
			{
				if ((this._Direccion != value))
				{
					this.OnDireccionChanging(value);
					this.SendPropertyChanging();
					this._Direccion = value;
					this.SendPropertyChanged("Direccion");
					this.OnDireccionChanged();
				}
			}
		}
		
		[Column(Storage="_CP", DbType="VarChar(5)")]
		public string CP
		{
			get
			{
				return this._CP;
			}
			set
			{
				if ((this._CP != value))
				{
					this.OnCPChanging(value);
					this.SendPropertyChanging();
					this._CP = value;
					this.SendPropertyChanged("CP");
					this.OnCPChanged();
				}
			}
		}
		
		[Column(Storage="_DNI", DbType="VarChar(9) NOT NULL", CanBeNull=false)]
		public string DNI
		{
			get
			{
				return this._DNI;
			}
			set
			{
				if ((this._DNI != value))
				{
					this.OnDNIChanging(value);
					this.SendPropertyChanging();
					this._DNI = value;
					this.SendPropertyChanged("DNI");
					this.OnDNIChanged();
				}
			}
		}
		
		[Column(Storage="_Telefono", DbType="VarChar(9)")]
		public string Telefono
		{
			get
			{
				return this._Telefono;
			}
			set
			{
				if ((this._Telefono != value))
				{
					this.OnTelefonoChanging(value);
					this.SendPropertyChanging();
					this._Telefono = value;
					this.SendPropertyChanged("Telefono");
					this.OnTelefonoChanged();
				}
			}
		}
		
		[Column(Storage="_Movil", DbType="VarChar(9)")]
		public string Movil
		{
			get
			{
				return this._Movil;
			}
			set
			{
				if ((this._Movil != value))
				{
					this.OnMovilChanging(value);
					this.SendPropertyChanging();
					this._Movil = value;
					this.SendPropertyChanged("Movil");
					this.OnMovilChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(255)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_FechaAlta", DbType="DateTime NOT NULL")]
		public System.DateTime FechaAlta
		{
			get
			{
				return this._FechaAlta;
			}
			set
			{
				if ((this._FechaAlta != value))
				{
					this.OnFechaAltaChanging(value);
					this.SendPropertyChanging();
					this._FechaAlta = value;
					this.SendPropertyChanged("FechaAlta");
					this.OnFechaAltaChanged();
				}
			}
		}
		
		[Column(Storage="_FechaBaja", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaBaja
		{
			get
			{
				return this._FechaBaja;
			}
			set
			{
				if ((this._FechaBaja != value))
				{
					this.OnFechaBajaChanging(value);
					this.SendPropertyChanging();
					this._FechaBaja = value;
					this.SendPropertyChanged("FechaBaja");
					this.OnFechaBajaChanged();
				}
			}
		}
		
		[Association(Name="Cliente_ExpCli", Storage="_ExpCli", ThisKey="Id", OtherKey="IdCliente")]
		public EntitySet<ExpCli> ExpCli
		{
			get
			{
				return this._ExpCli;
			}
			set
			{
				this._ExpCli.Assign(value);
			}
		}
		
		[Association(Name="Cliente_Venta", Storage="_Venta", ThisKey="Id", OtherKey="IdCliente")]
		public EntitySet<Venta> Venta
		{
			get
			{
				return this._Venta;
			}
			set
			{
				this._Venta.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExpCli(ExpCli entity)
		{
			this.SendPropertyChanging();
			entity.Cliente = this;
		}
		
		private void detach_ExpCli(ExpCli entity)
		{
			this.SendPropertyChanging();
			entity.Cliente = null;
		}
		
		private void attach_Venta(Venta entity)
		{
			this.SendPropertyChanging();
			entity.Cliente = this;
		}
		
		private void detach_Venta(Venta entity)
		{
			this.SendPropertyChanging();
			entity.Cliente = null;
		}
	}
	
	[Table(Name="dbo.Contacto")]
	public partial class Contacto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdExplotacion;
		
		private System.Nullable<int> _IdTipo;
		
		private string _Nombre;
		
		private string _Direccion;
		
		private string _Telefono;
		
		private string _Movil;
		
		private string _Email;
		
		private string _Automatico;
		
		private string _Observaciones;
		
		private EntitySet<Cita> _Cita;
		
		private EntityRef<TipoContacto> _TipoContacto;
		
		private EntityRef<Explotacion> _Explotacion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdExplotacionChanging(int value);
    partial void OnIdExplotacionChanged();
    partial void OnIdTipoChanging(System.Nullable<int> value);
    partial void OnIdTipoChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnDireccionChanging(string value);
    partial void OnDireccionChanged();
    partial void OnTelefonoChanging(string value);
    partial void OnTelefonoChanged();
    partial void OnMovilChanging(string value);
    partial void OnMovilChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAutomaticoChanging(string value);
    partial void OnAutomaticoChanged();
    partial void OnObservacionesChanging(string value);
    partial void OnObservacionesChanged();
    #endregion
		
		public Contacto()
		{
			this._Cita = new EntitySet<Cita>(new Action<Cita>(this.attach_Cita), new Action<Cita>(this.detach_Cita));
			this._TipoContacto = default(EntityRef<TipoContacto>);
			this._Explotacion = default(EntityRef<Explotacion>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdExplotacion", DbType="Int NOT NULL")]
		public int IdExplotacion
		{
			get
			{
				return this._IdExplotacion;
			}
			set
			{
				if ((this._IdExplotacion != value))
				{
					if (this._Explotacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdExplotacionChanging(value);
					this.SendPropertyChanging();
					this._IdExplotacion = value;
					this.SendPropertyChanged("IdExplotacion");
					this.OnIdExplotacionChanged();
				}
			}
		}
		
		[Column(Storage="_IdTipo", DbType="Int")]
		public System.Nullable<int> IdTipo
		{
			get
			{
				return this._IdTipo;
			}
			set
			{
				if ((this._IdTipo != value))
				{
					if (this._TipoContacto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTipoChanging(value);
					this.SendPropertyChanging();
					this._IdTipo = value;
					this.SendPropertyChanged("IdTipo");
					this.OnIdTipoChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Column(Storage="_Direccion", DbType="VarChar(100)")]
		public string Direccion
		{
			get
			{
				return this._Direccion;
			}
			set
			{
				if ((this._Direccion != value))
				{
					this.OnDireccionChanging(value);
					this.SendPropertyChanging();
					this._Direccion = value;
					this.SendPropertyChanged("Direccion");
					this.OnDireccionChanged();
				}
			}
		}
		
		[Column(Storage="_Telefono", DbType="VarChar(9)")]
		public string Telefono
		{
			get
			{
				return this._Telefono;
			}
			set
			{
				if ((this._Telefono != value))
				{
					this.OnTelefonoChanging(value);
					this.SendPropertyChanging();
					this._Telefono = value;
					this.SendPropertyChanged("Telefono");
					this.OnTelefonoChanged();
				}
			}
		}
		
		[Column(Storage="_Movil", DbType="VarChar(9)")]
		public string Movil
		{
			get
			{
				return this._Movil;
			}
			set
			{
				if ((this._Movil != value))
				{
					this.OnMovilChanging(value);
					this.SendPropertyChanging();
					this._Movil = value;
					this.SendPropertyChanged("Movil");
					this.OnMovilChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(255)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Automatico", DbType="VarChar(12)")]
		public string Automatico
		{
			get
			{
				return this._Automatico;
			}
			set
			{
				if ((this._Automatico != value))
				{
					this.OnAutomaticoChanging(value);
					this.SendPropertyChanging();
					this._Automatico = value;
					this.SendPropertyChanged("Automatico");
					this.OnAutomaticoChanged();
				}
			}
		}
		
		[Column(Storage="_Observaciones", DbType="VarChar(1000)")]
		public string Observaciones
		{
			get
			{
				return this._Observaciones;
			}
			set
			{
				if ((this._Observaciones != value))
				{
					this.OnObservacionesChanging(value);
					this.SendPropertyChanging();
					this._Observaciones = value;
					this.SendPropertyChanged("Observaciones");
					this.OnObservacionesChanged();
				}
			}
		}
		
		[Association(Name="Contacto_Cita", Storage="_Cita", ThisKey="Id", OtherKey="IdContacto")]
		public EntitySet<Cita> Cita
		{
			get
			{
				return this._Cita;
			}
			set
			{
				this._Cita.Assign(value);
			}
		}
		
		[Association(Name="TipoContacto_Contacto", Storage="_TipoContacto", ThisKey="IdTipo", OtherKey="Id", IsForeignKey=true)]
		public TipoContacto TipoContacto
		{
			get
			{
				return this._TipoContacto.Entity;
			}
			set
			{
				TipoContacto previousValue = this._TipoContacto.Entity;
				if (((previousValue != value) 
							|| (this._TipoContacto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoContacto.Entity = null;
						previousValue.Contacto.Remove(this);
					}
					this._TipoContacto.Entity = value;
					if ((value != null))
					{
						value.Contacto.Add(this);
						this._IdTipo = value.Id;
					}
					else
					{
						this._IdTipo = default(Nullable<int>);
					}
					this.SendPropertyChanged("TipoContacto");
				}
			}
		}
		
		[Association(Name="Explotacion_Contacto", Storage="_Explotacion", ThisKey="IdExplotacion", OtherKey="Id", IsForeignKey=true)]
		public Explotacion Explotacion
		{
			get
			{
				return this._Explotacion.Entity;
			}
			set
			{
				Explotacion previousValue = this._Explotacion.Entity;
				if (((previousValue != value) 
							|| (this._Explotacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Explotacion.Entity = null;
						previousValue.Contacto.Remove(this);
					}
					this._Explotacion.Entity = value;
					if ((value != null))
					{
						value.Contacto.Add(this);
						this._IdExplotacion = value.Id;
					}
					else
					{
						this._IdExplotacion = default(int);
					}
					this.SendPropertyChanged("Explotacion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cita(Cita entity)
		{
			this.SendPropertyChanging();
			entity.Contacto = this;
		}
		
		private void detach_Cita(Cita entity)
		{
			this.SendPropertyChanging();
			entity.Contacto = null;
		}
	}
	
	[Table(Name="dbo.TratHigiene")]
	public partial class TratHigiene : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdPlan;
		
		private int _IdExplotacion;
		
		private string _Detalle;
		
		private System.DateTime _FechaInicio;
		
		private System.Nullable<System.DateTime> _FechaFin;
		
		private EntitySet<ProHig> _ProHig;
		
		private EntityRef<PlanHigiene> _PlanHigiene;
		
		private EntityRef<Explotacion> _Explotacion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdPlanChanging(int value);
    partial void OnIdPlanChanged();
    partial void OnIdExplotacionChanging(int value);
    partial void OnIdExplotacionChanged();
    partial void OnDetalleChanging(string value);
    partial void OnDetalleChanged();
    partial void OnFechaInicioChanging(System.DateTime value);
    partial void OnFechaInicioChanged();
    partial void OnFechaFinChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaFinChanged();
    #endregion
		
		public TratHigiene()
		{
			this._ProHig = new EntitySet<ProHig>(new Action<ProHig>(this.attach_ProHig), new Action<ProHig>(this.detach_ProHig));
			this._PlanHigiene = default(EntityRef<PlanHigiene>);
			this._Explotacion = default(EntityRef<Explotacion>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdPlan", DbType="Int NOT NULL")]
		public int IdPlan
		{
			get
			{
				return this._IdPlan;
			}
			set
			{
				if ((this._IdPlan != value))
				{
					if (this._PlanHigiene.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPlanChanging(value);
					this.SendPropertyChanging();
					this._IdPlan = value;
					this.SendPropertyChanged("IdPlan");
					this.OnIdPlanChanged();
				}
			}
		}
		
		[Column(Storage="_IdExplotacion", DbType="Int NOT NULL")]
		public int IdExplotacion
		{
			get
			{
				return this._IdExplotacion;
			}
			set
			{
				if ((this._IdExplotacion != value))
				{
					if (this._Explotacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdExplotacionChanging(value);
					this.SendPropertyChanging();
					this._IdExplotacion = value;
					this.SendPropertyChanged("IdExplotacion");
					this.OnIdExplotacionChanged();
				}
			}
		}
		
		[Column(Storage="_Detalle", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Detalle
		{
			get
			{
				return this._Detalle;
			}
			set
			{
				if ((this._Detalle != value))
				{
					this.OnDetalleChanging(value);
					this.SendPropertyChanging();
					this._Detalle = value;
					this.SendPropertyChanged("Detalle");
					this.OnDetalleChanged();
				}
			}
		}
		
		[Column(Storage="_FechaInicio", DbType="DateTime NOT NULL")]
		public System.DateTime FechaInicio
		{
			get
			{
				return this._FechaInicio;
			}
			set
			{
				if ((this._FechaInicio != value))
				{
					this.OnFechaInicioChanging(value);
					this.SendPropertyChanging();
					this._FechaInicio = value;
					this.SendPropertyChanged("FechaInicio");
					this.OnFechaInicioChanged();
				}
			}
		}
		
		[Column(Storage="_FechaFin", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaFin
		{
			get
			{
				return this._FechaFin;
			}
			set
			{
				if ((this._FechaFin != value))
				{
					this.OnFechaFinChanging(value);
					this.SendPropertyChanging();
					this._FechaFin = value;
					this.SendPropertyChanged("FechaFin");
					this.OnFechaFinChanged();
				}
			}
		}
		
		[Association(Name="TratHigiene_ProHig", Storage="_ProHig", ThisKey="Id", OtherKey="IdTratHigiene")]
		public EntitySet<ProHig> ProHig
		{
			get
			{
				return this._ProHig;
			}
			set
			{
				this._ProHig.Assign(value);
			}
		}
		
		[Association(Name="PlanHigiene_TratHigiene", Storage="_PlanHigiene", ThisKey="IdPlan", OtherKey="Id", IsForeignKey=true)]
		public PlanHigiene PlanHigiene
		{
			get
			{
				return this._PlanHigiene.Entity;
			}
			set
			{
				PlanHigiene previousValue = this._PlanHigiene.Entity;
				if (((previousValue != value) 
							|| (this._PlanHigiene.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlanHigiene.Entity = null;
						previousValue.TratHigiene.Remove(this);
					}
					this._PlanHigiene.Entity = value;
					if ((value != null))
					{
						value.TratHigiene.Add(this);
						this._IdPlan = value.Id;
					}
					else
					{
						this._IdPlan = default(int);
					}
					this.SendPropertyChanged("PlanHigiene");
				}
			}
		}
		
		[Association(Name="Explotacion_TratHigiene", Storage="_Explotacion", ThisKey="IdExplotacion", OtherKey="Id", IsForeignKey=true)]
		public Explotacion Explotacion
		{
			get
			{
				return this._Explotacion.Entity;
			}
			set
			{
				Explotacion previousValue = this._Explotacion.Entity;
				if (((previousValue != value) 
							|| (this._Explotacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Explotacion.Entity = null;
						previousValue.TratHigiene.Remove(this);
					}
					this._Explotacion.Entity = value;
					if ((value != null))
					{
						value.TratHigiene.Add(this);
						this._IdExplotacion = value.Id;
					}
					else
					{
						this._IdExplotacion = default(int);
					}
					this.SendPropertyChanged("Explotacion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProHig(ProHig entity)
		{
			this.SendPropertyChanging();
			entity.TratHigiene = this;
		}
		
		private void detach_ProHig(ProHig entity)
		{
			this.SendPropertyChanging();
			entity.TratHigiene = null;
		}
	}
	
	[Table(Name="dbo.PlanHigiene")]
	public partial class PlanHigiene : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private EntitySet<TratHigiene> _TratHigiene;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public PlanHigiene()
		{
			this._TratHigiene = new EntitySet<TratHigiene>(new Action<TratHigiene>(this.attach_TratHigiene), new Action<TratHigiene>(this.detach_TratHigiene));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="PlanHigiene_TratHigiene", Storage="_TratHigiene", ThisKey="Id", OtherKey="IdPlan")]
		public EntitySet<TratHigiene> TratHigiene
		{
			get
			{
				return this._TratHigiene;
			}
			set
			{
				this._TratHigiene.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TratHigiene(TratHigiene entity)
		{
			this.SendPropertyChanging();
			entity.PlanHigiene = this;
		}
		
		private void detach_TratHigiene(TratHigiene entity)
		{
			this.SendPropertyChanging();
			entity.PlanHigiene = null;
		}
	}
	
	[Table(Name="dbo.ProHig")]
	public partial class ProHig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdTratHigiene;
		
		private int _IdProducto;
		
		private decimal _Cantidad;
		
		private EntitySet<Gasto> _Gasto;
		
		private EntityRef<Producto> _Producto;
		
		private EntityRef<TratHigiene> _TratHigiene;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdTratHigieneChanging(int value);
    partial void OnIdTratHigieneChanged();
    partial void OnIdProductoChanging(int value);
    partial void OnIdProductoChanged();
    partial void OnCantidadChanging(decimal value);
    partial void OnCantidadChanged();
    #endregion
		
		public ProHig()
		{
			this._Gasto = new EntitySet<Gasto>(new Action<Gasto>(this.attach_Gasto), new Action<Gasto>(this.detach_Gasto));
			this._Producto = default(EntityRef<Producto>);
			this._TratHigiene = default(EntityRef<TratHigiene>);
			OnCreated();
		}
		
		[Column(Storage="_IdTratHigiene", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdTratHigiene
		{
			get
			{
				return this._IdTratHigiene;
			}
			set
			{
				if ((this._IdTratHigiene != value))
				{
					if (this._TratHigiene.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTratHigieneChanging(value);
					this.SendPropertyChanging();
					this._IdTratHigiene = value;
					this.SendPropertyChanged("IdTratHigiene");
					this.OnIdTratHigieneChanged();
				}
			}
		}
		
		[Column(Storage="_IdProducto", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdProducto
		{
			get
			{
				return this._IdProducto;
			}
			set
			{
				if ((this._IdProducto != value))
				{
					if (this._Producto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdProductoChanging(value);
					this.SendPropertyChanging();
					this._IdProducto = value;
					this.SendPropertyChanged("IdProducto");
					this.OnIdProductoChanged();
				}
			}
		}
		
		[Column(Storage="_Cantidad", DbType="Decimal(6,2) NOT NULL")]
		public decimal Cantidad
		{
			get
			{
				return this._Cantidad;
			}
			set
			{
				if ((this._Cantidad != value))
				{
					this.OnCantidadChanging(value);
					this.SendPropertyChanging();
					this._Cantidad = value;
					this.SendPropertyChanged("Cantidad");
					this.OnCantidadChanged();
				}
			}
		}
		
		[Association(Name="ProHig_Gasto", Storage="_Gasto", ThisKey="IdTratHigiene,IdProducto", OtherKey="IdTratHigiene,IdProducto")]
		public EntitySet<Gasto> Gasto
		{
			get
			{
				return this._Gasto;
			}
			set
			{
				this._Gasto.Assign(value);
			}
		}
		
		[Association(Name="Producto_ProHig", Storage="_Producto", ThisKey="IdProducto", OtherKey="Id", IsForeignKey=true)]
		public Producto Producto
		{
			get
			{
				return this._Producto.Entity;
			}
			set
			{
				Producto previousValue = this._Producto.Entity;
				if (((previousValue != value) 
							|| (this._Producto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Producto.Entity = null;
						previousValue.ProHig.Remove(this);
					}
					this._Producto.Entity = value;
					if ((value != null))
					{
						value.ProHig.Add(this);
						this._IdProducto = value.Id;
					}
					else
					{
						this._IdProducto = default(int);
					}
					this.SendPropertyChanged("Producto");
				}
			}
		}
		
		[Association(Name="TratHigiene_ProHig", Storage="_TratHigiene", ThisKey="IdTratHigiene", OtherKey="Id", IsForeignKey=true)]
		public TratHigiene TratHigiene
		{
			get
			{
				return this._TratHigiene.Entity;
			}
			set
			{
				TratHigiene previousValue = this._TratHigiene.Entity;
				if (((previousValue != value) 
							|| (this._TratHigiene.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TratHigiene.Entity = null;
						previousValue.ProHig.Remove(this);
					}
					this._TratHigiene.Entity = value;
					if ((value != null))
					{
						value.ProHig.Add(this);
						this._IdTratHigiene = value.Id;
					}
					else
					{
						this._IdTratHigiene = default(int);
					}
					this.SendPropertyChanged("TratHigiene");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Gasto(Gasto entity)
		{
			this.SendPropertyChanging();
			entity.ProHig = this;
		}
		
		private void detach_Gasto(Gasto entity)
		{
			this.SendPropertyChanging();
			entity.ProHig = null;
		}
	}
	
	[Table(Name="dbo.AniPro")]
	public partial class AniPro : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdTratProfilaxis;
		
		private int _IdAnimal;
		
		private EntityRef<TratProfilaxis> _TratProfilaxis;
		
		private EntityRef<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdTratProfilaxisChanging(int value);
    partial void OnIdTratProfilaxisChanged();
    partial void OnIdAnimalChanging(int value);
    partial void OnIdAnimalChanged();
    #endregion
		
		public AniPro()
		{
			this._TratProfilaxis = default(EntityRef<TratProfilaxis>);
			this._Animal = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[Column(Storage="_IdTratProfilaxis", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdTratProfilaxis
		{
			get
			{
				return this._IdTratProfilaxis;
			}
			set
			{
				if ((this._IdTratProfilaxis != value))
				{
					if (this._TratProfilaxis.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTratProfilaxisChanging(value);
					this.SendPropertyChanging();
					this._IdTratProfilaxis = value;
					this.SendPropertyChanged("IdTratProfilaxis");
					this.OnIdTratProfilaxisChanged();
				}
			}
		}
		
		[Column(Storage="_IdAnimal", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdAnimal
		{
			get
			{
				return this._IdAnimal;
			}
			set
			{
				if ((this._IdAnimal != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAnimalChanging(value);
					this.SendPropertyChanging();
					this._IdAnimal = value;
					this.SendPropertyChanged("IdAnimal");
					this.OnIdAnimalChanged();
				}
			}
		}
		
		[Association(Name="TratProfilaxis_AniPro", Storage="_TratProfilaxis", ThisKey="IdTratProfilaxis", OtherKey="Id", IsForeignKey=true)]
		public TratProfilaxis TratProfilaxis
		{
			get
			{
				return this._TratProfilaxis.Entity;
			}
			set
			{
				TratProfilaxis previousValue = this._TratProfilaxis.Entity;
				if (((previousValue != value) 
							|| (this._TratProfilaxis.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TratProfilaxis.Entity = null;
						previousValue.AniPro.Remove(this);
					}
					this._TratProfilaxis.Entity = value;
					if ((value != null))
					{
						value.AniPro.Add(this);
						this._IdTratProfilaxis = value.Id;
					}
					else
					{
						this._IdTratProfilaxis = default(int);
					}
					this.SendPropertyChanged("TratProfilaxis");
				}
			}
		}
		
		[Association(Name="Animal_AniPro", Storage="_Animal", ThisKey="IdAnimal", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.AniPro.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.AniPro.Add(this);
						this._IdAnimal = value.Id;
					}
					else
					{
						this._IdAnimal = default(int);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Programa")]
	public partial class Programa : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private EntitySet<TratProfilaxis> _TratProfilaxis;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public Programa()
		{
			this._TratProfilaxis = new EntitySet<TratProfilaxis>(new Action<TratProfilaxis>(this.attach_TratProfilaxis), new Action<TratProfilaxis>(this.detach_TratProfilaxis));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="Programa_TratProfilaxis", Storage="_TratProfilaxis", ThisKey="Id", OtherKey="IdPrograma")]
		public EntitySet<TratProfilaxis> TratProfilaxis
		{
			get
			{
				return this._TratProfilaxis;
			}
			set
			{
				this._TratProfilaxis.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TratProfilaxis(TratProfilaxis entity)
		{
			this.SendPropertyChanging();
			entity.Programa = this;
		}
		
		private void detach_TratProfilaxis(TratProfilaxis entity)
		{
			this.SendPropertyChanging();
			entity.Programa = null;
		}
	}
	
	[Table(Name="dbo.ProPro")]
	public partial class ProPro : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdTratProfilaxis;
		
		private int _IdProducto;
		
		private decimal _Cantidad;
		
		private EntitySet<Gasto> _Gasto;
		
		private EntityRef<Producto> _Producto;
		
		private EntityRef<TratProfilaxis> _TratProfilaxis;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdTratProfilaxisChanging(int value);
    partial void OnIdTratProfilaxisChanged();
    partial void OnIdProductoChanging(int value);
    partial void OnIdProductoChanged();
    partial void OnCantidadChanging(decimal value);
    partial void OnCantidadChanged();
    #endregion
		
		public ProPro()
		{
			this._Gasto = new EntitySet<Gasto>(new Action<Gasto>(this.attach_Gasto), new Action<Gasto>(this.detach_Gasto));
			this._Producto = default(EntityRef<Producto>);
			this._TratProfilaxis = default(EntityRef<TratProfilaxis>);
			OnCreated();
		}
		
		[Column(Storage="_IdTratProfilaxis", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdTratProfilaxis
		{
			get
			{
				return this._IdTratProfilaxis;
			}
			set
			{
				if ((this._IdTratProfilaxis != value))
				{
					if (this._TratProfilaxis.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTratProfilaxisChanging(value);
					this.SendPropertyChanging();
					this._IdTratProfilaxis = value;
					this.SendPropertyChanged("IdTratProfilaxis");
					this.OnIdTratProfilaxisChanged();
				}
			}
		}
		
		[Column(Storage="_IdProducto", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdProducto
		{
			get
			{
				return this._IdProducto;
			}
			set
			{
				if ((this._IdProducto != value))
				{
					if (this._Producto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdProductoChanging(value);
					this.SendPropertyChanging();
					this._IdProducto = value;
					this.SendPropertyChanged("IdProducto");
					this.OnIdProductoChanged();
				}
			}
		}
		
		[Column(Storage="_Cantidad", DbType="Decimal(6,2) NOT NULL")]
		public decimal Cantidad
		{
			get
			{
				return this._Cantidad;
			}
			set
			{
				if ((this._Cantidad != value))
				{
					this.OnCantidadChanging(value);
					this.SendPropertyChanging();
					this._Cantidad = value;
					this.SendPropertyChanged("Cantidad");
					this.OnCantidadChanged();
				}
			}
		}
		
		[Association(Name="ProPro_Gasto", Storage="_Gasto", ThisKey="IdTratProfilaxis,IdProducto", OtherKey="IdTratProfilaxis,IdProducto")]
		public EntitySet<Gasto> Gasto
		{
			get
			{
				return this._Gasto;
			}
			set
			{
				this._Gasto.Assign(value);
			}
		}
		
		[Association(Name="Producto_ProPro", Storage="_Producto", ThisKey="IdProducto", OtherKey="Id", IsForeignKey=true)]
		public Producto Producto
		{
			get
			{
				return this._Producto.Entity;
			}
			set
			{
				Producto previousValue = this._Producto.Entity;
				if (((previousValue != value) 
							|| (this._Producto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Producto.Entity = null;
						previousValue.ProPro.Remove(this);
					}
					this._Producto.Entity = value;
					if ((value != null))
					{
						value.ProPro.Add(this);
						this._IdProducto = value.Id;
					}
					else
					{
						this._IdProducto = default(int);
					}
					this.SendPropertyChanged("Producto");
				}
			}
		}
		
		[Association(Name="TratProfilaxis_ProPro", Storage="_TratProfilaxis", ThisKey="IdTratProfilaxis", OtherKey="Id", IsForeignKey=true)]
		public TratProfilaxis TratProfilaxis
		{
			get
			{
				return this._TratProfilaxis.Entity;
			}
			set
			{
				TratProfilaxis previousValue = this._TratProfilaxis.Entity;
				if (((previousValue != value) 
							|| (this._TratProfilaxis.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TratProfilaxis.Entity = null;
						previousValue.ProPro.Remove(this);
					}
					this._TratProfilaxis.Entity = value;
					if ((value != null))
					{
						value.ProPro.Add(this);
						this._IdTratProfilaxis = value.Id;
					}
					else
					{
						this._IdTratProfilaxis = default(int);
					}
					this.SendPropertyChanged("TratProfilaxis");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Gasto(Gasto entity)
		{
			this.SendPropertyChanging();
			entity.ProPro = this;
		}
		
		private void detach_Gasto(Gasto entity)
		{
			this.SendPropertyChanging();
			entity.ProPro = null;
		}
	}
	
	[Table(Name="dbo.Gasto")]
	public partial class Gasto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdExplotacion;
		
		private int _IdNaturaleza;
		
		private System.Nullable<int> _IdAnimal;
		
		private System.Nullable<int> _IdInseminacion;
		
		private System.Nullable<int> _IdTratamiento;
		
		private System.Nullable<int> _IdReceta;
		
		private System.Nullable<int> _IdParcela;
		
		private System.Nullable<int> _IdAsignacion;
		
		private System.Nullable<int> _IdSiembra;
		
		private System.Nullable<int> _IdAbonado;
		
		private System.Nullable<int> _IdTratParcela;
		
		private System.Nullable<int> _IdTratHigiene;
		
		private System.Nullable<int> _IdTratProfilaxis;
		
		private System.Nullable<int> _IdProducto;
		
		private string _Detalle;
		
		private System.DateTime _Fecha;
		
		private decimal _Importe;
		
		private decimal _Total;
		
		private EntityRef<Abonado> _Abonado;
		
		private EntityRef<Asignacion> _Asignacion;
		
		private EntityRef<Naturaleza> _Naturaleza;
		
		private EntityRef<Parcela> _Parcela;
		
		private EntityRef<ProHig> _ProHig;
		
		private EntityRef<ProPro> _ProPro;
		
		private EntityRef<Siembra> _Siembra;
		
		private EntityRef<TratParcela> _TratParcela;
		
		private EntityRef<TratEnfermedad> _TratEnfermedad;
		
		private EntityRef<Inseminacion> _Inseminacion;
		
		private EntityRef<Receta> _Receta;
		
		private EntityRef<Explotacion> _Explotacion;
		
		private EntityRef<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdExplotacionChanging(int value);
    partial void OnIdExplotacionChanged();
    partial void OnIdNaturalezaChanging(int value);
    partial void OnIdNaturalezaChanged();
    partial void OnIdAnimalChanging(System.Nullable<int> value);
    partial void OnIdAnimalChanged();
    partial void OnIdInseminacionChanging(System.Nullable<int> value);
    partial void OnIdInseminacionChanged();
    partial void OnIdTratamientoChanging(System.Nullable<int> value);
    partial void OnIdTratamientoChanged();
    partial void OnIdRecetaChanging(System.Nullable<int> value);
    partial void OnIdRecetaChanged();
    partial void OnIdParcelaChanging(System.Nullable<int> value);
    partial void OnIdParcelaChanged();
    partial void OnIdAsignacionChanging(System.Nullable<int> value);
    partial void OnIdAsignacionChanged();
    partial void OnIdSiembraChanging(System.Nullable<int> value);
    partial void OnIdSiembraChanged();
    partial void OnIdAbonadoChanging(System.Nullable<int> value);
    partial void OnIdAbonadoChanged();
    partial void OnIdTratParcelaChanging(System.Nullable<int> value);
    partial void OnIdTratParcelaChanged();
    partial void OnIdTratHigieneChanging(System.Nullable<int> value);
    partial void OnIdTratHigieneChanged();
    partial void OnIdTratProfilaxisChanging(System.Nullable<int> value);
    partial void OnIdTratProfilaxisChanged();
    partial void OnIdProductoChanging(System.Nullable<int> value);
    partial void OnIdProductoChanged();
    partial void OnDetalleChanging(string value);
    partial void OnDetalleChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    partial void OnImporteChanging(decimal value);
    partial void OnImporteChanged();
    partial void OnTotalChanging(decimal value);
    partial void OnTotalChanged();
    #endregion
		
		public Gasto()
		{
			this._Abonado = default(EntityRef<Abonado>);
			this._Asignacion = default(EntityRef<Asignacion>);
			this._Naturaleza = default(EntityRef<Naturaleza>);
			this._Parcela = default(EntityRef<Parcela>);
			this._ProHig = default(EntityRef<ProHig>);
			this._ProPro = default(EntityRef<ProPro>);
			this._Siembra = default(EntityRef<Siembra>);
			this._TratParcela = default(EntityRef<TratParcela>);
			this._TratEnfermedad = default(EntityRef<TratEnfermedad>);
			this._Inseminacion = default(EntityRef<Inseminacion>);
			this._Receta = default(EntityRef<Receta>);
			this._Explotacion = default(EntityRef<Explotacion>);
			this._Animal = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdExplotacion", DbType="Int NOT NULL")]
		public int IdExplotacion
		{
			get
			{
				return this._IdExplotacion;
			}
			set
			{
				if ((this._IdExplotacion != value))
				{
					if (this._Explotacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdExplotacionChanging(value);
					this.SendPropertyChanging();
					this._IdExplotacion = value;
					this.SendPropertyChanged("IdExplotacion");
					this.OnIdExplotacionChanged();
				}
			}
		}
		
		[Column(Storage="_IdNaturaleza", DbType="Int NOT NULL")]
		public int IdNaturaleza
		{
			get
			{
				return this._IdNaturaleza;
			}
			set
			{
				if ((this._IdNaturaleza != value))
				{
					if (this._Naturaleza.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdNaturalezaChanging(value);
					this.SendPropertyChanging();
					this._IdNaturaleza = value;
					this.SendPropertyChanged("IdNaturaleza");
					this.OnIdNaturalezaChanged();
				}
			}
		}
		
		[Column(Storage="_IdAnimal", DbType="Int")]
		public System.Nullable<int> IdAnimal
		{
			get
			{
				return this._IdAnimal;
			}
			set
			{
				if ((this._IdAnimal != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAnimalChanging(value);
					this.SendPropertyChanging();
					this._IdAnimal = value;
					this.SendPropertyChanged("IdAnimal");
					this.OnIdAnimalChanged();
				}
			}
		}
		
		[Column(Storage="_IdInseminacion", DbType="Int")]
		public System.Nullable<int> IdInseminacion
		{
			get
			{
				return this._IdInseminacion;
			}
			set
			{
				if ((this._IdInseminacion != value))
				{
					if (this._Inseminacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdInseminacionChanging(value);
					this.SendPropertyChanging();
					this._IdInseminacion = value;
					this.SendPropertyChanged("IdInseminacion");
					this.OnIdInseminacionChanged();
				}
			}
		}
		
		[Column(Storage="_IdTratamiento", DbType="Int")]
		public System.Nullable<int> IdTratamiento
		{
			get
			{
				return this._IdTratamiento;
			}
			set
			{
				if ((this._IdTratamiento != value))
				{
					if (this._TratEnfermedad.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTratamientoChanging(value);
					this.SendPropertyChanging();
					this._IdTratamiento = value;
					this.SendPropertyChanged("IdTratamiento");
					this.OnIdTratamientoChanged();
				}
			}
		}
		
		[Column(Storage="_IdReceta", DbType="Int")]
		public System.Nullable<int> IdReceta
		{
			get
			{
				return this._IdReceta;
			}
			set
			{
				if ((this._IdReceta != value))
				{
					if (this._Receta.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdRecetaChanging(value);
					this.SendPropertyChanging();
					this._IdReceta = value;
					this.SendPropertyChanged("IdReceta");
					this.OnIdRecetaChanged();
				}
			}
		}
		
		[Column(Storage="_IdParcela", DbType="Int")]
		public System.Nullable<int> IdParcela
		{
			get
			{
				return this._IdParcela;
			}
			set
			{
				if ((this._IdParcela != value))
				{
					if (this._Parcela.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdParcelaChanging(value);
					this.SendPropertyChanging();
					this._IdParcela = value;
					this.SendPropertyChanged("IdParcela");
					this.OnIdParcelaChanged();
				}
			}
		}
		
		[Column(Storage="_IdAsignacion", DbType="Int")]
		public System.Nullable<int> IdAsignacion
		{
			get
			{
				return this._IdAsignacion;
			}
			set
			{
				if ((this._IdAsignacion != value))
				{
					if (this._Asignacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAsignacionChanging(value);
					this.SendPropertyChanging();
					this._IdAsignacion = value;
					this.SendPropertyChanged("IdAsignacion");
					this.OnIdAsignacionChanged();
				}
			}
		}
		
		[Column(Storage="_IdSiembra", DbType="Int")]
		public System.Nullable<int> IdSiembra
		{
			get
			{
				return this._IdSiembra;
			}
			set
			{
				if ((this._IdSiembra != value))
				{
					if (this._Siembra.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdSiembraChanging(value);
					this.SendPropertyChanging();
					this._IdSiembra = value;
					this.SendPropertyChanged("IdSiembra");
					this.OnIdSiembraChanged();
				}
			}
		}
		
		[Column(Storage="_IdAbonado", DbType="Int")]
		public System.Nullable<int> IdAbonado
		{
			get
			{
				return this._IdAbonado;
			}
			set
			{
				if ((this._IdAbonado != value))
				{
					if (this._Abonado.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAbonadoChanging(value);
					this.SendPropertyChanging();
					this._IdAbonado = value;
					this.SendPropertyChanged("IdAbonado");
					this.OnIdAbonadoChanged();
				}
			}
		}
		
		[Column(Storage="_IdTratParcela", DbType="Int")]
		public System.Nullable<int> IdTratParcela
		{
			get
			{
				return this._IdTratParcela;
			}
			set
			{
				if ((this._IdTratParcela != value))
				{
					if (this._TratParcela.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTratParcelaChanging(value);
					this.SendPropertyChanging();
					this._IdTratParcela = value;
					this.SendPropertyChanged("IdTratParcela");
					this.OnIdTratParcelaChanged();
				}
			}
		}
		
		[Column(Storage="_IdTratHigiene", DbType="Int")]
		public System.Nullable<int> IdTratHigiene
		{
			get
			{
				return this._IdTratHigiene;
			}
			set
			{
				if ((this._IdTratHigiene != value))
				{
					if (this._ProHig.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTratHigieneChanging(value);
					this.SendPropertyChanging();
					this._IdTratHigiene = value;
					this.SendPropertyChanged("IdTratHigiene");
					this.OnIdTratHigieneChanged();
				}
			}
		}
		
		[Column(Storage="_IdTratProfilaxis", DbType="Int")]
		public System.Nullable<int> IdTratProfilaxis
		{
			get
			{
				return this._IdTratProfilaxis;
			}
			set
			{
				if ((this._IdTratProfilaxis != value))
				{
					if (this._ProPro.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTratProfilaxisChanging(value);
					this.SendPropertyChanging();
					this._IdTratProfilaxis = value;
					this.SendPropertyChanged("IdTratProfilaxis");
					this.OnIdTratProfilaxisChanged();
				}
			}
		}
		
		[Column(Storage="_IdProducto", DbType="Int")]
		public System.Nullable<int> IdProducto
		{
			get
			{
				return this._IdProducto;
			}
			set
			{
				if ((this._IdProducto != value))
				{
					if (this._ProHig.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdProductoChanging(value);
					this.SendPropertyChanging();
					this._IdProducto = value;
					this.SendPropertyChanged("IdProducto");
					this.OnIdProductoChanged();
				}
			}
		}
		
		[Column(Storage="_Detalle", DbType="VarChar(255)")]
		public string Detalle
		{
			get
			{
				return this._Detalle;
			}
			set
			{
				if ((this._Detalle != value))
				{
					this.OnDetalleChanging(value);
					this.SendPropertyChanging();
					this._Detalle = value;
					this.SendPropertyChanged("Detalle");
					this.OnDetalleChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Column(Storage="_Importe", DbType="Decimal(10,2) NOT NULL")]
		public decimal Importe
		{
			get
			{
				return this._Importe;
			}
			set
			{
				if ((this._Importe != value))
				{
					this.OnImporteChanging(value);
					this.SendPropertyChanging();
					this._Importe = value;
					this.SendPropertyChanged("Importe");
					this.OnImporteChanged();
				}
			}
		}
		
		[Column(Storage="_Total", DbType="Decimal(10,2) NOT NULL")]
		public decimal Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[Association(Name="Abonado_Gasto", Storage="_Abonado", ThisKey="IdAbonado", OtherKey="Id", IsForeignKey=true)]
		public Abonado Abonado
		{
			get
			{
				return this._Abonado.Entity;
			}
			set
			{
				Abonado previousValue = this._Abonado.Entity;
				if (((previousValue != value) 
							|| (this._Abonado.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Abonado.Entity = null;
						previousValue.Gasto.Remove(this);
					}
					this._Abonado.Entity = value;
					if ((value != null))
					{
						value.Gasto.Add(this);
						this._IdAbonado = value.Id;
					}
					else
					{
						this._IdAbonado = default(Nullable<int>);
					}
					this.SendPropertyChanged("Abonado");
				}
			}
		}
		
		[Association(Name="Asignacion_Gasto", Storage="_Asignacion", ThisKey="IdAsignacion", OtherKey="Id", IsForeignKey=true)]
		public Asignacion Asignacion
		{
			get
			{
				return this._Asignacion.Entity;
			}
			set
			{
				Asignacion previousValue = this._Asignacion.Entity;
				if (((previousValue != value) 
							|| (this._Asignacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Asignacion.Entity = null;
						previousValue.Gasto.Remove(this);
					}
					this._Asignacion.Entity = value;
					if ((value != null))
					{
						value.Gasto.Add(this);
						this._IdAsignacion = value.Id;
					}
					else
					{
						this._IdAsignacion = default(Nullable<int>);
					}
					this.SendPropertyChanged("Asignacion");
				}
			}
		}
		
		[Association(Name="Naturaleza_Gasto", Storage="_Naturaleza", ThisKey="IdNaturaleza", OtherKey="Id", IsForeignKey=true)]
		public Naturaleza Naturaleza
		{
			get
			{
				return this._Naturaleza.Entity;
			}
			set
			{
				Naturaleza previousValue = this._Naturaleza.Entity;
				if (((previousValue != value) 
							|| (this._Naturaleza.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Naturaleza.Entity = null;
						previousValue.Gasto.Remove(this);
					}
					this._Naturaleza.Entity = value;
					if ((value != null))
					{
						value.Gasto.Add(this);
						this._IdNaturaleza = value.Id;
					}
					else
					{
						this._IdNaturaleza = default(int);
					}
					this.SendPropertyChanged("Naturaleza");
				}
			}
		}
		
		[Association(Name="Parcela_Gasto", Storage="_Parcela", ThisKey="IdParcela", OtherKey="Id", IsForeignKey=true)]
		public Parcela Parcela
		{
			get
			{
				return this._Parcela.Entity;
			}
			set
			{
				Parcela previousValue = this._Parcela.Entity;
				if (((previousValue != value) 
							|| (this._Parcela.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parcela.Entity = null;
						previousValue.Gasto.Remove(this);
					}
					this._Parcela.Entity = value;
					if ((value != null))
					{
						value.Gasto.Add(this);
						this._IdParcela = value.Id;
					}
					else
					{
						this._IdParcela = default(Nullable<int>);
					}
					this.SendPropertyChanged("Parcela");
				}
			}
		}
		
		[Association(Name="ProHig_Gasto", Storage="_ProHig", ThisKey="IdTratHigiene,IdProducto", OtherKey="IdTratHigiene,IdProducto", IsForeignKey=true)]
		public ProHig ProHig
		{
			get
			{
				return this._ProHig.Entity;
			}
			set
			{
				ProHig previousValue = this._ProHig.Entity;
				if (((previousValue != value) 
							|| (this._ProHig.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProHig.Entity = null;
						previousValue.Gasto.Remove(this);
					}
					this._ProHig.Entity = value;
					if ((value != null))
					{
						value.Gasto.Add(this);
						this._IdTratHigiene = value.IdTratHigiene;
						this._IdProducto = value.IdProducto;
					}
					else
					{
						this._IdTratHigiene = default(Nullable<int>);
						this._IdProducto = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProHig");
				}
			}
		}
		
		[Association(Name="ProPro_Gasto", Storage="_ProPro", ThisKey="IdTratProfilaxis,IdProducto", OtherKey="IdTratProfilaxis,IdProducto", IsForeignKey=true)]
		public ProPro ProPro
		{
			get
			{
				return this._ProPro.Entity;
			}
			set
			{
				ProPro previousValue = this._ProPro.Entity;
				if (((previousValue != value) 
							|| (this._ProPro.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProPro.Entity = null;
						previousValue.Gasto.Remove(this);
					}
					this._ProPro.Entity = value;
					if ((value != null))
					{
						value.Gasto.Add(this);
						this._IdTratProfilaxis = value.IdTratProfilaxis;
						this._IdProducto = value.IdProducto;
					}
					else
					{
						this._IdTratProfilaxis = default(Nullable<int>);
						this._IdProducto = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProPro");
				}
			}
		}
		
		[Association(Name="Siembra_Gasto", Storage="_Siembra", ThisKey="IdSiembra", OtherKey="Id", IsForeignKey=true)]
		public Siembra Siembra
		{
			get
			{
				return this._Siembra.Entity;
			}
			set
			{
				Siembra previousValue = this._Siembra.Entity;
				if (((previousValue != value) 
							|| (this._Siembra.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Siembra.Entity = null;
						previousValue.Gasto.Remove(this);
					}
					this._Siembra.Entity = value;
					if ((value != null))
					{
						value.Gasto.Add(this);
						this._IdSiembra = value.Id;
					}
					else
					{
						this._IdSiembra = default(Nullable<int>);
					}
					this.SendPropertyChanged("Siembra");
				}
			}
		}
		
		[Association(Name="TratParcela_Gasto", Storage="_TratParcela", ThisKey="IdTratParcela", OtherKey="Id", IsForeignKey=true)]
		public TratParcela TratParcela
		{
			get
			{
				return this._TratParcela.Entity;
			}
			set
			{
				TratParcela previousValue = this._TratParcela.Entity;
				if (((previousValue != value) 
							|| (this._TratParcela.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TratParcela.Entity = null;
						previousValue.Gasto.Remove(this);
					}
					this._TratParcela.Entity = value;
					if ((value != null))
					{
						value.Gasto.Add(this);
						this._IdTratParcela = value.Id;
					}
					else
					{
						this._IdTratParcela = default(Nullable<int>);
					}
					this.SendPropertyChanged("TratParcela");
				}
			}
		}
		
		[Association(Name="TratEnfermedad_Gasto", Storage="_TratEnfermedad", ThisKey="IdTratamiento", OtherKey="Id", IsForeignKey=true)]
		public TratEnfermedad TratEnfermedad
		{
			get
			{
				return this._TratEnfermedad.Entity;
			}
			set
			{
				TratEnfermedad previousValue = this._TratEnfermedad.Entity;
				if (((previousValue != value) 
							|| (this._TratEnfermedad.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TratEnfermedad.Entity = null;
						previousValue.Gasto.Remove(this);
					}
					this._TratEnfermedad.Entity = value;
					if ((value != null))
					{
						value.Gasto.Add(this);
						this._IdTratamiento = value.Id;
					}
					else
					{
						this._IdTratamiento = default(Nullable<int>);
					}
					this.SendPropertyChanged("TratEnfermedad");
				}
			}
		}
		
		[Association(Name="Inseminacion_Gasto", Storage="_Inseminacion", ThisKey="IdInseminacion", OtherKey="Id", IsForeignKey=true)]
		public Inseminacion Inseminacion
		{
			get
			{
				return this._Inseminacion.Entity;
			}
			set
			{
				Inseminacion previousValue = this._Inseminacion.Entity;
				if (((previousValue != value) 
							|| (this._Inseminacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inseminacion.Entity = null;
						previousValue.Gasto.Remove(this);
					}
					this._Inseminacion.Entity = value;
					if ((value != null))
					{
						value.Gasto.Add(this);
						this._IdInseminacion = value.Id;
					}
					else
					{
						this._IdInseminacion = default(Nullable<int>);
					}
					this.SendPropertyChanged("Inseminacion");
				}
			}
		}
		
		[Association(Name="Receta_Gasto", Storage="_Receta", ThisKey="IdReceta", OtherKey="Id", IsForeignKey=true)]
		public Receta Receta
		{
			get
			{
				return this._Receta.Entity;
			}
			set
			{
				Receta previousValue = this._Receta.Entity;
				if (((previousValue != value) 
							|| (this._Receta.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Receta.Entity = null;
						previousValue.Gasto.Remove(this);
					}
					this._Receta.Entity = value;
					if ((value != null))
					{
						value.Gasto.Add(this);
						this._IdReceta = value.Id;
					}
					else
					{
						this._IdReceta = default(Nullable<int>);
					}
					this.SendPropertyChanged("Receta");
				}
			}
		}
		
		[Association(Name="Explotacion_Gasto", Storage="_Explotacion", ThisKey="IdExplotacion", OtherKey="Id", IsForeignKey=true)]
		public Explotacion Explotacion
		{
			get
			{
				return this._Explotacion.Entity;
			}
			set
			{
				Explotacion previousValue = this._Explotacion.Entity;
				if (((previousValue != value) 
							|| (this._Explotacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Explotacion.Entity = null;
						previousValue.Gasto.Remove(this);
					}
					this._Explotacion.Entity = value;
					if ((value != null))
					{
						value.Gasto.Add(this);
						this._IdExplotacion = value.Id;
					}
					else
					{
						this._IdExplotacion = default(int);
					}
					this.SendPropertyChanged("Explotacion");
				}
			}
		}
		
		[Association(Name="Animal_Gasto", Storage="_Animal", ThisKey="IdAnimal", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.Gasto.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.Gasto.Add(this);
						this._IdAnimal = value.Id;
					}
					else
					{
						this._IdAnimal = default(Nullable<int>);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PlaMaq")]
	public partial class PlaMaq : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdPlantilla;
		
		private int _IdMaquinaria;
		
		private System.DateTime _FechaInicio;
		
		private System.Nullable<System.DateTime> _FechaFin;
		
		private EntityRef<Maquinaria> _Maquinaria;
		
		private EntityRef<Plantilla> _Plantilla;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdPlantillaChanging(int value);
    partial void OnIdPlantillaChanged();
    partial void OnIdMaquinariaChanging(int value);
    partial void OnIdMaquinariaChanged();
    partial void OnFechaInicioChanging(System.DateTime value);
    partial void OnFechaInicioChanged();
    partial void OnFechaFinChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaFinChanged();
    #endregion
		
		public PlaMaq()
		{
			this._Maquinaria = default(EntityRef<Maquinaria>);
			this._Plantilla = default(EntityRef<Plantilla>);
			OnCreated();
		}
		
		[Column(Storage="_IdPlantilla", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdPlantilla
		{
			get
			{
				return this._IdPlantilla;
			}
			set
			{
				if ((this._IdPlantilla != value))
				{
					if (this._Plantilla.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPlantillaChanging(value);
					this.SendPropertyChanging();
					this._IdPlantilla = value;
					this.SendPropertyChanged("IdPlantilla");
					this.OnIdPlantillaChanged();
				}
			}
		}
		
		[Column(Storage="_IdMaquinaria", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdMaquinaria
		{
			get
			{
				return this._IdMaquinaria;
			}
			set
			{
				if ((this._IdMaquinaria != value))
				{
					if (this._Maquinaria.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdMaquinariaChanging(value);
					this.SendPropertyChanging();
					this._IdMaquinaria = value;
					this.SendPropertyChanged("IdMaquinaria");
					this.OnIdMaquinariaChanged();
				}
			}
		}
		
		[Column(Storage="_FechaInicio", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime FechaInicio
		{
			get
			{
				return this._FechaInicio;
			}
			set
			{
				if ((this._FechaInicio != value))
				{
					this.OnFechaInicioChanging(value);
					this.SendPropertyChanging();
					this._FechaInicio = value;
					this.SendPropertyChanged("FechaInicio");
					this.OnFechaInicioChanged();
				}
			}
		}
		
		[Column(Storage="_FechaFin", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaFin
		{
			get
			{
				return this._FechaFin;
			}
			set
			{
				if ((this._FechaFin != value))
				{
					this.OnFechaFinChanging(value);
					this.SendPropertyChanging();
					this._FechaFin = value;
					this.SendPropertyChanged("FechaFin");
					this.OnFechaFinChanged();
				}
			}
		}
		
		[Association(Name="Maquinaria_PlaMaq", Storage="_Maquinaria", ThisKey="IdMaquinaria", OtherKey="Id", IsForeignKey=true)]
		public Maquinaria Maquinaria
		{
			get
			{
				return this._Maquinaria.Entity;
			}
			set
			{
				Maquinaria previousValue = this._Maquinaria.Entity;
				if (((previousValue != value) 
							|| (this._Maquinaria.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Maquinaria.Entity = null;
						previousValue.PlaMaq.Remove(this);
					}
					this._Maquinaria.Entity = value;
					if ((value != null))
					{
						value.PlaMaq.Add(this);
						this._IdMaquinaria = value.Id;
					}
					else
					{
						this._IdMaquinaria = default(int);
					}
					this.SendPropertyChanged("Maquinaria");
				}
			}
		}
		
		[Association(Name="Plantilla_PlaMaq", Storage="_Plantilla", ThisKey="IdPlantilla", OtherKey="Id", IsForeignKey=true)]
		public Plantilla Plantilla
		{
			get
			{
				return this._Plantilla.Entity;
			}
			set
			{
				Plantilla previousValue = this._Plantilla.Entity;
				if (((previousValue != value) 
							|| (this._Plantilla.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Plantilla.Entity = null;
						previousValue.PlaMaq.Remove(this);
					}
					this._Plantilla.Entity = value;
					if ((value != null))
					{
						value.PlaMaq.Add(this);
						this._IdPlantilla = value.Id;
					}
					else
					{
						this._IdPlantilla = default(int);
					}
					this.SendPropertyChanged("Plantilla");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PlaZon")]
	public partial class PlaZon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdPlantilla;
		
		private int _IdZona;
		
		private System.DateTime _FechaInicio;
		
		private System.Nullable<System.DateTime> _FechaFin;
		
		private EntityRef<Zona> _Zona;
		
		private EntityRef<Plantilla> _Plantilla;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdPlantillaChanging(int value);
    partial void OnIdPlantillaChanged();
    partial void OnIdZonaChanging(int value);
    partial void OnIdZonaChanged();
    partial void OnFechaInicioChanging(System.DateTime value);
    partial void OnFechaInicioChanged();
    partial void OnFechaFinChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaFinChanged();
    #endregion
		
		public PlaZon()
		{
			this._Zona = default(EntityRef<Zona>);
			this._Plantilla = default(EntityRef<Plantilla>);
			OnCreated();
		}
		
		[Column(Storage="_IdPlantilla", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdPlantilla
		{
			get
			{
				return this._IdPlantilla;
			}
			set
			{
				if ((this._IdPlantilla != value))
				{
					if (this._Plantilla.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPlantillaChanging(value);
					this.SendPropertyChanging();
					this._IdPlantilla = value;
					this.SendPropertyChanged("IdPlantilla");
					this.OnIdPlantillaChanged();
				}
			}
		}
		
		[Column(Storage="_IdZona", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdZona
		{
			get
			{
				return this._IdZona;
			}
			set
			{
				if ((this._IdZona != value))
				{
					if (this._Zona.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdZonaChanging(value);
					this.SendPropertyChanging();
					this._IdZona = value;
					this.SendPropertyChanged("IdZona");
					this.OnIdZonaChanged();
				}
			}
		}
		
		[Column(Storage="_FechaInicio", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime FechaInicio
		{
			get
			{
				return this._FechaInicio;
			}
			set
			{
				if ((this._FechaInicio != value))
				{
					this.OnFechaInicioChanging(value);
					this.SendPropertyChanging();
					this._FechaInicio = value;
					this.SendPropertyChanged("FechaInicio");
					this.OnFechaInicioChanged();
				}
			}
		}
		
		[Column(Storage="_FechaFin", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaFin
		{
			get
			{
				return this._FechaFin;
			}
			set
			{
				if ((this._FechaFin != value))
				{
					this.OnFechaFinChanging(value);
					this.SendPropertyChanging();
					this._FechaFin = value;
					this.SendPropertyChanged("FechaFin");
					this.OnFechaFinChanged();
				}
			}
		}
		
		[Association(Name="Zona_PlaZon", Storage="_Zona", ThisKey="IdZona", OtherKey="Id", IsForeignKey=true)]
		public Zona Zona
		{
			get
			{
				return this._Zona.Entity;
			}
			set
			{
				Zona previousValue = this._Zona.Entity;
				if (((previousValue != value) 
							|| (this._Zona.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Zona.Entity = null;
						previousValue.PlaZon.Remove(this);
					}
					this._Zona.Entity = value;
					if ((value != null))
					{
						value.PlaZon.Add(this);
						this._IdZona = value.Id;
					}
					else
					{
						this._IdZona = default(int);
					}
					this.SendPropertyChanged("Zona");
				}
			}
		}
		
		[Association(Name="Plantilla_PlaZon", Storage="_Plantilla", ThisKey="IdPlantilla", OtherKey="Id", IsForeignKey=true)]
		public Plantilla Plantilla
		{
			get
			{
				return this._Plantilla.Entity;
			}
			set
			{
				Plantilla previousValue = this._Plantilla.Entity;
				if (((previousValue != value) 
							|| (this._Plantilla.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Plantilla.Entity = null;
						previousValue.PlaZon.Remove(this);
					}
					this._Plantilla.Entity = value;
					if ((value != null))
					{
						value.PlaZon.Add(this);
						this._IdPlantilla = value.Id;
					}
					else
					{
						this._IdPlantilla = default(int);
					}
					this.SendPropertyChanged("Plantilla");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Ejecucion")]
	public partial class Ejecucion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdPlantilla;
		
		private System.DateTime _Fecha;
		
		private EntityRef<Plantilla> _Plantilla;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdPlantillaChanging(int value);
    partial void OnIdPlantillaChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    #endregion
		
		public Ejecucion()
		{
			this._Plantilla = default(EntityRef<Plantilla>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdPlantilla", DbType="Int NOT NULL")]
		public int IdPlantilla
		{
			get
			{
				return this._IdPlantilla;
			}
			set
			{
				if ((this._IdPlantilla != value))
				{
					if (this._Plantilla.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPlantillaChanging(value);
					this.SendPropertyChanging();
					this._IdPlantilla = value;
					this.SendPropertyChanged("IdPlantilla");
					this.OnIdPlantillaChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Association(Name="Plantilla_Ejecucion", Storage="_Plantilla", ThisKey="IdPlantilla", OtherKey="Id", IsForeignKey=true)]
		public Plantilla Plantilla
		{
			get
			{
				return this._Plantilla.Entity;
			}
			set
			{
				Plantilla previousValue = this._Plantilla.Entity;
				if (((previousValue != value) 
							|| (this._Plantilla.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Plantilla.Entity = null;
						previousValue.Ejecuciones.Remove(this);
					}
					this._Plantilla.Entity = value;
					if ((value != null))
					{
						value.Ejecuciones.Add(this);
						this._IdPlantilla = value.Id;
					}
					else
					{
						this._IdPlantilla = default(int);
					}
					this.SendPropertyChanged("Plantilla");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Transformacion")]
	public partial class Transformacion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdPlantilla;
		
		private int _IdProducto;
		
		private System.DateTime _FechaInicio;
		
		private System.Nullable<System.DateTime> _FechaFin;
		
		private char _Direccion;
		
		private decimal _Cantidad;
		
		private EntityRef<Producto> _Producto;
		
		private EntityRef<Plantilla> _Plantilla;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdPlantillaChanging(int value);
    partial void OnIdPlantillaChanged();
    partial void OnIdProductoChanging(int value);
    partial void OnIdProductoChanged();
    partial void OnFechaInicioChanging(System.DateTime value);
    partial void OnFechaInicioChanged();
    partial void OnFechaFinChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaFinChanged();
    partial void OnDireccionChanging(char value);
    partial void OnDireccionChanged();
    partial void OnCantidadChanging(decimal value);
    partial void OnCantidadChanged();
    #endregion
		
		public Transformacion()
		{
			this._Producto = default(EntityRef<Producto>);
			this._Plantilla = default(EntityRef<Plantilla>);
			OnCreated();
		}
		
		[Column(Storage="_IdPlantilla", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdPlantilla
		{
			get
			{
				return this._IdPlantilla;
			}
			set
			{
				if ((this._IdPlantilla != value))
				{
					if (this._Plantilla.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPlantillaChanging(value);
					this.SendPropertyChanging();
					this._IdPlantilla = value;
					this.SendPropertyChanged("IdPlantilla");
					this.OnIdPlantillaChanged();
				}
			}
		}
		
		[Column(Storage="_IdProducto", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdProducto
		{
			get
			{
				return this._IdProducto;
			}
			set
			{
				if ((this._IdProducto != value))
				{
					if (this._Producto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdProductoChanging(value);
					this.SendPropertyChanging();
					this._IdProducto = value;
					this.SendPropertyChanged("IdProducto");
					this.OnIdProductoChanged();
				}
			}
		}
		
		[Column(Storage="_FechaInicio", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime FechaInicio
		{
			get
			{
				return this._FechaInicio;
			}
			set
			{
				if ((this._FechaInicio != value))
				{
					this.OnFechaInicioChanging(value);
					this.SendPropertyChanging();
					this._FechaInicio = value;
					this.SendPropertyChanged("FechaInicio");
					this.OnFechaInicioChanged();
				}
			}
		}
		
		[Column(Storage="_FechaFin", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaFin
		{
			get
			{
				return this._FechaFin;
			}
			set
			{
				if ((this._FechaFin != value))
				{
					this.OnFechaFinChanging(value);
					this.SendPropertyChanging();
					this._FechaFin = value;
					this.SendPropertyChanged("FechaFin");
					this.OnFechaFinChanged();
				}
			}
		}
		
		[Column(Storage="_Direccion", DbType="VarChar(1) NOT NULL")]
		public char Direccion
		{
			get
			{
				return this._Direccion;
			}
			set
			{
				if ((this._Direccion != value))
				{
					this.OnDireccionChanging(value);
					this.SendPropertyChanging();
					this._Direccion = value;
					this.SendPropertyChanged("Direccion");
					this.OnDireccionChanged();
				}
			}
		}
		
		[Column(Storage="_Cantidad", DbType="Decimal(6,2) NOT NULL")]
		public decimal Cantidad
		{
			get
			{
				return this._Cantidad;
			}
			set
			{
				if ((this._Cantidad != value))
				{
					this.OnCantidadChanging(value);
					this.SendPropertyChanging();
					this._Cantidad = value;
					this.SendPropertyChanged("Cantidad");
					this.OnCantidadChanged();
				}
			}
		}
		
		[Association(Name="Producto_Transformacion", Storage="_Producto", ThisKey="IdProducto", OtherKey="Id", IsForeignKey=true)]
		public Producto Producto
		{
			get
			{
				return this._Producto.Entity;
			}
			set
			{
				Producto previousValue = this._Producto.Entity;
				if (((previousValue != value) 
							|| (this._Producto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Producto.Entity = null;
						previousValue.Transformaciones.Remove(this);
					}
					this._Producto.Entity = value;
					if ((value != null))
					{
						value.Transformaciones.Add(this);
						this._IdProducto = value.Id;
					}
					else
					{
						this._IdProducto = default(int);
					}
					this.SendPropertyChanged("Producto");
				}
			}
		}
		
		[Association(Name="Plantilla_Transformacion", Storage="_Plantilla", ThisKey="IdPlantilla", OtherKey="Id", IsForeignKey=true)]
		public Plantilla Plantilla
		{
			get
			{
				return this._Plantilla.Entity;
			}
			set
			{
				Plantilla previousValue = this._Plantilla.Entity;
				if (((previousValue != value) 
							|| (this._Plantilla.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Plantilla.Entity = null;
						previousValue.Transformaciones.Remove(this);
					}
					this._Plantilla.Entity = value;
					if ((value != null))
					{
						value.Transformaciones.Add(this);
						this._IdPlantilla = value.Id;
					}
					else
					{
						this._IdPlantilla = default(int);
					}
					this.SendPropertyChanged("Plantilla");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PlaVet")]
	public partial class PlaVet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdPlantilla;
		
		private int _IdPersonal;
		
		private System.DateTime _FechaInicio;
		
		private System.Nullable<System.DateTime> _FechaFin;
		
		private EntityRef<Plantilla> _Plantilla;
		
		private EntityRef<Veterinario> _Veterinario;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdPlantillaChanging(int value);
    partial void OnIdPlantillaChanged();
    partial void OnIdPersonalChanging(int value);
    partial void OnIdPersonalChanged();
    partial void OnFechaInicioChanging(System.DateTime value);
    partial void OnFechaInicioChanged();
    partial void OnFechaFinChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaFinChanged();
    #endregion
		
		public PlaVet()
		{
			this._Plantilla = default(EntityRef<Plantilla>);
			this._Veterinario = default(EntityRef<Veterinario>);
			OnCreated();
		}
		
		[Column(Storage="_IdPlantilla", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdPlantilla
		{
			get
			{
				return this._IdPlantilla;
			}
			set
			{
				if ((this._IdPlantilla != value))
				{
					if (this._Plantilla.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPlantillaChanging(value);
					this.SendPropertyChanging();
					this._IdPlantilla = value;
					this.SendPropertyChanged("IdPlantilla");
					this.OnIdPlantillaChanged();
				}
			}
		}
		
		[Column(Storage="_IdPersonal", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdPersonal
		{
			get
			{
				return this._IdPersonal;
			}
			set
			{
				if ((this._IdPersonal != value))
				{
					if (this._Veterinario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPersonalChanging(value);
					this.SendPropertyChanging();
					this._IdPersonal = value;
					this.SendPropertyChanged("IdPersonal");
					this.OnIdPersonalChanged();
				}
			}
		}
		
		[Column(Storage="_FechaInicio", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime FechaInicio
		{
			get
			{
				return this._FechaInicio;
			}
			set
			{
				if ((this._FechaInicio != value))
				{
					this.OnFechaInicioChanging(value);
					this.SendPropertyChanging();
					this._FechaInicio = value;
					this.SendPropertyChanged("FechaInicio");
					this.OnFechaInicioChanged();
				}
			}
		}
		
		[Column(Storage="_FechaFin", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaFin
		{
			get
			{
				return this._FechaFin;
			}
			set
			{
				if ((this._FechaFin != value))
				{
					this.OnFechaFinChanging(value);
					this.SendPropertyChanging();
					this._FechaFin = value;
					this.SendPropertyChanged("FechaFin");
					this.OnFechaFinChanged();
				}
			}
		}
		
		[Association(Name="Plantilla_PlaVet", Storage="_Plantilla", ThisKey="IdPlantilla", OtherKey="Id", IsForeignKey=true)]
		public Plantilla Plantilla
		{
			get
			{
				return this._Plantilla.Entity;
			}
			set
			{
				Plantilla previousValue = this._Plantilla.Entity;
				if (((previousValue != value) 
							|| (this._Plantilla.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Plantilla.Entity = null;
						previousValue.PlaVet.Remove(this);
					}
					this._Plantilla.Entity = value;
					if ((value != null))
					{
						value.PlaVet.Add(this);
						this._IdPlantilla = value.Id;
					}
					else
					{
						this._IdPlantilla = default(int);
					}
					this.SendPropertyChanged("Plantilla");
				}
			}
		}
		
		[Association(Name="Veterinario_PlaVet", Storage="_Veterinario", ThisKey="IdPersonal", OtherKey="Id", IsForeignKey=true)]
		public Veterinario Veterinario
		{
			get
			{
				return this._Veterinario.Entity;
			}
			set
			{
				Veterinario previousValue = this._Veterinario.Entity;
				if (((previousValue != value) 
							|| (this._Veterinario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Veterinario.Entity = null;
						previousValue.PlaVet.Remove(this);
					}
					this._Veterinario.Entity = value;
					if ((value != null))
					{
						value.PlaVet.Add(this);
						this._IdPersonal = value.Id;
					}
					else
					{
						this._IdPersonal = default(int);
					}
					this.SendPropertyChanged("Veterinario");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Titular")]
	public partial class Titular : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nombre;
		
		private string _Apellidos;
		
		private string _Direccion;
		
		private string _CP;
		
		private string _DNI;
		
		private string _Telefono;
		
		private string _Movil;
		
		private string _Fax;
		
		private string _Email;
		
		private System.Nullable<System.DateTime> _FechaNacimiento;
		
		private System.DateTime _FechaAlta;
		
		private System.Nullable<System.DateTime> _FechaBaja;
		
		private EntitySet<Cuenta> _Cuenta;
		
		private EntitySet<ExpTit> _ExpTit;
		
		private EntitySet<Parcela> _Parcela;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnApellidosChanging(string value);
    partial void OnApellidosChanged();
    partial void OnDireccionChanging(string value);
    partial void OnDireccionChanged();
    partial void OnCPChanging(string value);
    partial void OnCPChanged();
    partial void OnDNIChanging(string value);
    partial void OnDNIChanged();
    partial void OnTelefonoChanging(string value);
    partial void OnTelefonoChanged();
    partial void OnMovilChanging(string value);
    partial void OnMovilChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFechaNacimientoChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaNacimientoChanged();
    partial void OnFechaAltaChanging(System.DateTime value);
    partial void OnFechaAltaChanged();
    partial void OnFechaBajaChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaBajaChanged();
    #endregion
		
		public Titular()
		{
			this._Cuenta = new EntitySet<Cuenta>(new Action<Cuenta>(this.attach_Cuenta), new Action<Cuenta>(this.detach_Cuenta));
			this._ExpTit = new EntitySet<ExpTit>(new Action<ExpTit>(this.attach_ExpTit), new Action<ExpTit>(this.detach_ExpTit));
			this._Parcela = new EntitySet<Parcela>(new Action<Parcela>(this.attach_Parcela), new Action<Parcela>(this.detach_Parcela));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Column(Storage="_Apellidos", DbType="VarChar(100)")]
		public string Apellidos
		{
			get
			{
				return this._Apellidos;
			}
			set
			{
				if ((this._Apellidos != value))
				{
					this.OnApellidosChanging(value);
					this.SendPropertyChanging();
					this._Apellidos = value;
					this.SendPropertyChanged("Apellidos");
					this.OnApellidosChanged();
				}
			}
		}
		
		[Column(Storage="_Direccion", DbType="VarChar(100)")]
		public string Direccion
		{
			get
			{
				return this._Direccion;
			}
			set
			{
				if ((this._Direccion != value))
				{
					this.OnDireccionChanging(value);
					this.SendPropertyChanging();
					this._Direccion = value;
					this.SendPropertyChanged("Direccion");
					this.OnDireccionChanged();
				}
			}
		}
		
		[Column(Storage="_CP", DbType="VarChar(5)")]
		public string CP
		{
			get
			{
				return this._CP;
			}
			set
			{
				if ((this._CP != value))
				{
					this.OnCPChanging(value);
					this.SendPropertyChanging();
					this._CP = value;
					this.SendPropertyChanged("CP");
					this.OnCPChanged();
				}
			}
		}
		
		[Column(Storage="_DNI", DbType="VarChar(9) NOT NULL", CanBeNull=false)]
		public string DNI
		{
			get
			{
				return this._DNI;
			}
			set
			{
				if ((this._DNI != value))
				{
					this.OnDNIChanging(value);
					this.SendPropertyChanging();
					this._DNI = value;
					this.SendPropertyChanged("DNI");
					this.OnDNIChanged();
				}
			}
		}
		
		[Column(Storage="_Telefono", DbType="VarChar(9)")]
		public string Telefono
		{
			get
			{
				return this._Telefono;
			}
			set
			{
				if ((this._Telefono != value))
				{
					this.OnTelefonoChanging(value);
					this.SendPropertyChanging();
					this._Telefono = value;
					this.SendPropertyChanged("Telefono");
					this.OnTelefonoChanged();
				}
			}
		}
		
		[Column(Storage="_Movil", DbType="VarChar(9)")]
		public string Movil
		{
			get
			{
				return this._Movil;
			}
			set
			{
				if ((this._Movil != value))
				{
					this.OnMovilChanging(value);
					this.SendPropertyChanging();
					this._Movil = value;
					this.SendPropertyChanged("Movil");
					this.OnMovilChanged();
				}
			}
		}
		
		[Column(Storage="_Fax", DbType="VarChar(9)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(255)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_FechaNacimiento", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaNacimiento
		{
			get
			{
				return this._FechaNacimiento;
			}
			set
			{
				if ((this._FechaNacimiento != value))
				{
					this.OnFechaNacimientoChanging(value);
					this.SendPropertyChanging();
					this._FechaNacimiento = value;
					this.SendPropertyChanged("FechaNacimiento");
					this.OnFechaNacimientoChanged();
				}
			}
		}
		
		[Column(Storage="_FechaAlta", DbType="DateTime NOT NULL")]
		public System.DateTime FechaAlta
		{
			get
			{
				return this._FechaAlta;
			}
			set
			{
				if ((this._FechaAlta != value))
				{
					this.OnFechaAltaChanging(value);
					this.SendPropertyChanging();
					this._FechaAlta = value;
					this.SendPropertyChanged("FechaAlta");
					this.OnFechaAltaChanged();
				}
			}
		}
		
		[Column(Storage="_FechaBaja", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaBaja
		{
			get
			{
				return this._FechaBaja;
			}
			set
			{
				if ((this._FechaBaja != value))
				{
					this.OnFechaBajaChanging(value);
					this.SendPropertyChanging();
					this._FechaBaja = value;
					this.SendPropertyChanged("FechaBaja");
					this.OnFechaBajaChanged();
				}
			}
		}
		
		[Association(Name="Titular_Cuenta", Storage="_Cuenta", ThisKey="Id", OtherKey="IdTitular")]
		public EntitySet<Cuenta> Cuenta
		{
			get
			{
				return this._Cuenta;
			}
			set
			{
				this._Cuenta.Assign(value);
			}
		}
		
		[Association(Name="Titular_ExpTit", Storage="_ExpTit", ThisKey="Id", OtherKey="IdTitular")]
		public EntitySet<ExpTit> ExpTit
		{
			get
			{
				return this._ExpTit;
			}
			set
			{
				this._ExpTit.Assign(value);
			}
		}
		
		[Association(Name="Titular_Parcela", Storage="_Parcela", ThisKey="Id", OtherKey="IdTitular")]
		public EntitySet<Parcela> Parcela
		{
			get
			{
				return this._Parcela;
			}
			set
			{
				this._Parcela.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cuenta(Cuenta entity)
		{
			this.SendPropertyChanging();
			entity.Titular = this;
		}
		
		private void detach_Cuenta(Cuenta entity)
		{
			this.SendPropertyChanging();
			entity.Titular = null;
		}
		
		private void attach_ExpTit(ExpTit entity)
		{
			this.SendPropertyChanging();
			entity.Titular = this;
		}
		
		private void detach_ExpTit(ExpTit entity)
		{
			this.SendPropertyChanging();
			entity.Titular = null;
		}
		
		private void attach_Parcela(Parcela entity)
		{
			this.SendPropertyChanging();
			entity.Titular = this;
		}
		
		private void detach_Parcela(Parcela entity)
		{
			this.SendPropertyChanging();
			entity.Titular = null;
		}
	}
	
	[Table(Name="dbo.Celo")]
	public partial class Celo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdHembra;
		
		private System.Nullable<int> _IdVeterinario;
		
		private System.DateTime _Fecha;
		
		private EntityRef<Veterinario> _Veterinario;
		
		private EntityRef<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdHembraChanging(int value);
    partial void OnIdHembraChanged();
    partial void OnIdVeterinarioChanging(System.Nullable<int> value);
    partial void OnIdVeterinarioChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    #endregion
		
		public Celo()
		{
			this._Veterinario = default(EntityRef<Veterinario>);
			this._Animal = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdHembra", DbType="Int NOT NULL")]
		public int IdHembra
		{
			get
			{
				return this._IdHembra;
			}
			set
			{
				if ((this._IdHembra != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdHembraChanging(value);
					this.SendPropertyChanging();
					this._IdHembra = value;
					this.SendPropertyChanged("IdHembra");
					this.OnIdHembraChanged();
				}
			}
		}
		
		[Column(Storage="_IdVeterinario", DbType="Int")]
		public System.Nullable<int> IdVeterinario
		{
			get
			{
				return this._IdVeterinario;
			}
			set
			{
				if ((this._IdVeterinario != value))
				{
					if (this._Veterinario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdVeterinarioChanging(value);
					this.SendPropertyChanging();
					this._IdVeterinario = value;
					this.SendPropertyChanged("IdVeterinario");
					this.OnIdVeterinarioChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Association(Name="Veterinario_Celo", Storage="_Veterinario", ThisKey="IdVeterinario", OtherKey="Id", IsForeignKey=true)]
		public Veterinario Veterinario
		{
			get
			{
				return this._Veterinario.Entity;
			}
			set
			{
				Veterinario previousValue = this._Veterinario.Entity;
				if (((previousValue != value) 
							|| (this._Veterinario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Veterinario.Entity = null;
						previousValue.Celo.Remove(this);
					}
					this._Veterinario.Entity = value;
					if ((value != null))
					{
						value.Celo.Add(this);
						this._IdVeterinario = value.Id;
					}
					else
					{
						this._IdVeterinario = default(Nullable<int>);
					}
					this.SendPropertyChanged("Veterinario");
				}
			}
		}
		
		[Association(Name="Animal_Celo", Storage="_Animal", ThisKey="IdHembra", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.Celo.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.Celo.Add(this);
						this._IdHembra = value.Id;
					}
					else
					{
						this._IdHembra = default(int);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SincronizacionCelo")]
	public partial class SincronizacionCelo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdHembra;
		
		private System.Nullable<int> _IdVeterinario;
		
		private System.Nullable<System.DateTime> _FechaColocacion;
		
		private System.Nullable<System.DateTime> _FechaRetirada;
		
		private System.Nullable<System.DateTime> _FechaInyeccion;
		
		private System.Nullable<System.DateTime> _FechaPrevision;
		
		private EntityRef<Veterinario> _Veterinario;
		
		private EntityRef<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdHembraChanging(int value);
    partial void OnIdHembraChanged();
    partial void OnIdVeterinarioChanging(System.Nullable<int> value);
    partial void OnIdVeterinarioChanged();
    partial void OnFechaColocacionChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaColocacionChanged();
    partial void OnFechaRetiradaChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaRetiradaChanged();
    partial void OnFechaInyeccionChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaInyeccionChanged();
    partial void OnFechaPrevisionChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaPrevisionChanged();
    #endregion
		
		public SincronizacionCelo()
		{
			this._Veterinario = default(EntityRef<Veterinario>);
			this._Animal = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdHembra", DbType="Int NOT NULL")]
		public int IdHembra
		{
			get
			{
				return this._IdHembra;
			}
			set
			{
				if ((this._IdHembra != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdHembraChanging(value);
					this.SendPropertyChanging();
					this._IdHembra = value;
					this.SendPropertyChanged("IdHembra");
					this.OnIdHembraChanged();
				}
			}
		}
		
		[Column(Storage="_IdVeterinario", DbType="Int")]
		public System.Nullable<int> IdVeterinario
		{
			get
			{
				return this._IdVeterinario;
			}
			set
			{
				if ((this._IdVeterinario != value))
				{
					if (this._Veterinario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdVeterinarioChanging(value);
					this.SendPropertyChanging();
					this._IdVeterinario = value;
					this.SendPropertyChanged("IdVeterinario");
					this.OnIdVeterinarioChanged();
				}
			}
		}
		
		[Column(Storage="_FechaColocacion", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaColocacion
		{
			get
			{
				return this._FechaColocacion;
			}
			set
			{
				if ((this._FechaColocacion != value))
				{
					this.OnFechaColocacionChanging(value);
					this.SendPropertyChanging();
					this._FechaColocacion = value;
					this.SendPropertyChanged("FechaColocacion");
					this.OnFechaColocacionChanged();
				}
			}
		}
		
		[Column(Storage="_FechaRetirada", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaRetirada
		{
			get
			{
				return this._FechaRetirada;
			}
			set
			{
				if ((this._FechaRetirada != value))
				{
					this.OnFechaRetiradaChanging(value);
					this.SendPropertyChanging();
					this._FechaRetirada = value;
					this.SendPropertyChanged("FechaRetirada");
					this.OnFechaRetiradaChanged();
				}
			}
		}
		
		[Column(Storage="_FechaInyeccion", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaInyeccion
		{
			get
			{
				return this._FechaInyeccion;
			}
			set
			{
				if ((this._FechaInyeccion != value))
				{
					this.OnFechaInyeccionChanging(value);
					this.SendPropertyChanging();
					this._FechaInyeccion = value;
					this.SendPropertyChanged("FechaInyeccion");
					this.OnFechaInyeccionChanged();
				}
			}
		}
		
		[Column(Storage="_FechaPrevision", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaPrevision
		{
			get
			{
				return this._FechaPrevision;
			}
			set
			{
				if ((this._FechaPrevision != value))
				{
					this.OnFechaPrevisionChanging(value);
					this.SendPropertyChanging();
					this._FechaPrevision = value;
					this.SendPropertyChanged("FechaPrevision");
					this.OnFechaPrevisionChanged();
				}
			}
		}
		
		[Association(Name="Veterinario_SincronizacionCelo", Storage="_Veterinario", ThisKey="IdVeterinario", OtherKey="Id", IsForeignKey=true)]
		public Veterinario Veterinario
		{
			get
			{
				return this._Veterinario.Entity;
			}
			set
			{
				Veterinario previousValue = this._Veterinario.Entity;
				if (((previousValue != value) 
							|| (this._Veterinario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Veterinario.Entity = null;
						previousValue.SincronizacionCelo.Remove(this);
					}
					this._Veterinario.Entity = value;
					if ((value != null))
					{
						value.SincronizacionCelo.Add(this);
						this._IdVeterinario = value.Id;
					}
					else
					{
						this._IdVeterinario = default(Nullable<int>);
					}
					this.SendPropertyChanged("Veterinario");
				}
			}
		}
		
		[Association(Name="Animal_SincronizacionCelo", Storage="_Animal", ThisKey="IdHembra", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.SincronizacionCelo.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.SincronizacionCelo.Add(this);
						this._IdHembra = value.Id;
					}
					else
					{
						this._IdHembra = default(int);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.LoteAnimal")]
	public partial class LoteAnimal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdTipo;
		
		private int _IdExplotacion;
		
		private System.Nullable<int> _IdParidera;
		
		private string _Descripcion;
		
		private System.DateTime _FechaAlta;
		
		private System.Nullable<System.DateTime> _FechaBaja;
		
		private EntitySet<AniLot> _AniLot;
		
		private EntitySet<LoteAnimal> _LoteAnimal2;
		
		private EntitySet<Cubricion> _Cubricion;
		
		private EntitySet<Pastoreo> _Pastoreo;
		
		private EntityRef<LoteAnimal> _LoteAnimal1;
		
		private EntityRef<TipoLote> _TipoLote;
		
		private EntityRef<Explotacion> _Explotacion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdTipoChanging(int value);
    partial void OnIdTipoChanged();
    partial void OnIdExplotacionChanging(int value);
    partial void OnIdExplotacionChanged();
    partial void OnIdParideraChanging(System.Nullable<int> value);
    partial void OnIdParideraChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    partial void OnFechaAltaChanging(System.DateTime value);
    partial void OnFechaAltaChanged();
    partial void OnFechaBajaChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaBajaChanged();
    #endregion
		
		public LoteAnimal()
		{
			this._AniLot = new EntitySet<AniLot>(new Action<AniLot>(this.attach_AniLot), new Action<AniLot>(this.detach_AniLot));
			this._LoteAnimal2 = new EntitySet<LoteAnimal>(new Action<LoteAnimal>(this.attach_LoteAnimal2), new Action<LoteAnimal>(this.detach_LoteAnimal2));
			this._Cubricion = new EntitySet<Cubricion>(new Action<Cubricion>(this.attach_Cubricion), new Action<Cubricion>(this.detach_Cubricion));
			this._Pastoreo = new EntitySet<Pastoreo>(new Action<Pastoreo>(this.attach_Pastoreo), new Action<Pastoreo>(this.detach_Pastoreo));
			this._LoteAnimal1 = default(EntityRef<LoteAnimal>);
			this._TipoLote = default(EntityRef<TipoLote>);
			this._Explotacion = default(EntityRef<Explotacion>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdTipo", DbType="Int NOT NULL")]
		public int IdTipo
		{
			get
			{
				return this._IdTipo;
			}
			set
			{
				if ((this._IdTipo != value))
				{
					if (this._TipoLote.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTipoChanging(value);
					this.SendPropertyChanging();
					this._IdTipo = value;
					this.SendPropertyChanged("IdTipo");
					this.OnIdTipoChanged();
				}
			}
		}
		
		[Column(Storage="_IdExplotacion", DbType="Int NOT NULL")]
		public int IdExplotacion
		{
			get
			{
				return this._IdExplotacion;
			}
			set
			{
				if ((this._IdExplotacion != value))
				{
					if (this._Explotacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdExplotacionChanging(value);
					this.SendPropertyChanging();
					this._IdExplotacion = value;
					this.SendPropertyChanged("IdExplotacion");
					this.OnIdExplotacionChanged();
				}
			}
		}
		
		[Column(Storage="_IdParidera", DbType="Int")]
		public System.Nullable<int> IdParidera
		{
			get
			{
				return this._IdParidera;
			}
			set
			{
				if ((this._IdParidera != value))
				{
					if (this._LoteAnimal1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdParideraChanging(value);
					this.SendPropertyChanging();
					this._IdParidera = value;
					this.SendPropertyChanged("IdParidera");
					this.OnIdParideraChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Column(Storage="_FechaAlta", DbType="DateTime NOT NULL")]
		public System.DateTime FechaAlta
		{
			get
			{
				return this._FechaAlta;
			}
			set
			{
				if ((this._FechaAlta != value))
				{
					this.OnFechaAltaChanging(value);
					this.SendPropertyChanging();
					this._FechaAlta = value;
					this.SendPropertyChanged("FechaAlta");
					this.OnFechaAltaChanged();
				}
			}
		}
		
		[Column(Storage="_FechaBaja", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaBaja
		{
			get
			{
				return this._FechaBaja;
			}
			set
			{
				if ((this._FechaBaja != value))
				{
					this.OnFechaBajaChanging(value);
					this.SendPropertyChanging();
					this._FechaBaja = value;
					this.SendPropertyChanged("FechaBaja");
					this.OnFechaBajaChanged();
				}
			}
		}
		
		[Association(Name="LoteAnimal_AniLot", Storage="_AniLot", ThisKey="Id", OtherKey="IdLote")]
		public EntitySet<AniLot> AniLot
		{
			get
			{
				return this._AniLot;
			}
			set
			{
				this._AniLot.Assign(value);
			}
		}
		
		[Association(Name="LoteAnimal_LoteAnimal", Storage="_LoteAnimal2", ThisKey="Id", OtherKey="IdParidera")]
		public EntitySet<LoteAnimal> LoteAnimal2
		{
			get
			{
				return this._LoteAnimal2;
			}
			set
			{
				this._LoteAnimal2.Assign(value);
			}
		}
		
		[Association(Name="LoteAnimal_Cubricion", Storage="_Cubricion", ThisKey="Id", OtherKey="IdLote")]
		public EntitySet<Cubricion> Cubricion
		{
			get
			{
				return this._Cubricion;
			}
			set
			{
				this._Cubricion.Assign(value);
			}
		}
		
		[Association(Name="LoteAnimal_Pastoreo", Storage="_Pastoreo", ThisKey="Id", OtherKey="IdLote")]
		public EntitySet<Pastoreo> Pastoreo
		{
			get
			{
				return this._Pastoreo;
			}
			set
			{
				this._Pastoreo.Assign(value);
			}
		}
		
		[Association(Name="LoteAnimal_LoteAnimal", Storage="_LoteAnimal1", ThisKey="IdParidera", OtherKey="Id", IsForeignKey=true)]
		public LoteAnimal LoteAnimal1
		{
			get
			{
				return this._LoteAnimal1.Entity;
			}
			set
			{
				LoteAnimal previousValue = this._LoteAnimal1.Entity;
				if (((previousValue != value) 
							|| (this._LoteAnimal1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoteAnimal1.Entity = null;
						previousValue.LoteAnimal2.Remove(this);
					}
					this._LoteAnimal1.Entity = value;
					if ((value != null))
					{
						value.LoteAnimal2.Add(this);
						this._IdParidera = value.Id;
					}
					else
					{
						this._IdParidera = default(Nullable<int>);
					}
					this.SendPropertyChanged("LoteAnimal1");
				}
			}
		}
		
		[Association(Name="TipoLote_LoteAnimal", Storage="_TipoLote", ThisKey="IdTipo", OtherKey="Id", IsForeignKey=true)]
		public TipoLote TipoLote
		{
			get
			{
				return this._TipoLote.Entity;
			}
			set
			{
				TipoLote previousValue = this._TipoLote.Entity;
				if (((previousValue != value) 
							|| (this._TipoLote.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoLote.Entity = null;
						previousValue.LoteAnimal.Remove(this);
					}
					this._TipoLote.Entity = value;
					if ((value != null))
					{
						value.LoteAnimal.Add(this);
						this._IdTipo = value.Id;
					}
					else
					{
						this._IdTipo = default(int);
					}
					this.SendPropertyChanged("TipoLote");
				}
			}
		}
		
		[Association(Name="Explotacion_LoteAnimal", Storage="_Explotacion", ThisKey="IdExplotacion", OtherKey="Id", IsForeignKey=true)]
		public Explotacion Explotacion
		{
			get
			{
				return this._Explotacion.Entity;
			}
			set
			{
				Explotacion previousValue = this._Explotacion.Entity;
				if (((previousValue != value) 
							|| (this._Explotacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Explotacion.Entity = null;
						previousValue.LoteAnimal.Remove(this);
					}
					this._Explotacion.Entity = value;
					if ((value != null))
					{
						value.LoteAnimal.Add(this);
						this._IdExplotacion = value.Id;
					}
					else
					{
						this._IdExplotacion = default(int);
					}
					this.SendPropertyChanged("Explotacion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AniLot(AniLot entity)
		{
			this.SendPropertyChanging();
			entity.LoteAnimal = this;
		}
		
		private void detach_AniLot(AniLot entity)
		{
			this.SendPropertyChanging();
			entity.LoteAnimal = null;
		}
		
		private void attach_LoteAnimal2(LoteAnimal entity)
		{
			this.SendPropertyChanging();
			entity.LoteAnimal1 = this;
		}
		
		private void detach_LoteAnimal2(LoteAnimal entity)
		{
			this.SendPropertyChanging();
			entity.LoteAnimal1 = null;
		}
		
		private void attach_Cubricion(Cubricion entity)
		{
			this.SendPropertyChanging();
			entity.LoteAnimal = this;
		}
		
		private void detach_Cubricion(Cubricion entity)
		{
			this.SendPropertyChanging();
			entity.LoteAnimal = null;
		}
		
		private void attach_Pastoreo(Pastoreo entity)
		{
			this.SendPropertyChanging();
			entity.LoteAnimal = this;
		}
		
		private void detach_Pastoreo(Pastoreo entity)
		{
			this.SendPropertyChanging();
			entity.LoteAnimal = null;
		}
	}
	
	[Table(Name="dbo.TratEnfermedad")]
	public partial class TratEnfermedad : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdDiagnostico;
		
		private System.Nullable<int> _IdVeterinario;
		
		private string _Detalle;
		
		private int _Duracion;
		
		private System.Nullable<decimal> _SupresionLeche;
		
		private System.Nullable<decimal> _SupresionCarne;
		
		private System.DateTime _Fecha;
		
		private bool _Modificable;
		
		private EntitySet<Gasto> _Gasto;
		
		private EntitySet<Receta> _Receta;
		
		private EntityRef<Veterinario> _Veterinario;
		
		private EntityRef<DiagAnimal> _DiagAnimal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdDiagnosticoChanging(int value);
    partial void OnIdDiagnosticoChanged();
    partial void OnIdVeterinarioChanging(System.Nullable<int> value);
    partial void OnIdVeterinarioChanged();
    partial void OnDetalleChanging(string value);
    partial void OnDetalleChanged();
    partial void OnDuracionChanging(int value);
    partial void OnDuracionChanged();
    partial void OnSupresionLecheChanging(System.Nullable<decimal> value);
    partial void OnSupresionLecheChanged();
    partial void OnSupresionCarneChanging(System.Nullable<decimal> value);
    partial void OnSupresionCarneChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    partial void OnModificableChanging(bool value);
    partial void OnModificableChanged();
    #endregion
		
		public TratEnfermedad()
		{
			this._Gasto = new EntitySet<Gasto>(new Action<Gasto>(this.attach_Gasto), new Action<Gasto>(this.detach_Gasto));
			this._Receta = new EntitySet<Receta>(new Action<Receta>(this.attach_Receta), new Action<Receta>(this.detach_Receta));
			this._Veterinario = default(EntityRef<Veterinario>);
			this._DiagAnimal = default(EntityRef<DiagAnimal>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdDiagnostico", DbType="Int NOT NULL")]
		public int IdDiagnostico
		{
			get
			{
				return this._IdDiagnostico;
			}
			set
			{
				if ((this._IdDiagnostico != value))
				{
					if (this._DiagAnimal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdDiagnosticoChanging(value);
					this.SendPropertyChanging();
					this._IdDiagnostico = value;
					this.SendPropertyChanged("IdDiagnostico");
					this.OnIdDiagnosticoChanged();
				}
			}
		}
		
		[Column(Storage="_IdVeterinario", DbType="Int")]
		public System.Nullable<int> IdVeterinario
		{
			get
			{
				return this._IdVeterinario;
			}
			set
			{
				if ((this._IdVeterinario != value))
				{
					if (this._Veterinario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdVeterinarioChanging(value);
					this.SendPropertyChanging();
					this._IdVeterinario = value;
					this.SendPropertyChanged("IdVeterinario");
					this.OnIdVeterinarioChanged();
				}
			}
		}
		
		[Column(Storage="_Detalle", DbType="VarChar(150)")]
		public string Detalle
		{
			get
			{
				return this._Detalle;
			}
			set
			{
				if ((this._Detalle != value))
				{
					this.OnDetalleChanging(value);
					this.SendPropertyChanging();
					this._Detalle = value;
					this.SendPropertyChanged("Detalle");
					this.OnDetalleChanged();
				}
			}
		}
		
		[Column(Storage="_Duracion", DbType="Int NOT NULL")]
		public int Duracion
		{
			get
			{
				return this._Duracion;
			}
			set
			{
				if ((this._Duracion != value))
				{
					this.OnDuracionChanging(value);
					this.SendPropertyChanging();
					this._Duracion = value;
					this.SendPropertyChanged("Duracion");
					this.OnDuracionChanged();
				}
			}
		}
		
		[Column(Storage="_SupresionLeche", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> SupresionLeche
		{
			get
			{
				return this._SupresionLeche;
			}
			set
			{
				if ((this._SupresionLeche != value))
				{
					this.OnSupresionLecheChanging(value);
					this.SendPropertyChanging();
					this._SupresionLeche = value;
					this.SendPropertyChanged("SupresionLeche");
					this.OnSupresionLecheChanged();
				}
			}
		}
		
		[Column(Storage="_SupresionCarne", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> SupresionCarne
		{
			get
			{
				return this._SupresionCarne;
			}
			set
			{
				if ((this._SupresionCarne != value))
				{
					this.OnSupresionCarneChanging(value);
					this.SendPropertyChanging();
					this._SupresionCarne = value;
					this.SendPropertyChanged("SupresionCarne");
					this.OnSupresionCarneChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Column(Storage="_Modificable", DbType="Bit NOT NULL")]
		public bool Modificable
		{
			get
			{
				return this._Modificable;
			}
			set
			{
				if ((this._Modificable != value))
				{
					this.OnModificableChanging(value);
					this.SendPropertyChanging();
					this._Modificable = value;
					this.SendPropertyChanged("Modificable");
					this.OnModificableChanged();
				}
			}
		}
		
		[Association(Name="TratEnfermedad_Gasto", Storage="_Gasto", ThisKey="Id", OtherKey="IdTratamiento")]
		public EntitySet<Gasto> Gasto
		{
			get
			{
				return this._Gasto;
			}
			set
			{
				this._Gasto.Assign(value);
			}
		}
		
		[Association(Name="TratEnfermedad_Receta", Storage="_Receta", ThisKey="Id", OtherKey="IdTratamiento")]
		public EntitySet<Receta> Receta
		{
			get
			{
				return this._Receta;
			}
			set
			{
				this._Receta.Assign(value);
			}
		}
		
		[Association(Name="Veterinario_TratEnfermedad", Storage="_Veterinario", ThisKey="IdVeterinario", OtherKey="Id", IsForeignKey=true)]
		public Veterinario Veterinario
		{
			get
			{
				return this._Veterinario.Entity;
			}
			set
			{
				Veterinario previousValue = this._Veterinario.Entity;
				if (((previousValue != value) 
							|| (this._Veterinario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Veterinario.Entity = null;
						previousValue.TratEnfermedad.Remove(this);
					}
					this._Veterinario.Entity = value;
					if ((value != null))
					{
						value.TratEnfermedad.Add(this);
						this._IdVeterinario = value.Id;
					}
					else
					{
						this._IdVeterinario = default(Nullable<int>);
					}
					this.SendPropertyChanged("Veterinario");
				}
			}
		}
		
		[Association(Name="DiagAnimal_TratEnfermedad", Storage="_DiagAnimal", ThisKey="IdDiagnostico", OtherKey="Id", IsForeignKey=true)]
		public DiagAnimal DiagAnimal
		{
			get
			{
				return this._DiagAnimal.Entity;
			}
			set
			{
				DiagAnimal previousValue = this._DiagAnimal.Entity;
				if (((previousValue != value) 
							|| (this._DiagAnimal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DiagAnimal.Entity = null;
						previousValue.TratEnfermedad.Remove(this);
					}
					this._DiagAnimal.Entity = value;
					if ((value != null))
					{
						value.TratEnfermedad.Add(this);
						this._IdDiagnostico = value.Id;
					}
					else
					{
						this._IdDiagnostico = default(int);
					}
					this.SendPropertyChanged("DiagAnimal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Gasto(Gasto entity)
		{
			this.SendPropertyChanging();
			entity.TratEnfermedad = this;
		}
		
		private void detach_Gasto(Gasto entity)
		{
			this.SendPropertyChanging();
			entity.TratEnfermedad = null;
		}
		
		private void attach_Receta(Receta entity)
		{
			this.SendPropertyChanging();
			entity.TratEnfermedad = this;
		}
		
		private void detach_Receta(Receta entity)
		{
			this.SendPropertyChanging();
			entity.TratEnfermedad = null;
		}
	}
	
	[Table(Name="dbo.Lactacion")]
	public partial class Lactacion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdHembra;
		
		private int _Numero;
		
		private System.DateTime _FechaInicio;
		
		private System.Nullable<System.DateTime> _FechaFin;
		
		private bool _Modificable;
		
		private EntitySet<Extendida> _Extendida;
		
		private EntitySet<ControlLeche> _ControlLeche;
		
		private EntityRef<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdHembraChanging(int value);
    partial void OnIdHembraChanged();
    partial void OnNumeroChanging(int value);
    partial void OnNumeroChanged();
    partial void OnFechaInicioChanging(System.DateTime value);
    partial void OnFechaInicioChanged();
    partial void OnFechaFinChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaFinChanged();
    partial void OnModificableChanging(bool value);
    partial void OnModificableChanged();
    #endregion
		
		public Lactacion()
		{
			this._Extendida = new EntitySet<Extendida>(new Action<Extendida>(this.attach_Extendida), new Action<Extendida>(this.detach_Extendida));
			this._ControlLeche = new EntitySet<ControlLeche>(new Action<ControlLeche>(this.attach_ControlLeche), new Action<ControlLeche>(this.detach_ControlLeche));
			this._Animal = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdHembra", DbType="Int NOT NULL")]
		public int IdHembra
		{
			get
			{
				return this._IdHembra;
			}
			set
			{
				if ((this._IdHembra != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdHembraChanging(value);
					this.SendPropertyChanging();
					this._IdHembra = value;
					this.SendPropertyChanged("IdHembra");
					this.OnIdHembraChanged();
				}
			}
		}
		
		[Column(Storage="_Numero", DbType="Int NOT NULL")]
		public int Numero
		{
			get
			{
				return this._Numero;
			}
			set
			{
				if ((this._Numero != value))
				{
					this.OnNumeroChanging(value);
					this.SendPropertyChanging();
					this._Numero = value;
					this.SendPropertyChanged("Numero");
					this.OnNumeroChanged();
				}
			}
		}
		
		[Column(Storage="_FechaInicio", DbType="DateTime NOT NULL")]
		public System.DateTime FechaInicio
		{
			get
			{
				return this._FechaInicio;
			}
			set
			{
				if ((this._FechaInicio != value))
				{
					this.OnFechaInicioChanging(value);
					this.SendPropertyChanging();
					this._FechaInicio = value;
					this.SendPropertyChanged("FechaInicio");
					this.OnFechaInicioChanged();
				}
			}
		}
		
		[Column(Storage="_FechaFin", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaFin
		{
			get
			{
				return this._FechaFin;
			}
			set
			{
				if ((this._FechaFin != value))
				{
					this.OnFechaFinChanging(value);
					this.SendPropertyChanging();
					this._FechaFin = value;
					this.SendPropertyChanged("FechaFin");
					this.OnFechaFinChanged();
				}
			}
		}
		
		[Column(Storage="_Modificable", DbType="Bit NOT NULL")]
		public bool Modificable
		{
			get
			{
				return this._Modificable;
			}
			set
			{
				if ((this._Modificable != value))
				{
					this.OnModificableChanging(value);
					this.SendPropertyChanging();
					this._Modificable = value;
					this.SendPropertyChanged("Modificable");
					this.OnModificableChanged();
				}
			}
		}
		
		[Association(Name="Lactacion_Extendida", Storage="_Extendida", ThisKey="Id", OtherKey="IdLactacion")]
		public EntitySet<Extendida> Extendida
		{
			get
			{
				return this._Extendida;
			}
			set
			{
				this._Extendida.Assign(value);
			}
		}
		
		[Association(Name="Lactacion_ControlLeche", Storage="_ControlLeche", ThisKey="Id", OtherKey="IdLactacion")]
		public EntitySet<ControlLeche> ControlLeche
		{
			get
			{
				return this._ControlLeche;
			}
			set
			{
				this._ControlLeche.Assign(value);
			}
		}
		
		[Association(Name="Animal_Lactacion", Storage="_Animal", ThisKey="IdHembra", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.Lactacion.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.Lactacion.Add(this);
						this._IdHembra = value.Id;
					}
					else
					{
						this._IdHembra = default(int);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Extendida(Extendida entity)
		{
			this.SendPropertyChanging();
			entity.Lactacion = this;
		}
		
		private void detach_Extendida(Extendida entity)
		{
			this.SendPropertyChanging();
			entity.Lactacion = null;
		}
		
		private void attach_ControlLeche(ControlLeche entity)
		{
			this.SendPropertyChanging();
			entity.Lactacion = this;
		}
		
		private void detach_ControlLeche(ControlLeche entity)
		{
			this.SendPropertyChanging();
			entity.Lactacion = null;
		}
	}
	
	[Table(Name="dbo.Control")]
	public partial class ControlLeche : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdLactacion;
		
		private int _IdControl;
		
		private System.Nullable<int> _IdOrdeno;
		
		private int _Numero;
		
		private System.DateTime _Fecha;
		
		private System.Nullable<decimal> _LecheManana;
		
		private System.Nullable<decimal> _LecheTarde;
		
		private System.Nullable<decimal> _LecheNoche;
		
		private bool _Modificable;
		
		private EntitySet<MuestraControl> _MuestraControl;
		
		private EntityRef<Lactacion> _Lactacion;
		
		private EntityRef<StatusControl> _StatusControl;
		
		private EntityRef<StatusOrdeno> _StatusOrdeno;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdLactacionChanging(int value);
    partial void OnIdLactacionChanged();
    partial void OnIdControlChanging(int value);
    partial void OnIdControlChanged();
    partial void OnIdOrdenoChanging(System.Nullable<int> value);
    partial void OnIdOrdenoChanged();
    partial void OnNumeroChanging(int value);
    partial void OnNumeroChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    partial void OnLecheMananaChanging(System.Nullable<decimal> value);
    partial void OnLecheMananaChanged();
    partial void OnLecheTardeChanging(System.Nullable<decimal> value);
    partial void OnLecheTardeChanged();
    partial void OnLecheNocheChanging(System.Nullable<decimal> value);
    partial void OnLecheNocheChanged();
    partial void OnModificableChanging(bool value);
    partial void OnModificableChanged();
    #endregion
		
		public ControlLeche()
		{
			this._MuestraControl = new EntitySet<MuestraControl>(new Action<MuestraControl>(this.attach_MuestraControl), new Action<MuestraControl>(this.detach_MuestraControl));
			this._Lactacion = default(EntityRef<Lactacion>);
			this._StatusControl = default(EntityRef<StatusControl>);
			this._StatusOrdeno = default(EntityRef<StatusOrdeno>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdLactacion", DbType="Int NOT NULL")]
		public int IdLactacion
		{
			get
			{
				return this._IdLactacion;
			}
			set
			{
				if ((this._IdLactacion != value))
				{
					if (this._Lactacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdLactacionChanging(value);
					this.SendPropertyChanging();
					this._IdLactacion = value;
					this.SendPropertyChanged("IdLactacion");
					this.OnIdLactacionChanged();
				}
			}
		}
		
		[Column(Storage="_IdControl", DbType="Int NOT NULL")]
		public int IdControl
		{
			get
			{
				return this._IdControl;
			}
			set
			{
				if ((this._IdControl != value))
				{
					if (this._StatusControl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdControlChanging(value);
					this.SendPropertyChanging();
					this._IdControl = value;
					this.SendPropertyChanged("IdControl");
					this.OnIdControlChanged();
				}
			}
		}
		
		[Column(Storage="_IdOrdeno", DbType="Int")]
		public System.Nullable<int> IdOrdeno
		{
			get
			{
				return this._IdOrdeno;
			}
			set
			{
				if ((this._IdOrdeno != value))
				{
					if (this._StatusOrdeno.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdOrdenoChanging(value);
					this.SendPropertyChanging();
					this._IdOrdeno = value;
					this.SendPropertyChanged("IdOrdeno");
					this.OnIdOrdenoChanged();
				}
			}
		}
		
		[Column(Storage="_Numero", DbType="Int NOT NULL")]
		public int Numero
		{
			get
			{
				return this._Numero;
			}
			set
			{
				if ((this._Numero != value))
				{
					this.OnNumeroChanging(value);
					this.SendPropertyChanging();
					this._Numero = value;
					this.SendPropertyChanged("Numero");
					this.OnNumeroChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Column(Storage="_LecheManana", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> LecheManana
		{
			get
			{
				return this._LecheManana;
			}
			set
			{
				if ((this._LecheManana != value))
				{
					this.OnLecheMananaChanging(value);
					this.SendPropertyChanging();
					this._LecheManana = value;
					this.SendPropertyChanged("LecheManana");
					this.OnLecheMananaChanged();
				}
			}
		}
		
		[Column(Storage="_LecheTarde", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> LecheTarde
		{
			get
			{
				return this._LecheTarde;
			}
			set
			{
				if ((this._LecheTarde != value))
				{
					this.OnLecheTardeChanging(value);
					this.SendPropertyChanging();
					this._LecheTarde = value;
					this.SendPropertyChanged("LecheTarde");
					this.OnLecheTardeChanged();
				}
			}
		}
		
		[Column(Storage="_LecheNoche", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> LecheNoche
		{
			get
			{
				return this._LecheNoche;
			}
			set
			{
				if ((this._LecheNoche != value))
				{
					this.OnLecheNocheChanging(value);
					this.SendPropertyChanging();
					this._LecheNoche = value;
					this.SendPropertyChanged("LecheNoche");
					this.OnLecheNocheChanged();
				}
			}
		}
		
		[Column(Storage="_Modificable", DbType="Bit NOT NULL")]
		public bool Modificable
		{
			get
			{
				return this._Modificable;
			}
			set
			{
				if ((this._Modificable != value))
				{
					this.OnModificableChanging(value);
					this.SendPropertyChanging();
					this._Modificable = value;
					this.SendPropertyChanged("Modificable");
					this.OnModificableChanged();
				}
			}
		}
		
		[Association(Name="ControlLeche_MuestraControl", Storage="_MuestraControl", ThisKey="Id", OtherKey="IdControl")]
		public EntitySet<MuestraControl> MuestraControl
		{
			get
			{
				return this._MuestraControl;
			}
			set
			{
				this._MuestraControl.Assign(value);
			}
		}
		
		[Association(Name="Lactacion_ControlLeche", Storage="_Lactacion", ThisKey="IdLactacion", OtherKey="Id", IsForeignKey=true)]
		public Lactacion Lactacion
		{
			get
			{
				return this._Lactacion.Entity;
			}
			set
			{
				Lactacion previousValue = this._Lactacion.Entity;
				if (((previousValue != value) 
							|| (this._Lactacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lactacion.Entity = null;
						previousValue.ControlLeche.Remove(this);
					}
					this._Lactacion.Entity = value;
					if ((value != null))
					{
						value.ControlLeche.Add(this);
						this._IdLactacion = value.Id;
					}
					else
					{
						this._IdLactacion = default(int);
					}
					this.SendPropertyChanged("Lactacion");
				}
			}
		}
		
		[Association(Name="StatusControl_ControlLeche", Storage="_StatusControl", ThisKey="IdControl", OtherKey="Id", IsForeignKey=true)]
		public StatusControl StatusControl
		{
			get
			{
				return this._StatusControl.Entity;
			}
			set
			{
				StatusControl previousValue = this._StatusControl.Entity;
				if (((previousValue != value) 
							|| (this._StatusControl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StatusControl.Entity = null;
						previousValue.ControlLeche.Remove(this);
					}
					this._StatusControl.Entity = value;
					if ((value != null))
					{
						value.ControlLeche.Add(this);
						this._IdControl = value.Id;
					}
					else
					{
						this._IdControl = default(int);
					}
					this.SendPropertyChanged("StatusControl");
				}
			}
		}
		
		[Association(Name="StatusOrdeno_ControlLeche", Storage="_StatusOrdeno", ThisKey="IdOrdeno", OtherKey="Id", IsForeignKey=true)]
		public StatusOrdeno StatusOrdeno
		{
			get
			{
				return this._StatusOrdeno.Entity;
			}
			set
			{
				StatusOrdeno previousValue = this._StatusOrdeno.Entity;
				if (((previousValue != value) 
							|| (this._StatusOrdeno.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StatusOrdeno.Entity = null;
						previousValue.ControlLeche.Remove(this);
					}
					this._StatusOrdeno.Entity = value;
					if ((value != null))
					{
						value.ControlLeche.Add(this);
						this._IdOrdeno = value.Id;
					}
					else
					{
						this._IdOrdeno = default(Nullable<int>);
					}
					this.SendPropertyChanged("StatusOrdeno");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MuestraControl(MuestraControl entity)
		{
			this.SendPropertyChanging();
			entity.ControlLeche = this;
		}
		
		private void detach_MuestraControl(MuestraControl entity)
		{
			this.SendPropertyChanging();
			entity.ControlLeche = null;
		}
	}
	
	[Table(Name="dbo.Inseminacion")]
	public partial class Inseminacion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdMacho;
		
		private int _IdHembra;
		
		private int _IdTipo;
		
		private int _IdVeterinario;
		
		private System.Nullable<int> _IdEmbrion;
		
		private int _Numero;
		
		private System.Nullable<int> _Dosis;
		
		private System.DateTime _Fecha;
		
		private bool _Modificable;
		
		private EntitySet<InsPar> _InsPar;
		
		private EntitySet<Gasto> _Gasto;
		
		private EntityRef<TipoInseminacion> _TipoInseminacion;
		
		private EntityRef<Veterinario> _Veterinario;
		
		private EntityRef<Animal> _Animal;
		
		private EntityRef<Animal> _Animal1;
		
		private EntityRef<Animal> _Animal2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdMachoChanging(int value);
    partial void OnIdMachoChanged();
    partial void OnIdHembraChanging(int value);
    partial void OnIdHembraChanged();
    partial void OnIdTipoChanging(int value);
    partial void OnIdTipoChanged();
    partial void OnIdVeterinarioChanging(int value);
    partial void OnIdVeterinarioChanged();
    partial void OnIdEmbrionChanging(System.Nullable<int> value);
    partial void OnIdEmbrionChanged();
    partial void OnNumeroChanging(int value);
    partial void OnNumeroChanged();
    partial void OnDosisChanging(System.Nullable<int> value);
    partial void OnDosisChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    partial void OnModificableChanging(bool value);
    partial void OnModificableChanged();
    #endregion
		
		public Inseminacion()
		{
			this._InsPar = new EntitySet<InsPar>(new Action<InsPar>(this.attach_InsPar), new Action<InsPar>(this.detach_InsPar));
			this._Gasto = new EntitySet<Gasto>(new Action<Gasto>(this.attach_Gasto), new Action<Gasto>(this.detach_Gasto));
			this._TipoInseminacion = default(EntityRef<TipoInseminacion>);
			this._Veterinario = default(EntityRef<Veterinario>);
			this._Animal = default(EntityRef<Animal>);
			this._Animal1 = default(EntityRef<Animal>);
			this._Animal2 = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdMacho", DbType="Int NOT NULL")]
		public int IdMacho
		{
			get
			{
				return this._IdMacho;
			}
			set
			{
				if ((this._IdMacho != value))
				{
					if (this._Animal2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdMachoChanging(value);
					this.SendPropertyChanging();
					this._IdMacho = value;
					this.SendPropertyChanged("IdMacho");
					this.OnIdMachoChanged();
				}
			}
		}
		
		[Column(Storage="_IdHembra", DbType="Int NOT NULL")]
		public int IdHembra
		{
			get
			{
				return this._IdHembra;
			}
			set
			{
				if ((this._IdHembra != value))
				{
					if (this._Animal1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdHembraChanging(value);
					this.SendPropertyChanging();
					this._IdHembra = value;
					this.SendPropertyChanged("IdHembra");
					this.OnIdHembraChanged();
				}
			}
		}
		
		[Column(Storage="_IdTipo", DbType="Int NOT NULL")]
		public int IdTipo
		{
			get
			{
				return this._IdTipo;
			}
			set
			{
				if ((this._IdTipo != value))
				{
					if (this._TipoInseminacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTipoChanging(value);
					this.SendPropertyChanging();
					this._IdTipo = value;
					this.SendPropertyChanged("IdTipo");
					this.OnIdTipoChanged();
				}
			}
		}
		
		[Column(Storage="_IdVeterinario", DbType="Int NOT NULL")]
		public int IdVeterinario
		{
			get
			{
				return this._IdVeterinario;
			}
			set
			{
				if ((this._IdVeterinario != value))
				{
					if (this._Veterinario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdVeterinarioChanging(value);
					this.SendPropertyChanging();
					this._IdVeterinario = value;
					this.SendPropertyChanged("IdVeterinario");
					this.OnIdVeterinarioChanged();
				}
			}
		}
		
		[Column(Storage="_IdEmbrion", DbType="Int")]
		public System.Nullable<int> IdEmbrion
		{
			get
			{
				return this._IdEmbrion;
			}
			set
			{
				if ((this._IdEmbrion != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdEmbrionChanging(value);
					this.SendPropertyChanging();
					this._IdEmbrion = value;
					this.SendPropertyChanged("IdEmbrion");
					this.OnIdEmbrionChanged();
				}
			}
		}
		
		[Column(Storage="_Numero", DbType="Int NOT NULL")]
		public int Numero
		{
			get
			{
				return this._Numero;
			}
			set
			{
				if ((this._Numero != value))
				{
					this.OnNumeroChanging(value);
					this.SendPropertyChanging();
					this._Numero = value;
					this.SendPropertyChanged("Numero");
					this.OnNumeroChanged();
				}
			}
		}
		
		[Column(Storage="_Dosis", DbType="Int")]
		public System.Nullable<int> Dosis
		{
			get
			{
				return this._Dosis;
			}
			set
			{
				if ((this._Dosis != value))
				{
					this.OnDosisChanging(value);
					this.SendPropertyChanging();
					this._Dosis = value;
					this.SendPropertyChanged("Dosis");
					this.OnDosisChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Column(Storage="_Modificable", DbType="Bit NOT NULL")]
		public bool Modificable
		{
			get
			{
				return this._Modificable;
			}
			set
			{
				if ((this._Modificable != value))
				{
					this.OnModificableChanging(value);
					this.SendPropertyChanging();
					this._Modificable = value;
					this.SendPropertyChanged("Modificable");
					this.OnModificableChanged();
				}
			}
		}
		
		[Association(Name="Inseminacion_InsPar", Storage="_InsPar", ThisKey="Id", OtherKey="IdInseminacion")]
		public EntitySet<InsPar> InsPar
		{
			get
			{
				return this._InsPar;
			}
			set
			{
				this._InsPar.Assign(value);
			}
		}
		
		[Association(Name="Inseminacion_Gasto", Storage="_Gasto", ThisKey="Id", OtherKey="IdInseminacion")]
		public EntitySet<Gasto> Gasto
		{
			get
			{
				return this._Gasto;
			}
			set
			{
				this._Gasto.Assign(value);
			}
		}
		
		[Association(Name="TipoInseminacion_Inseminacion", Storage="_TipoInseminacion", ThisKey="IdTipo", OtherKey="Id", IsForeignKey=true)]
		public TipoInseminacion TipoInseminacion
		{
			get
			{
				return this._TipoInseminacion.Entity;
			}
			set
			{
				TipoInseminacion previousValue = this._TipoInseminacion.Entity;
				if (((previousValue != value) 
							|| (this._TipoInseminacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoInseminacion.Entity = null;
						previousValue.Inseminacion.Remove(this);
					}
					this._TipoInseminacion.Entity = value;
					if ((value != null))
					{
						value.Inseminacion.Add(this);
						this._IdTipo = value.Id;
					}
					else
					{
						this._IdTipo = default(int);
					}
					this.SendPropertyChanged("TipoInseminacion");
				}
			}
		}
		
		[Association(Name="Veterinario_Inseminacion", Storage="_Veterinario", ThisKey="IdVeterinario", OtherKey="Id", IsForeignKey=true)]
		public Veterinario Veterinario
		{
			get
			{
				return this._Veterinario.Entity;
			}
			set
			{
				Veterinario previousValue = this._Veterinario.Entity;
				if (((previousValue != value) 
							|| (this._Veterinario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Veterinario.Entity = null;
						previousValue.Inseminacion.Remove(this);
					}
					this._Veterinario.Entity = value;
					if ((value != null))
					{
						value.Inseminacion.Add(this);
						this._IdVeterinario = value.Id;
					}
					else
					{
						this._IdVeterinario = default(int);
					}
					this.SendPropertyChanged("Veterinario");
				}
			}
		}
		
		[Association(Name="Animal_Inseminacion", Storage="_Animal", ThisKey="IdEmbrion", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.Inseminacion.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.Inseminacion.Add(this);
						this._IdEmbrion = value.Id;
					}
					else
					{
						this._IdEmbrion = default(Nullable<int>);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		[Association(Name="Animal_Inseminacion1", Storage="_Animal1", ThisKey="IdHembra", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal1
		{
			get
			{
				return this._Animal1.Entity;
			}
			set
			{
				Animal previousValue = this._Animal1.Entity;
				if (((previousValue != value) 
							|| (this._Animal1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal1.Entity = null;
						previousValue.Inseminacion1.Remove(this);
					}
					this._Animal1.Entity = value;
					if ((value != null))
					{
						value.Inseminacion1.Add(this);
						this._IdHembra = value.Id;
					}
					else
					{
						this._IdHembra = default(int);
					}
					this.SendPropertyChanged("Animal1");
				}
			}
		}
		
		[Association(Name="Animal_Inseminacion2", Storage="_Animal2", ThisKey="IdMacho", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal2
		{
			get
			{
				return this._Animal2.Entity;
			}
			set
			{
				Animal previousValue = this._Animal2.Entity;
				if (((previousValue != value) 
							|| (this._Animal2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal2.Entity = null;
						previousValue.Inseminacion2.Remove(this);
					}
					this._Animal2.Entity = value;
					if ((value != null))
					{
						value.Inseminacion2.Add(this);
						this._IdMacho = value.Id;
					}
					else
					{
						this._IdMacho = default(int);
					}
					this.SendPropertyChanged("Animal2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InsPar(InsPar entity)
		{
			this.SendPropertyChanging();
			entity.Inseminacion = this;
		}
		
		private void detach_InsPar(InsPar entity)
		{
			this.SendPropertyChanging();
			entity.Inseminacion = null;
		}
		
		private void attach_Gasto(Gasto entity)
		{
			this.SendPropertyChanging();
			entity.Inseminacion = this;
		}
		
		private void detach_Gasto(Gasto entity)
		{
			this.SendPropertyChanging();
			entity.Inseminacion = null;
		}
	}
	
	[Table(Name="dbo.DiagInseminacion")]
	public partial class DiagInseminacion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdTipo;
		
		private int _IdAnimal;
		
		private System.DateTime _Fecha;
		
		private bool _Resultado;
		
		private System.Nullable<int> _DiasGestacion;
		
		private bool _Modificable;
		
		private EntityRef<TipoDiagnostico> _TipoDiagnostico;
		
		private EntityRef<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdTipoChanging(int value);
    partial void OnIdTipoChanged();
    partial void OnIdAnimalChanging(int value);
    partial void OnIdAnimalChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    partial void OnResultadoChanging(bool value);
    partial void OnResultadoChanged();
    partial void OnDiasGestacionChanging(System.Nullable<int> value);
    partial void OnDiasGestacionChanged();
    partial void OnModificableChanging(bool value);
    partial void OnModificableChanged();
    #endregion
		
		public DiagInseminacion()
		{
			this._TipoDiagnostico = default(EntityRef<TipoDiagnostico>);
			this._Animal = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdTipo", DbType="Int NOT NULL")]
		public int IdTipo
		{
			get
			{
				return this._IdTipo;
			}
			set
			{
				if ((this._IdTipo != value))
				{
					if (this._TipoDiagnostico.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTipoChanging(value);
					this.SendPropertyChanging();
					this._IdTipo = value;
					this.SendPropertyChanged("IdTipo");
					this.OnIdTipoChanged();
				}
			}
		}
		
		[Column(Storage="_IdAnimal", DbType="Int NOT NULL")]
		public int IdAnimal
		{
			get
			{
				return this._IdAnimal;
			}
			set
			{
				if ((this._IdAnimal != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAnimalChanging(value);
					this.SendPropertyChanging();
					this._IdAnimal = value;
					this.SendPropertyChanged("IdAnimal");
					this.OnIdAnimalChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Column(Storage="_Resultado", DbType="Bit NOT NULL")]
		public bool Resultado
		{
			get
			{
				return this._Resultado;
			}
			set
			{
				if ((this._Resultado != value))
				{
					this.OnResultadoChanging(value);
					this.SendPropertyChanging();
					this._Resultado = value;
					this.SendPropertyChanged("Resultado");
					this.OnResultadoChanged();
				}
			}
		}
		
		[Column(Storage="_DiasGestacion", DbType="Int")]
		public System.Nullable<int> DiasGestacion
		{
			get
			{
				return this._DiasGestacion;
			}
			set
			{
				if ((this._DiasGestacion != value))
				{
					this.OnDiasGestacionChanging(value);
					this.SendPropertyChanging();
					this._DiasGestacion = value;
					this.SendPropertyChanged("DiasGestacion");
					this.OnDiasGestacionChanged();
				}
			}
		}
		
		[Column(Storage="_Modificable", DbType="Bit NOT NULL")]
		public bool Modificable
		{
			get
			{
				return this._Modificable;
			}
			set
			{
				if ((this._Modificable != value))
				{
					this.OnModificableChanging(value);
					this.SendPropertyChanging();
					this._Modificable = value;
					this.SendPropertyChanged("Modificable");
					this.OnModificableChanged();
				}
			}
		}
		
		[Association(Name="TipoDiagnostico_DiagInseminacion", Storage="_TipoDiagnostico", ThisKey="IdTipo", OtherKey="Id", IsForeignKey=true)]
		public TipoDiagnostico TipoDiagnostico
		{
			get
			{
				return this._TipoDiagnostico.Entity;
			}
			set
			{
				TipoDiagnostico previousValue = this._TipoDiagnostico.Entity;
				if (((previousValue != value) 
							|| (this._TipoDiagnostico.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoDiagnostico.Entity = null;
						previousValue.DiagInseminacion.Remove(this);
					}
					this._TipoDiagnostico.Entity = value;
					if ((value != null))
					{
						value.DiagInseminacion.Add(this);
						this._IdTipo = value.Id;
					}
					else
					{
						this._IdTipo = default(int);
					}
					this.SendPropertyChanged("TipoDiagnostico");
				}
			}
		}
		
		[Association(Name="Animal_DiagInseminacion", Storage="_Animal", ThisKey="IdAnimal", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.DiagInseminacion.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.DiagInseminacion.Add(this);
						this._IdAnimal = value.Id;
					}
					else
					{
						this._IdAnimal = default(int);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Estancia")]
	public partial class Estancia : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCubricion;
		
		private int _IdMacho;
		
		private System.DateTime _FechaInicio;
		
		private System.Nullable<System.DateTime> _FechaFin;
		
		private bool _Modificable;
		
		private EntityRef<Cubricion> _Cubricion;
		
		private EntityRef<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCubricionChanging(int value);
    partial void OnIdCubricionChanged();
    partial void OnIdMachoChanging(int value);
    partial void OnIdMachoChanged();
    partial void OnFechaInicioChanging(System.DateTime value);
    partial void OnFechaInicioChanged();
    partial void OnFechaFinChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaFinChanged();
    partial void OnModificableChanging(bool value);
    partial void OnModificableChanged();
    #endregion
		
		public Estancia()
		{
			this._Cubricion = default(EntityRef<Cubricion>);
			this._Animal = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[Column(Storage="_IdCubricion", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdCubricion
		{
			get
			{
				return this._IdCubricion;
			}
			set
			{
				if ((this._IdCubricion != value))
				{
					if (this._Cubricion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCubricionChanging(value);
					this.SendPropertyChanging();
					this._IdCubricion = value;
					this.SendPropertyChanged("IdCubricion");
					this.OnIdCubricionChanged();
				}
			}
		}
		
		[Column(Storage="_IdMacho", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdMacho
		{
			get
			{
				return this._IdMacho;
			}
			set
			{
				if ((this._IdMacho != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdMachoChanging(value);
					this.SendPropertyChanging();
					this._IdMacho = value;
					this.SendPropertyChanged("IdMacho");
					this.OnIdMachoChanged();
				}
			}
		}
		
		[Column(Storage="_FechaInicio", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime FechaInicio
		{
			get
			{
				return this._FechaInicio;
			}
			set
			{
				if ((this._FechaInicio != value))
				{
					this.OnFechaInicioChanging(value);
					this.SendPropertyChanging();
					this._FechaInicio = value;
					this.SendPropertyChanged("FechaInicio");
					this.OnFechaInicioChanged();
				}
			}
		}
		
		[Column(Storage="_FechaFin", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaFin
		{
			get
			{
				return this._FechaFin;
			}
			set
			{
				if ((this._FechaFin != value))
				{
					this.OnFechaFinChanging(value);
					this.SendPropertyChanging();
					this._FechaFin = value;
					this.SendPropertyChanged("FechaFin");
					this.OnFechaFinChanged();
				}
			}
		}
		
		[Column(Storage="_Modificable", DbType="Bit NOT NULL")]
		public bool Modificable
		{
			get
			{
				return this._Modificable;
			}
			set
			{
				if ((this._Modificable != value))
				{
					this.OnModificableChanging(value);
					this.SendPropertyChanging();
					this._Modificable = value;
					this.SendPropertyChanged("Modificable");
					this.OnModificableChanged();
				}
			}
		}
		
		[Association(Name="Cubricion_Estancia", Storage="_Cubricion", ThisKey="IdCubricion", OtherKey="Id", IsForeignKey=true)]
		public Cubricion Cubricion
		{
			get
			{
				return this._Cubricion.Entity;
			}
			set
			{
				Cubricion previousValue = this._Cubricion.Entity;
				if (((previousValue != value) 
							|| (this._Cubricion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cubricion.Entity = null;
						previousValue.Estancia.Remove(this);
					}
					this._Cubricion.Entity = value;
					if ((value != null))
					{
						value.Estancia.Add(this);
						this._IdCubricion = value.Id;
					}
					else
					{
						this._IdCubricion = default(int);
					}
					this.SendPropertyChanged("Cubricion");
				}
			}
		}
		
		[Association(Name="Animal_Estancia", Storage="_Animal", ThisKey="IdMacho", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.Estancia.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.Estancia.Add(this);
						this._IdMacho = value.Id;
					}
					else
					{
						this._IdMacho = default(int);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Cubricion")]
	public partial class Cubricion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdTipo;
		
		private int _IdLote;
		
		private System.DateTime _FechaInicio;
		
		private System.Nullable<System.DateTime> _FechaFin;
		
		private bool _Modificable;
		
		private EntitySet<Estancia> _Estancia;
		
		private EntityRef<LoteAnimal> _LoteAnimal;
		
		private EntityRef<TipoCubricion> _TipoCubricion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdTipoChanging(int value);
    partial void OnIdTipoChanged();
    partial void OnIdLoteChanging(int value);
    partial void OnIdLoteChanged();
    partial void OnFechaInicioChanging(System.DateTime value);
    partial void OnFechaInicioChanged();
    partial void OnFechaFinChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaFinChanged();
    partial void OnModificableChanging(bool value);
    partial void OnModificableChanged();
    #endregion
		
		public Cubricion()
		{
			this._Estancia = new EntitySet<Estancia>(new Action<Estancia>(this.attach_Estancia), new Action<Estancia>(this.detach_Estancia));
			this._LoteAnimal = default(EntityRef<LoteAnimal>);
			this._TipoCubricion = default(EntityRef<TipoCubricion>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdTipo", DbType="Int NOT NULL")]
		public int IdTipo
		{
			get
			{
				return this._IdTipo;
			}
			set
			{
				if ((this._IdTipo != value))
				{
					if (this._TipoCubricion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTipoChanging(value);
					this.SendPropertyChanging();
					this._IdTipo = value;
					this.SendPropertyChanged("IdTipo");
					this.OnIdTipoChanged();
				}
			}
		}
		
		[Column(Storage="_IdLote", DbType="Int NOT NULL")]
		public int IdLote
		{
			get
			{
				return this._IdLote;
			}
			set
			{
				if ((this._IdLote != value))
				{
					if (this._LoteAnimal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdLoteChanging(value);
					this.SendPropertyChanging();
					this._IdLote = value;
					this.SendPropertyChanged("IdLote");
					this.OnIdLoteChanged();
				}
			}
		}
		
		[Column(Storage="_FechaInicio", DbType="DateTime NOT NULL")]
		public System.DateTime FechaInicio
		{
			get
			{
				return this._FechaInicio;
			}
			set
			{
				if ((this._FechaInicio != value))
				{
					this.OnFechaInicioChanging(value);
					this.SendPropertyChanging();
					this._FechaInicio = value;
					this.SendPropertyChanged("FechaInicio");
					this.OnFechaInicioChanged();
				}
			}
		}
		
		[Column(Storage="_FechaFin", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaFin
		{
			get
			{
				return this._FechaFin;
			}
			set
			{
				if ((this._FechaFin != value))
				{
					this.OnFechaFinChanging(value);
					this.SendPropertyChanging();
					this._FechaFin = value;
					this.SendPropertyChanged("FechaFin");
					this.OnFechaFinChanged();
				}
			}
		}
		
		[Column(Storage="_Modificable", DbType="Bit NOT NULL")]
		public bool Modificable
		{
			get
			{
				return this._Modificable;
			}
			set
			{
				if ((this._Modificable != value))
				{
					this.OnModificableChanging(value);
					this.SendPropertyChanging();
					this._Modificable = value;
					this.SendPropertyChanged("Modificable");
					this.OnModificableChanged();
				}
			}
		}
		
		[Association(Name="Cubricion_Estancia", Storage="_Estancia", ThisKey="Id", OtherKey="IdCubricion")]
		public EntitySet<Estancia> Estancia
		{
			get
			{
				return this._Estancia;
			}
			set
			{
				this._Estancia.Assign(value);
			}
		}
		
		[Association(Name="LoteAnimal_Cubricion", Storage="_LoteAnimal", ThisKey="IdLote", OtherKey="Id", IsForeignKey=true)]
		public LoteAnimal LoteAnimal
		{
			get
			{
				return this._LoteAnimal.Entity;
			}
			set
			{
				LoteAnimal previousValue = this._LoteAnimal.Entity;
				if (((previousValue != value) 
							|| (this._LoteAnimal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoteAnimal.Entity = null;
						previousValue.Cubricion.Remove(this);
					}
					this._LoteAnimal.Entity = value;
					if ((value != null))
					{
						value.Cubricion.Add(this);
						this._IdLote = value.Id;
					}
					else
					{
						this._IdLote = default(int);
					}
					this.SendPropertyChanged("LoteAnimal");
				}
			}
		}
		
		[Association(Name="TipoCubricion_Cubricion", Storage="_TipoCubricion", ThisKey="IdTipo", OtherKey="Id", IsForeignKey=true)]
		public TipoCubricion TipoCubricion
		{
			get
			{
				return this._TipoCubricion.Entity;
			}
			set
			{
				TipoCubricion previousValue = this._TipoCubricion.Entity;
				if (((previousValue != value) 
							|| (this._TipoCubricion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoCubricion.Entity = null;
						previousValue.Cubricion.Remove(this);
					}
					this._TipoCubricion.Entity = value;
					if ((value != null))
					{
						value.Cubricion.Add(this);
						this._IdTipo = value.Id;
					}
					else
					{
						this._IdTipo = default(int);
					}
					this.SendPropertyChanged("TipoCubricion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Estancia(Estancia entity)
		{
			this.SendPropertyChanging();
			entity.Cubricion = this;
		}
		
		private void detach_Estancia(Estancia entity)
		{
			this.SendPropertyChanging();
			entity.Cubricion = null;
		}
	}
	
	[Table(Name="dbo.Receta")]
	public partial class Receta : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdTratamiento;
		
		private int _IdMedicamento;
		
		private string _Dosis;
		
		private int _Duracion;
		
		private decimal _Importe;
		
		private System.DateTime _Fecha;
		
		private bool _Modificable;
		
		private EntitySet<Gasto> _Gasto;
		
		private EntityRef<Producto> _Producto;
		
		private EntityRef<TratEnfermedad> _TratEnfermedad;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdTratamientoChanging(int value);
    partial void OnIdTratamientoChanged();
    partial void OnIdMedicamentoChanging(int value);
    partial void OnIdMedicamentoChanged();
    partial void OnDosisChanging(string value);
    partial void OnDosisChanged();
    partial void OnDuracionChanging(int value);
    partial void OnDuracionChanged();
    partial void OnImporteChanging(decimal value);
    partial void OnImporteChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    partial void OnModificableChanging(bool value);
    partial void OnModificableChanged();
    #endregion
		
		public Receta()
		{
			this._Gasto = new EntitySet<Gasto>(new Action<Gasto>(this.attach_Gasto), new Action<Gasto>(this.detach_Gasto));
			this._Producto = default(EntityRef<Producto>);
			this._TratEnfermedad = default(EntityRef<TratEnfermedad>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdTratamiento", DbType="Int NOT NULL")]
		public int IdTratamiento
		{
			get
			{
				return this._IdTratamiento;
			}
			set
			{
				if ((this._IdTratamiento != value))
				{
					if (this._TratEnfermedad.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTratamientoChanging(value);
					this.SendPropertyChanging();
					this._IdTratamiento = value;
					this.SendPropertyChanged("IdTratamiento");
					this.OnIdTratamientoChanged();
				}
			}
		}
		
		[Column(Storage="_IdMedicamento", DbType="Int NOT NULL")]
		public int IdMedicamento
		{
			get
			{
				return this._IdMedicamento;
			}
			set
			{
				if ((this._IdMedicamento != value))
				{
					if (this._Producto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdMedicamentoChanging(value);
					this.SendPropertyChanging();
					this._IdMedicamento = value;
					this.SendPropertyChanged("IdMedicamento");
					this.OnIdMedicamentoChanged();
				}
			}
		}
		
		[Column(Storage="_Dosis", DbType="VarChar(150)")]
		public string Dosis
		{
			get
			{
				return this._Dosis;
			}
			set
			{
				if ((this._Dosis != value))
				{
					this.OnDosisChanging(value);
					this.SendPropertyChanging();
					this._Dosis = value;
					this.SendPropertyChanged("Dosis");
					this.OnDosisChanged();
				}
			}
		}
		
		[Column(Storage="_Duracion", DbType="Int NOT NULL")]
		public int Duracion
		{
			get
			{
				return this._Duracion;
			}
			set
			{
				if ((this._Duracion != value))
				{
					this.OnDuracionChanging(value);
					this.SendPropertyChanging();
					this._Duracion = value;
					this.SendPropertyChanged("Duracion");
					this.OnDuracionChanged();
				}
			}
		}
		
		[Column(Storage="_Importe", DbType="Decimal(10,2) NOT NULL")]
		public decimal Importe
		{
			get
			{
				return this._Importe;
			}
			set
			{
				if ((this._Importe != value))
				{
					this.OnImporteChanging(value);
					this.SendPropertyChanging();
					this._Importe = value;
					this.SendPropertyChanged("Importe");
					this.OnImporteChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Column(Storage="_Modificable", DbType="Bit NOT NULL")]
		public bool Modificable
		{
			get
			{
				return this._Modificable;
			}
			set
			{
				if ((this._Modificable != value))
				{
					this.OnModificableChanging(value);
					this.SendPropertyChanging();
					this._Modificable = value;
					this.SendPropertyChanged("Modificable");
					this.OnModificableChanged();
				}
			}
		}
		
		[Association(Name="Receta_Gasto", Storage="_Gasto", ThisKey="Id", OtherKey="IdReceta")]
		public EntitySet<Gasto> Gasto
		{
			get
			{
				return this._Gasto;
			}
			set
			{
				this._Gasto.Assign(value);
			}
		}
		
		[Association(Name="Producto_Receta", Storage="_Producto", ThisKey="IdMedicamento", OtherKey="Id", IsForeignKey=true)]
		public Producto Producto
		{
			get
			{
				return this._Producto.Entity;
			}
			set
			{
				Producto previousValue = this._Producto.Entity;
				if (((previousValue != value) 
							|| (this._Producto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Producto.Entity = null;
						previousValue.Receta.Remove(this);
					}
					this._Producto.Entity = value;
					if ((value != null))
					{
						value.Receta.Add(this);
						this._IdMedicamento = value.Id;
					}
					else
					{
						this._IdMedicamento = default(int);
					}
					this.SendPropertyChanged("Producto");
				}
			}
		}
		
		[Association(Name="TratEnfermedad_Receta", Storage="_TratEnfermedad", ThisKey="IdTratamiento", OtherKey="Id", IsForeignKey=true)]
		public TratEnfermedad TratEnfermedad
		{
			get
			{
				return this._TratEnfermedad.Entity;
			}
			set
			{
				TratEnfermedad previousValue = this._TratEnfermedad.Entity;
				if (((previousValue != value) 
							|| (this._TratEnfermedad.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TratEnfermedad.Entity = null;
						previousValue.Receta.Remove(this);
					}
					this._TratEnfermedad.Entity = value;
					if ((value != null))
					{
						value.Receta.Add(this);
						this._IdTratamiento = value.Id;
					}
					else
					{
						this._IdTratamiento = default(int);
					}
					this.SendPropertyChanged("TratEnfermedad");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Gasto(Gasto entity)
		{
			this.SendPropertyChanging();
			entity.Receta = this;
		}
		
		private void detach_Gasto(Gasto entity)
		{
			this.SendPropertyChanging();
			entity.Receta = null;
		}
	}
	
	[Table(Name="dbo.Aborto")]
	public partial class Aborto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdHembra;
		
		private int _IdTipo;
		
		private System.DateTime _Fecha;
		
		private bool _Modificable;
		
		private EntityRef<TipoAborto> _TipoAborto;
		
		private EntityRef<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdHembraChanging(int value);
    partial void OnIdHembraChanged();
    partial void OnIdTipoChanging(int value);
    partial void OnIdTipoChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    partial void OnModificableChanging(bool value);
    partial void OnModificableChanged();
    #endregion
		
		public Aborto()
		{
			this._TipoAborto = default(EntityRef<TipoAborto>);
			this._Animal = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdHembra", DbType="Int NOT NULL")]
		public int IdHembra
		{
			get
			{
				return this._IdHembra;
			}
			set
			{
				if ((this._IdHembra != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdHembraChanging(value);
					this.SendPropertyChanging();
					this._IdHembra = value;
					this.SendPropertyChanged("IdHembra");
					this.OnIdHembraChanged();
				}
			}
		}
		
		[Column(Storage="_IdTipo", DbType="Int NOT NULL")]
		public int IdTipo
		{
			get
			{
				return this._IdTipo;
			}
			set
			{
				if ((this._IdTipo != value))
				{
					if (this._TipoAborto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTipoChanging(value);
					this.SendPropertyChanging();
					this._IdTipo = value;
					this.SendPropertyChanged("IdTipo");
					this.OnIdTipoChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Column(Storage="_Modificable", DbType="Bit NOT NULL")]
		public bool Modificable
		{
			get
			{
				return this._Modificable;
			}
			set
			{
				if ((this._Modificable != value))
				{
					this.OnModificableChanging(value);
					this.SendPropertyChanging();
					this._Modificable = value;
					this.SendPropertyChanged("Modificable");
					this.OnModificableChanged();
				}
			}
		}
		
		[Association(Name="TipoAborto_Aborto", Storage="_TipoAborto", ThisKey="IdTipo", OtherKey="Id", IsForeignKey=true)]
		public TipoAborto TipoAborto
		{
			get
			{
				return this._TipoAborto.Entity;
			}
			set
			{
				TipoAborto previousValue = this._TipoAborto.Entity;
				if (((previousValue != value) 
							|| (this._TipoAborto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoAborto.Entity = null;
						previousValue.Aborto.Remove(this);
					}
					this._TipoAborto.Entity = value;
					if ((value != null))
					{
						value.Aborto.Add(this);
						this._IdTipo = value.Id;
					}
					else
					{
						this._IdTipo = default(int);
					}
					this.SendPropertyChanged("TipoAborto");
				}
			}
		}
		
		[Association(Name="Animal_Aborto", Storage="_Animal", ThisKey="IdHembra", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.Aborto.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.Aborto.Add(this);
						this._IdHembra = value.Id;
					}
					else
					{
						this._IdHembra = default(int);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Estado")]
	public partial class Estado : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private System.Nullable<bool> _Sistema;
		
		private EntitySet<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    partial void OnSistemaChanging(System.Nullable<bool> value);
    partial void OnSistemaChanged();
    #endregion
		
		public Estado()
		{
			this._Animal = new EntitySet<Animal>(new Action<Animal>(this.attach_Animal), new Action<Animal>(this.detach_Animal));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Column(Storage="_Sistema", DbType="Bit")]
		public System.Nullable<bool> Sistema
		{
			get
			{
				return this._Sistema;
			}
			set
			{
				if ((this._Sistema != value))
				{
					this.OnSistemaChanging(value);
					this.SendPropertyChanging();
					this._Sistema = value;
					this.SendPropertyChanged("Sistema");
					this.OnSistemaChanged();
				}
			}
		}
		
		[Association(Name="Estado_Animal", Storage="_Animal", ThisKey="Id", OtherKey="IdEstado")]
		public EntitySet<Animal> Animal
		{
			get
			{
				return this._Animal;
			}
			set
			{
				this._Animal.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animal(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Estado = this;
		}
		
		private void detach_Animal(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Estado = null;
		}
	}
	
	[Table(Name="dbo.TipoCondicion")]
	public partial class TipoCondicion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdEspecie;
		
		private string _Codigo;
		
		private string _Descripcion;
		
		private string _Detalle;
		
		private bool _Apta;
		
		private EntitySet<CondicionCorporal> _CondicionCorporal;
		
		private EntityRef<Especie> _Especie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdEspecieChanging(int value);
    partial void OnIdEspecieChanged();
    partial void OnCodigoChanging(string value);
    partial void OnCodigoChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    partial void OnDetalleChanging(string value);
    partial void OnDetalleChanged();
    partial void OnAptaChanging(bool value);
    partial void OnAptaChanged();
    #endregion
		
		public TipoCondicion()
		{
			this._CondicionCorporal = new EntitySet<CondicionCorporal>(new Action<CondicionCorporal>(this.attach_CondicionCorporal), new Action<CondicionCorporal>(this.detach_CondicionCorporal));
			this._Especie = default(EntityRef<Especie>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdEspecie", DbType="Int NOT NULL")]
		public int IdEspecie
		{
			get
			{
				return this._IdEspecie;
			}
			set
			{
				if ((this._IdEspecie != value))
				{
					if (this._Especie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdEspecieChanging(value);
					this.SendPropertyChanging();
					this._IdEspecie = value;
					this.SendPropertyChanged("IdEspecie");
					this.OnIdEspecieChanged();
				}
			}
		}
		
		[Column(Storage="_Codigo", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string Codigo
		{
			get
			{
				return this._Codigo;
			}
			set
			{
				if ((this._Codigo != value))
				{
					this.OnCodigoChanging(value);
					this.SendPropertyChanging();
					this._Codigo = value;
					this.SendPropertyChanged("Codigo");
					this.OnCodigoChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Column(Storage="_Detalle", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Detalle
		{
			get
			{
				return this._Detalle;
			}
			set
			{
				if ((this._Detalle != value))
				{
					this.OnDetalleChanging(value);
					this.SendPropertyChanging();
					this._Detalle = value;
					this.SendPropertyChanged("Detalle");
					this.OnDetalleChanged();
				}
			}
		}
		
		[Column(Storage="_Apta", DbType="Bit NOT NULL")]
		public bool Apta
		{
			get
			{
				return this._Apta;
			}
			set
			{
				if ((this._Apta != value))
				{
					this.OnAptaChanging(value);
					this.SendPropertyChanging();
					this._Apta = value;
					this.SendPropertyChanged("Apta");
					this.OnAptaChanged();
				}
			}
		}
		
		[Association(Name="TipoCondicion_CondicionCorporal", Storage="_CondicionCorporal", ThisKey="Id", OtherKey="IdTipo")]
		public EntitySet<CondicionCorporal> CondicionCorporal
		{
			get
			{
				return this._CondicionCorporal;
			}
			set
			{
				this._CondicionCorporal.Assign(value);
			}
		}
		
		[Association(Name="Especie_TipoCondicion", Storage="_Especie", ThisKey="IdEspecie", OtherKey="Id", IsForeignKey=true)]
		public Especie Especie
		{
			get
			{
				return this._Especie.Entity;
			}
			set
			{
				Especie previousValue = this._Especie.Entity;
				if (((previousValue != value) 
							|| (this._Especie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Especie.Entity = null;
						previousValue.TipoCondicion.Remove(this);
					}
					this._Especie.Entity = value;
					if ((value != null))
					{
						value.TipoCondicion.Add(this);
						this._IdEspecie = value.Id;
					}
					else
					{
						this._IdEspecie = default(int);
					}
					this.SendPropertyChanged("Especie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CondicionCorporal(CondicionCorporal entity)
		{
			this.SendPropertyChanging();
			entity.TipoCondicion = this;
		}
		
		private void detach_CondicionCorporal(CondicionCorporal entity)
		{
			this.SendPropertyChanging();
			entity.TipoCondicion = null;
		}
	}
	
	[Table(Name="dbo.TipoLote")]
	public partial class TipoLote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private System.Nullable<bool> _Sistema;
		
		private EntitySet<LoteAnimal> _LoteAnimal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    partial void OnSistemaChanging(System.Nullable<bool> value);
    partial void OnSistemaChanged();
    #endregion
		
		public TipoLote()
		{
			this._LoteAnimal = new EntitySet<LoteAnimal>(new Action<LoteAnimal>(this.attach_LoteAnimal), new Action<LoteAnimal>(this.detach_LoteAnimal));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Column(Storage="_Sistema", DbType="Bit")]
		public System.Nullable<bool> Sistema
		{
			get
			{
				return this._Sistema;
			}
			set
			{
				if ((this._Sistema != value))
				{
					this.OnSistemaChanging(value);
					this.SendPropertyChanging();
					this._Sistema = value;
					this.SendPropertyChanged("Sistema");
					this.OnSistemaChanged();
				}
			}
		}
		
		[Association(Name="TipoLote_LoteAnimal", Storage="_LoteAnimal", ThisKey="Id", OtherKey="IdTipo")]
		public EntitySet<LoteAnimal> LoteAnimal
		{
			get
			{
				return this._LoteAnimal;
			}
			set
			{
				this._LoteAnimal.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LoteAnimal(LoteAnimal entity)
		{
			this.SendPropertyChanging();
			entity.TipoLote = this;
		}
		
		private void detach_LoteAnimal(LoteAnimal entity)
		{
			this.SendPropertyChanging();
			entity.TipoLote = null;
		}
	}
	
	[Table(Name="dbo.Maquinaria")]
	public partial class Maquinaria : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdExplotacion;
		
		private string _Descripcion;
		
		private string _Detalle;
		
		private EntitySet<PlaMaq> _PlaMaq;
		
		private EntityRef<Explotacion> _Explotacion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdExplotacionChanging(int value);
    partial void OnIdExplotacionChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    partial void OnDetalleChanging(string value);
    partial void OnDetalleChanged();
    #endregion
		
		public Maquinaria()
		{
			this._PlaMaq = new EntitySet<PlaMaq>(new Action<PlaMaq>(this.attach_PlaMaq), new Action<PlaMaq>(this.detach_PlaMaq));
			this._Explotacion = default(EntityRef<Explotacion>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdExplotacion", DbType="Int NOT NULL")]
		public int IdExplotacion
		{
			get
			{
				return this._IdExplotacion;
			}
			set
			{
				if ((this._IdExplotacion != value))
				{
					if (this._Explotacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdExplotacionChanging(value);
					this.SendPropertyChanging();
					this._IdExplotacion = value;
					this.SendPropertyChanged("IdExplotacion");
					this.OnIdExplotacionChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Column(Storage="_Detalle", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Detalle
		{
			get
			{
				return this._Detalle;
			}
			set
			{
				if ((this._Detalle != value))
				{
					this.OnDetalleChanging(value);
					this.SendPropertyChanging();
					this._Detalle = value;
					this.SendPropertyChanged("Detalle");
					this.OnDetalleChanged();
				}
			}
		}
		
		[Association(Name="Maquinaria_PlaMaq", Storage="_PlaMaq", ThisKey="Id", OtherKey="IdMaquinaria")]
		public EntitySet<PlaMaq> PlaMaq
		{
			get
			{
				return this._PlaMaq;
			}
			set
			{
				this._PlaMaq.Assign(value);
			}
		}
		
		[Association(Name="Explotacion_Maquinaria", Storage="_Explotacion", ThisKey="IdExplotacion", OtherKey="Id", IsForeignKey=true)]
		public Explotacion Explotacion
		{
			get
			{
				return this._Explotacion.Entity;
			}
			set
			{
				Explotacion previousValue = this._Explotacion.Entity;
				if (((previousValue != value) 
							|| (this._Explotacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Explotacion.Entity = null;
						previousValue.Maquinaria.Remove(this);
					}
					this._Explotacion.Entity = value;
					if ((value != null))
					{
						value.Maquinaria.Add(this);
						this._IdExplotacion = value.Id;
					}
					else
					{
						this._IdExplotacion = default(int);
					}
					this.SendPropertyChanged("Explotacion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlaMaq(PlaMaq entity)
		{
			this.SendPropertyChanging();
			entity.Maquinaria = this;
		}
		
		private void detach_PlaMaq(PlaMaq entity)
		{
			this.SendPropertyChanging();
			entity.Maquinaria = null;
		}
	}
	
	[Table(Name="dbo.Zona")]
	public partial class Zona : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdExplotacion;
		
		private string _Descripcion;
		
		private string _Detalle;
		
		private EntitySet<PlaZon> _PlaZon;
		
		private EntityRef<Explotacion> _Explotacion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdExplotacionChanging(int value);
    partial void OnIdExplotacionChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    partial void OnDetalleChanging(string value);
    partial void OnDetalleChanged();
    #endregion
		
		public Zona()
		{
			this._PlaZon = new EntitySet<PlaZon>(new Action<PlaZon>(this.attach_PlaZon), new Action<PlaZon>(this.detach_PlaZon));
			this._Explotacion = default(EntityRef<Explotacion>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdExplotacion", DbType="Int NOT NULL")]
		public int IdExplotacion
		{
			get
			{
				return this._IdExplotacion;
			}
			set
			{
				if ((this._IdExplotacion != value))
				{
					if (this._Explotacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdExplotacionChanging(value);
					this.SendPropertyChanging();
					this._IdExplotacion = value;
					this.SendPropertyChanged("IdExplotacion");
					this.OnIdExplotacionChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Column(Storage="_Detalle", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Detalle
		{
			get
			{
				return this._Detalle;
			}
			set
			{
				if ((this._Detalle != value))
				{
					this.OnDetalleChanging(value);
					this.SendPropertyChanging();
					this._Detalle = value;
					this.SendPropertyChanged("Detalle");
					this.OnDetalleChanged();
				}
			}
		}
		
		[Association(Name="Zona_PlaZon", Storage="_PlaZon", ThisKey="Id", OtherKey="IdZona")]
		public EntitySet<PlaZon> PlaZon
		{
			get
			{
				return this._PlaZon;
			}
			set
			{
				this._PlaZon.Assign(value);
			}
		}
		
		[Association(Name="Explotacion_Zona", Storage="_Explotacion", ThisKey="IdExplotacion", OtherKey="Id", IsForeignKey=true)]
		public Explotacion Explotacion
		{
			get
			{
				return this._Explotacion.Entity;
			}
			set
			{
				Explotacion previousValue = this._Explotacion.Entity;
				if (((previousValue != value) 
							|| (this._Explotacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Explotacion.Entity = null;
						previousValue.Zona.Remove(this);
					}
					this._Explotacion.Entity = value;
					if ((value != null))
					{
						value.Zona.Add(this);
						this._IdExplotacion = value.Id;
					}
					else
					{
						this._IdExplotacion = default(int);
					}
					this.SendPropertyChanged("Explotacion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlaZon(PlaZon entity)
		{
			this.SendPropertyChanging();
			entity.Zona = this;
		}
		
		private void detach_PlaZon(PlaZon entity)
		{
			this.SendPropertyChanging();
			entity.Zona = null;
		}
	}
	
	[Table(Name="dbo.Plantilla")]
	public partial class Plantilla : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdExplotacion;
		
		private string _Descripcion;
		
		private string _Detalle;
		
		private bool _Baja;
		
		private EntitySet<PlaMaq> _PlaMaq;
		
		private EntitySet<PlaZon> _PlaZon;
		
		private EntitySet<Ejecucion> _Ejecuciones;
		
		private EntitySet<Transformacion> _Transformaciones;
		
		private EntitySet<PlaVet> _PlaVet;
		
		private EntitySet<APPCC> _APPCCs;
		
		private EntityRef<Explotacion> _Explotacion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdExplotacionChanging(int value);
    partial void OnIdExplotacionChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    partial void OnDetalleChanging(string value);
    partial void OnDetalleChanged();
    partial void OnBajaChanging(bool value);
    partial void OnBajaChanged();
    #endregion
		
		public Plantilla()
		{
			this._PlaMaq = new EntitySet<PlaMaq>(new Action<PlaMaq>(this.attach_PlaMaq), new Action<PlaMaq>(this.detach_PlaMaq));
			this._PlaZon = new EntitySet<PlaZon>(new Action<PlaZon>(this.attach_PlaZon), new Action<PlaZon>(this.detach_PlaZon));
			this._Ejecuciones = new EntitySet<Ejecucion>(new Action<Ejecucion>(this.attach_Ejecuciones), new Action<Ejecucion>(this.detach_Ejecuciones));
			this._Transformaciones = new EntitySet<Transformacion>(new Action<Transformacion>(this.attach_Transformaciones), new Action<Transformacion>(this.detach_Transformaciones));
			this._PlaVet = new EntitySet<PlaVet>(new Action<PlaVet>(this.attach_PlaVet), new Action<PlaVet>(this.detach_PlaVet));
			this._APPCCs = new EntitySet<APPCC>(new Action<APPCC>(this.attach_APPCCs), new Action<APPCC>(this.detach_APPCCs));
			this._Explotacion = default(EntityRef<Explotacion>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdExplotacion", DbType="Int NOT NULL")]
		public int IdExplotacion
		{
			get
			{
				return this._IdExplotacion;
			}
			set
			{
				if ((this._IdExplotacion != value))
				{
					if (this._Explotacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdExplotacionChanging(value);
					this.SendPropertyChanging();
					this._IdExplotacion = value;
					this.SendPropertyChanged("IdExplotacion");
					this.OnIdExplotacionChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Column(Storage="_Detalle", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Detalle
		{
			get
			{
				return this._Detalle;
			}
			set
			{
				if ((this._Detalle != value))
				{
					this.OnDetalleChanging(value);
					this.SendPropertyChanging();
					this._Detalle = value;
					this.SendPropertyChanged("Detalle");
					this.OnDetalleChanged();
				}
			}
		}
		
		[Column(Storage="_Baja", DbType="Bit NOT NULL")]
		public bool Baja
		{
			get
			{
				return this._Baja;
			}
			set
			{
				if ((this._Baja != value))
				{
					this.OnBajaChanging(value);
					this.SendPropertyChanging();
					this._Baja = value;
					this.SendPropertyChanged("Baja");
					this.OnBajaChanged();
				}
			}
		}
		
		[Association(Name="Plantilla_PlaMaq", Storage="_PlaMaq", ThisKey="Id", OtherKey="IdPlantilla")]
		public EntitySet<PlaMaq> PlaMaq
		{
			get
			{
				return this._PlaMaq;
			}
			set
			{
				this._PlaMaq.Assign(value);
			}
		}
		
		[Association(Name="Plantilla_PlaZon", Storage="_PlaZon", ThisKey="Id", OtherKey="IdPlantilla")]
		public EntitySet<PlaZon> PlaZon
		{
			get
			{
				return this._PlaZon;
			}
			set
			{
				this._PlaZon.Assign(value);
			}
		}
		
		[Association(Name="Plantilla_Ejecucion", Storage="_Ejecuciones", ThisKey="Id", OtherKey="IdPlantilla")]
		public EntitySet<Ejecucion> Ejecuciones
		{
			get
			{
				return this._Ejecuciones;
			}
			set
			{
				this._Ejecuciones.Assign(value);
			}
		}
		
		[Association(Name="Plantilla_Transformacion", Storage="_Transformaciones", ThisKey="Id", OtherKey="IdPlantilla")]
		public EntitySet<Transformacion> Transformaciones
		{
			get
			{
				return this._Transformaciones;
			}
			set
			{
				this._Transformaciones.Assign(value);
			}
		}
		
		[Association(Name="Plantilla_PlaVet", Storage="_PlaVet", ThisKey="Id", OtherKey="IdPlantilla")]
		public EntitySet<PlaVet> PlaVet
		{
			get
			{
				return this._PlaVet;
			}
			set
			{
				this._PlaVet.Assign(value);
			}
		}
		
		[Association(Name="Plantilla_APPCC", Storage="_APPCCs", ThisKey="Id", OtherKey="IdPlantilla")]
		public EntitySet<APPCC> APPCCs
		{
			get
			{
				return this._APPCCs;
			}
			set
			{
				this._APPCCs.Assign(value);
			}
		}
		
		[Association(Name="Explotacion_Plantilla", Storage="_Explotacion", ThisKey="IdExplotacion", OtherKey="Id", IsForeignKey=true)]
		public Explotacion Explotacion
		{
			get
			{
				return this._Explotacion.Entity;
			}
			set
			{
				Explotacion previousValue = this._Explotacion.Entity;
				if (((previousValue != value) 
							|| (this._Explotacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Explotacion.Entity = null;
						previousValue.Plantilla.Remove(this);
					}
					this._Explotacion.Entity = value;
					if ((value != null))
					{
						value.Plantilla.Add(this);
						this._IdExplotacion = value.Id;
					}
					else
					{
						this._IdExplotacion = default(int);
					}
					this.SendPropertyChanged("Explotacion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlaMaq(PlaMaq entity)
		{
			this.SendPropertyChanging();
			entity.Plantilla = this;
		}
		
		private void detach_PlaMaq(PlaMaq entity)
		{
			this.SendPropertyChanging();
			entity.Plantilla = null;
		}
		
		private void attach_PlaZon(PlaZon entity)
		{
			this.SendPropertyChanging();
			entity.Plantilla = this;
		}
		
		private void detach_PlaZon(PlaZon entity)
		{
			this.SendPropertyChanging();
			entity.Plantilla = null;
		}
		
		private void attach_Ejecuciones(Ejecucion entity)
		{
			this.SendPropertyChanging();
			entity.Plantilla = this;
		}
		
		private void detach_Ejecuciones(Ejecucion entity)
		{
			this.SendPropertyChanging();
			entity.Plantilla = null;
		}
		
		private void attach_Transformaciones(Transformacion entity)
		{
			this.SendPropertyChanging();
			entity.Plantilla = this;
		}
		
		private void detach_Transformaciones(Transformacion entity)
		{
			this.SendPropertyChanging();
			entity.Plantilla = null;
		}
		
		private void attach_PlaVet(PlaVet entity)
		{
			this.SendPropertyChanging();
			entity.Plantilla = this;
		}
		
		private void detach_PlaVet(PlaVet entity)
		{
			this.SendPropertyChanging();
			entity.Plantilla = null;
		}
		
		private void attach_APPCCs(APPCC entity)
		{
			this.SendPropertyChanging();
			entity.Plantilla = this;
		}
		
		private void detach_APPCCs(APPCC entity)
		{
			this.SendPropertyChanging();
			entity.Plantilla = null;
		}
	}
	
	[Table(Name="dbo.APPCC")]
	public partial class APPCC : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdExplotacion;
		
		private int _IdPlantilla;
		
		private string _Fase;
		
		private string _Peligro;
		
		private string _Prevencion;
		
		private string _LimiteCritico;
		
		private string _Vigilancia;
		
		private string _Frecuencia;
		
		private string _Correccion;
		
		private EntityRef<Plantilla> _Plantilla;
		
		private EntityRef<Explotacion> _Explotacion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdExplotacionChanging(int value);
    partial void OnIdExplotacionChanged();
    partial void OnIdPlantillaChanging(int value);
    partial void OnIdPlantillaChanged();
    partial void OnFaseChanging(string value);
    partial void OnFaseChanged();
    partial void OnPeligroChanging(string value);
    partial void OnPeligroChanged();
    partial void OnPrevencionChanging(string value);
    partial void OnPrevencionChanged();
    partial void OnLimiteCriticoChanging(string value);
    partial void OnLimiteCriticoChanged();
    partial void OnVigilanciaChanging(string value);
    partial void OnVigilanciaChanged();
    partial void OnFrecuenciaChanging(string value);
    partial void OnFrecuenciaChanged();
    partial void OnCorreccionChanging(string value);
    partial void OnCorreccionChanged();
    #endregion
		
		public APPCC()
		{
			this._Plantilla = default(EntityRef<Plantilla>);
			this._Explotacion = default(EntityRef<Explotacion>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdExplotacion", DbType="Int NOT NULL")]
		public int IdExplotacion
		{
			get
			{
				return this._IdExplotacion;
			}
			set
			{
				if ((this._IdExplotacion != value))
				{
					if (this._Explotacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdExplotacionChanging(value);
					this.SendPropertyChanging();
					this._IdExplotacion = value;
					this.SendPropertyChanged("IdExplotacion");
					this.OnIdExplotacionChanged();
				}
			}
		}
		
		[Column(Storage="_IdPlantilla", DbType="Int NOT NULL")]
		public int IdPlantilla
		{
			get
			{
				return this._IdPlantilla;
			}
			set
			{
				if ((this._IdPlantilla != value))
				{
					if (this._Plantilla.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPlantillaChanging(value);
					this.SendPropertyChanging();
					this._IdPlantilla = value;
					this.SendPropertyChanged("IdPlantilla");
					this.OnIdPlantillaChanged();
				}
			}
		}
		
		[Column(Storage="_Fase", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Fase
		{
			get
			{
				return this._Fase;
			}
			set
			{
				if ((this._Fase != value))
				{
					this.OnFaseChanging(value);
					this.SendPropertyChanging();
					this._Fase = value;
					this.SendPropertyChanged("Fase");
					this.OnFaseChanged();
				}
			}
		}
		
		[Column(Storage="_Peligro", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Peligro
		{
			get
			{
				return this._Peligro;
			}
			set
			{
				if ((this._Peligro != value))
				{
					this.OnPeligroChanging(value);
					this.SendPropertyChanging();
					this._Peligro = value;
					this.SendPropertyChanged("Peligro");
					this.OnPeligroChanged();
				}
			}
		}
		
		[Column(Storage="_Prevencion", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Prevencion
		{
			get
			{
				return this._Prevencion;
			}
			set
			{
				if ((this._Prevencion != value))
				{
					this.OnPrevencionChanging(value);
					this.SendPropertyChanging();
					this._Prevencion = value;
					this.SendPropertyChanged("Prevencion");
					this.OnPrevencionChanged();
				}
			}
		}
		
		[Column(Storage="_LimiteCritico", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string LimiteCritico
		{
			get
			{
				return this._LimiteCritico;
			}
			set
			{
				if ((this._LimiteCritico != value))
				{
					this.OnLimiteCriticoChanging(value);
					this.SendPropertyChanging();
					this._LimiteCritico = value;
					this.SendPropertyChanged("LimiteCritico");
					this.OnLimiteCriticoChanged();
				}
			}
		}
		
		[Column(Storage="_Vigilancia", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Vigilancia
		{
			get
			{
				return this._Vigilancia;
			}
			set
			{
				if ((this._Vigilancia != value))
				{
					this.OnVigilanciaChanging(value);
					this.SendPropertyChanging();
					this._Vigilancia = value;
					this.SendPropertyChanged("Vigilancia");
					this.OnVigilanciaChanged();
				}
			}
		}
		
		[Column(Storage="_Frecuencia", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Frecuencia
		{
			get
			{
				return this._Frecuencia;
			}
			set
			{
				if ((this._Frecuencia != value))
				{
					this.OnFrecuenciaChanging(value);
					this.SendPropertyChanging();
					this._Frecuencia = value;
					this.SendPropertyChanged("Frecuencia");
					this.OnFrecuenciaChanged();
				}
			}
		}
		
		[Column(Storage="_Correccion", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Correccion
		{
			get
			{
				return this._Correccion;
			}
			set
			{
				if ((this._Correccion != value))
				{
					this.OnCorreccionChanging(value);
					this.SendPropertyChanging();
					this._Correccion = value;
					this.SendPropertyChanged("Correccion");
					this.OnCorreccionChanged();
				}
			}
		}
		
		[Association(Name="Plantilla_APPCC", Storage="_Plantilla", ThisKey="IdPlantilla", OtherKey="Id", IsForeignKey=true)]
		public Plantilla Plantilla
		{
			get
			{
				return this._Plantilla.Entity;
			}
			set
			{
				Plantilla previousValue = this._Plantilla.Entity;
				if (((previousValue != value) 
							|| (this._Plantilla.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Plantilla.Entity = null;
						previousValue.APPCCs.Remove(this);
					}
					this._Plantilla.Entity = value;
					if ((value != null))
					{
						value.APPCCs.Add(this);
						this._IdPlantilla = value.Id;
					}
					else
					{
						this._IdPlantilla = default(int);
					}
					this.SendPropertyChanged("Plantilla");
				}
			}
		}
		
		[Association(Name="Explotacion_APPCC", Storage="_Explotacion", ThisKey="IdExplotacion", OtherKey="Id", IsForeignKey=true)]
		public Explotacion Explotacion
		{
			get
			{
				return this._Explotacion.Entity;
			}
			set
			{
				Explotacion previousValue = this._Explotacion.Entity;
				if (((previousValue != value) 
							|| (this._Explotacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Explotacion.Entity = null;
						previousValue.APPCC.Remove(this);
					}
					this._Explotacion.Entity = value;
					if ((value != null))
					{
						value.APPCC.Add(this);
						this._IdExplotacion = value.Id;
					}
					else
					{
						this._IdExplotacion = default(int);
					}
					this.SendPropertyChanged("Explotacion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TratProfilaxis")]
	public partial class TratProfilaxis : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdPrograma;
		
		private int _IdExplotacion;
		
		private string _Detalle;
		
		private System.DateTime _Fecha;
		
		private EntitySet<AniPro> _AniPro;
		
		private EntitySet<ProPro> _ProPro;
		
		private EntityRef<Programa> _Programa;
		
		private EntityRef<Explotacion> _Explotacion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdProgramaChanging(int value);
    partial void OnIdProgramaChanged();
    partial void OnIdExplotacionChanging(int value);
    partial void OnIdExplotacionChanged();
    partial void OnDetalleChanging(string value);
    partial void OnDetalleChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    #endregion
		
		public TratProfilaxis()
		{
			this._AniPro = new EntitySet<AniPro>(new Action<AniPro>(this.attach_AniPro), new Action<AniPro>(this.detach_AniPro));
			this._ProPro = new EntitySet<ProPro>(new Action<ProPro>(this.attach_ProPro), new Action<ProPro>(this.detach_ProPro));
			this._Programa = default(EntityRef<Programa>);
			this._Explotacion = default(EntityRef<Explotacion>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdPrograma", DbType="Int NOT NULL")]
		public int IdPrograma
		{
			get
			{
				return this._IdPrograma;
			}
			set
			{
				if ((this._IdPrograma != value))
				{
					if (this._Programa.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdProgramaChanging(value);
					this.SendPropertyChanging();
					this._IdPrograma = value;
					this.SendPropertyChanged("IdPrograma");
					this.OnIdProgramaChanged();
				}
			}
		}
		
		[Column(Storage="_IdExplotacion", DbType="Int NOT NULL")]
		public int IdExplotacion
		{
			get
			{
				return this._IdExplotacion;
			}
			set
			{
				if ((this._IdExplotacion != value))
				{
					if (this._Explotacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdExplotacionChanging(value);
					this.SendPropertyChanging();
					this._IdExplotacion = value;
					this.SendPropertyChanged("IdExplotacion");
					this.OnIdExplotacionChanged();
				}
			}
		}
		
		[Column(Storage="_Detalle", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Detalle
		{
			get
			{
				return this._Detalle;
			}
			set
			{
				if ((this._Detalle != value))
				{
					this.OnDetalleChanging(value);
					this.SendPropertyChanging();
					this._Detalle = value;
					this.SendPropertyChanged("Detalle");
					this.OnDetalleChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Association(Name="TratProfilaxis_AniPro", Storage="_AniPro", ThisKey="Id", OtherKey="IdTratProfilaxis")]
		public EntitySet<AniPro> AniPro
		{
			get
			{
				return this._AniPro;
			}
			set
			{
				this._AniPro.Assign(value);
			}
		}
		
		[Association(Name="TratProfilaxis_ProPro", Storage="_ProPro", ThisKey="Id", OtherKey="IdTratProfilaxis")]
		public EntitySet<ProPro> ProPro
		{
			get
			{
				return this._ProPro;
			}
			set
			{
				this._ProPro.Assign(value);
			}
		}
		
		[Association(Name="Programa_TratProfilaxis", Storage="_Programa", ThisKey="IdPrograma", OtherKey="Id", IsForeignKey=true)]
		public Programa Programa
		{
			get
			{
				return this._Programa.Entity;
			}
			set
			{
				Programa previousValue = this._Programa.Entity;
				if (((previousValue != value) 
							|| (this._Programa.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Programa.Entity = null;
						previousValue.TratProfilaxis.Remove(this);
					}
					this._Programa.Entity = value;
					if ((value != null))
					{
						value.TratProfilaxis.Add(this);
						this._IdPrograma = value.Id;
					}
					else
					{
						this._IdPrograma = default(int);
					}
					this.SendPropertyChanged("Programa");
				}
			}
		}
		
		[Association(Name="Explotacion_TratProfilaxis", Storage="_Explotacion", ThisKey="IdExplotacion", OtherKey="Id", IsForeignKey=true)]
		public Explotacion Explotacion
		{
			get
			{
				return this._Explotacion.Entity;
			}
			set
			{
				Explotacion previousValue = this._Explotacion.Entity;
				if (((previousValue != value) 
							|| (this._Explotacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Explotacion.Entity = null;
						previousValue.TratProfilaxis.Remove(this);
					}
					this._Explotacion.Entity = value;
					if ((value != null))
					{
						value.TratProfilaxis.Add(this);
						this._IdExplotacion = value.Id;
					}
					else
					{
						this._IdExplotacion = default(int);
					}
					this.SendPropertyChanged("Explotacion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AniPro(AniPro entity)
		{
			this.SendPropertyChanging();
			entity.TratProfilaxis = this;
		}
		
		private void detach_AniPro(AniPro entity)
		{
			this.SendPropertyChanging();
			entity.TratProfilaxis = null;
		}
		
		private void attach_ProPro(ProPro entity)
		{
			this.SendPropertyChanging();
			entity.TratProfilaxis = this;
		}
		
		private void detach_ProPro(ProPro entity)
		{
			this.SendPropertyChanging();
			entity.TratProfilaxis = null;
		}
	}
	
	[Table(Name="dbo.Veterinario")]
	public partial class Veterinario : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdExplotacion;
		
		private int _IdTipo;
		
		private string _Nombre;
		
		private string _Apellidos;
		
		private string _DNI;
		
		private string _Direccion;
		
		private string _CP;
		
		private string _Telefono;
		
		private string _Movil;
		
		private string _Email;
		
		private System.Nullable<System.DateTime> _FechaNacimiento;
		
		private EntitySet<Resena> _Resena;
		
		private EntitySet<PlaVet> _PlaVet;
		
		private EntitySet<Celo> _Celo;
		
		private EntitySet<SincronizacionCelo> _SincronizacionCelo;
		
		private EntitySet<TratEnfermedad> _TratEnfermedad;
		
		private EntitySet<Inseminacion> _Inseminacion;
		
		private EntitySet<DiagAnimal> _DiagAnimal;
		
		private EntityRef<TipoPersonal> _TipoPersonal;
		
		private EntityRef<Explotacion> _Explotacion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdExplotacionChanging(int value);
    partial void OnIdExplotacionChanged();
    partial void OnIdTipoChanging(int value);
    partial void OnIdTipoChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnApellidosChanging(string value);
    partial void OnApellidosChanged();
    partial void OnDNIChanging(string value);
    partial void OnDNIChanged();
    partial void OnDireccionChanging(string value);
    partial void OnDireccionChanged();
    partial void OnCPChanging(string value);
    partial void OnCPChanged();
    partial void OnTelefonoChanging(string value);
    partial void OnTelefonoChanged();
    partial void OnMovilChanging(string value);
    partial void OnMovilChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFechaNacimientoChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaNacimientoChanged();
    #endregion
		
		public Veterinario()
		{
			this._Resena = new EntitySet<Resena>(new Action<Resena>(this.attach_Resena), new Action<Resena>(this.detach_Resena));
			this._PlaVet = new EntitySet<PlaVet>(new Action<PlaVet>(this.attach_PlaVet), new Action<PlaVet>(this.detach_PlaVet));
			this._Celo = new EntitySet<Celo>(new Action<Celo>(this.attach_Celo), new Action<Celo>(this.detach_Celo));
			this._SincronizacionCelo = new EntitySet<SincronizacionCelo>(new Action<SincronizacionCelo>(this.attach_SincronizacionCelo), new Action<SincronizacionCelo>(this.detach_SincronizacionCelo));
			this._TratEnfermedad = new EntitySet<TratEnfermedad>(new Action<TratEnfermedad>(this.attach_TratEnfermedad), new Action<TratEnfermedad>(this.detach_TratEnfermedad));
			this._Inseminacion = new EntitySet<Inseminacion>(new Action<Inseminacion>(this.attach_Inseminacion), new Action<Inseminacion>(this.detach_Inseminacion));
			this._DiagAnimal = new EntitySet<DiagAnimal>(new Action<DiagAnimal>(this.attach_DiagAnimal), new Action<DiagAnimal>(this.detach_DiagAnimal));
			this._TipoPersonal = default(EntityRef<TipoPersonal>);
			this._Explotacion = default(EntityRef<Explotacion>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdExplotacion", DbType="Int NOT NULL")]
		public int IdExplotacion
		{
			get
			{
				return this._IdExplotacion;
			}
			set
			{
				if ((this._IdExplotacion != value))
				{
					if (this._Explotacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdExplotacionChanging(value);
					this.SendPropertyChanging();
					this._IdExplotacion = value;
					this.SendPropertyChanged("IdExplotacion");
					this.OnIdExplotacionChanged();
				}
			}
		}
		
		[Column(Storage="_IdTipo", DbType="Int NOT NULL")]
		public int IdTipo
		{
			get
			{
				return this._IdTipo;
			}
			set
			{
				if ((this._IdTipo != value))
				{
					if (this._TipoPersonal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTipoChanging(value);
					this.SendPropertyChanging();
					this._IdTipo = value;
					this.SendPropertyChanged("IdTipo");
					this.OnIdTipoChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Column(Storage="_Apellidos", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Apellidos
		{
			get
			{
				return this._Apellidos;
			}
			set
			{
				if ((this._Apellidos != value))
				{
					this.OnApellidosChanging(value);
					this.SendPropertyChanging();
					this._Apellidos = value;
					this.SendPropertyChanged("Apellidos");
					this.OnApellidosChanged();
				}
			}
		}
		
		[Column(Storage="_DNI", DbType="VarChar(9)")]
		public string DNI
		{
			get
			{
				return this._DNI;
			}
			set
			{
				if ((this._DNI != value))
				{
					this.OnDNIChanging(value);
					this.SendPropertyChanging();
					this._DNI = value;
					this.SendPropertyChanged("DNI");
					this.OnDNIChanged();
				}
			}
		}
		
		[Column(Storage="_Direccion", DbType="VarChar(100)")]
		public string Direccion
		{
			get
			{
				return this._Direccion;
			}
			set
			{
				if ((this._Direccion != value))
				{
					this.OnDireccionChanging(value);
					this.SendPropertyChanging();
					this._Direccion = value;
					this.SendPropertyChanged("Direccion");
					this.OnDireccionChanged();
				}
			}
		}
		
		[Column(Storage="_CP", DbType="VarChar(5)")]
		public string CP
		{
			get
			{
				return this._CP;
			}
			set
			{
				if ((this._CP != value))
				{
					this.OnCPChanging(value);
					this.SendPropertyChanging();
					this._CP = value;
					this.SendPropertyChanged("CP");
					this.OnCPChanged();
				}
			}
		}
		
		[Column(Storage="_Telefono", DbType="VarChar(9)")]
		public string Telefono
		{
			get
			{
				return this._Telefono;
			}
			set
			{
				if ((this._Telefono != value))
				{
					this.OnTelefonoChanging(value);
					this.SendPropertyChanging();
					this._Telefono = value;
					this.SendPropertyChanged("Telefono");
					this.OnTelefonoChanged();
				}
			}
		}
		
		[Column(Storage="_Movil", DbType="VarChar(9)")]
		public string Movil
		{
			get
			{
				return this._Movil;
			}
			set
			{
				if ((this._Movil != value))
				{
					this.OnMovilChanging(value);
					this.SendPropertyChanging();
					this._Movil = value;
					this.SendPropertyChanged("Movil");
					this.OnMovilChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(255)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_FechaNacimiento", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaNacimiento
		{
			get
			{
				return this._FechaNacimiento;
			}
			set
			{
				if ((this._FechaNacimiento != value))
				{
					this.OnFechaNacimientoChanging(value);
					this.SendPropertyChanging();
					this._FechaNacimiento = value;
					this.SendPropertyChanged("FechaNacimiento");
					this.OnFechaNacimientoChanged();
				}
			}
		}
		
		[Association(Name="Veterinario_Resena", Storage="_Resena", ThisKey="Id", OtherKey="IdVeterinario")]
		public EntitySet<Resena> Resena
		{
			get
			{
				return this._Resena;
			}
			set
			{
				this._Resena.Assign(value);
			}
		}
		
		[Association(Name="Veterinario_PlaVet", Storage="_PlaVet", ThisKey="Id", OtherKey="IdPersonal")]
		public EntitySet<PlaVet> PlaVet
		{
			get
			{
				return this._PlaVet;
			}
			set
			{
				this._PlaVet.Assign(value);
			}
		}
		
		[Association(Name="Veterinario_Celo", Storage="_Celo", ThisKey="Id", OtherKey="IdVeterinario")]
		public EntitySet<Celo> Celo
		{
			get
			{
				return this._Celo;
			}
			set
			{
				this._Celo.Assign(value);
			}
		}
		
		[Association(Name="Veterinario_SincronizacionCelo", Storage="_SincronizacionCelo", ThisKey="Id", OtherKey="IdVeterinario")]
		public EntitySet<SincronizacionCelo> SincronizacionCelo
		{
			get
			{
				return this._SincronizacionCelo;
			}
			set
			{
				this._SincronizacionCelo.Assign(value);
			}
		}
		
		[Association(Name="Veterinario_TratEnfermedad", Storage="_TratEnfermedad", ThisKey="Id", OtherKey="IdVeterinario")]
		public EntitySet<TratEnfermedad> TratEnfermedad
		{
			get
			{
				return this._TratEnfermedad;
			}
			set
			{
				this._TratEnfermedad.Assign(value);
			}
		}
		
		[Association(Name="Veterinario_Inseminacion", Storage="_Inseminacion", ThisKey="Id", OtherKey="IdVeterinario")]
		public EntitySet<Inseminacion> Inseminacion
		{
			get
			{
				return this._Inseminacion;
			}
			set
			{
				this._Inseminacion.Assign(value);
			}
		}
		
		[Association(Name="Veterinario_DiagAnimal", Storage="_DiagAnimal", ThisKey="Id", OtherKey="IdVeterinario")]
		public EntitySet<DiagAnimal> DiagAnimal
		{
			get
			{
				return this._DiagAnimal;
			}
			set
			{
				this._DiagAnimal.Assign(value);
			}
		}
		
		[Association(Name="TipoPersonal_Veterinario", Storage="_TipoPersonal", ThisKey="IdTipo", OtherKey="Id", IsForeignKey=true)]
		public TipoPersonal TipoPersonal
		{
			get
			{
				return this._TipoPersonal.Entity;
			}
			set
			{
				TipoPersonal previousValue = this._TipoPersonal.Entity;
				if (((previousValue != value) 
							|| (this._TipoPersonal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoPersonal.Entity = null;
						previousValue.Veterinario.Remove(this);
					}
					this._TipoPersonal.Entity = value;
					if ((value != null))
					{
						value.Veterinario.Add(this);
						this._IdTipo = value.Id;
					}
					else
					{
						this._IdTipo = default(int);
					}
					this.SendPropertyChanged("TipoPersonal");
				}
			}
		}
		
		[Association(Name="Explotacion_Veterinario", Storage="_Explotacion", ThisKey="IdExplotacion", OtherKey="Id", IsForeignKey=true)]
		public Explotacion Explotacion
		{
			get
			{
				return this._Explotacion.Entity;
			}
			set
			{
				Explotacion previousValue = this._Explotacion.Entity;
				if (((previousValue != value) 
							|| (this._Explotacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Explotacion.Entity = null;
						previousValue.Veterinario.Remove(this);
					}
					this._Explotacion.Entity = value;
					if ((value != null))
					{
						value.Veterinario.Add(this);
						this._IdExplotacion = value.Id;
					}
					else
					{
						this._IdExplotacion = default(int);
					}
					this.SendPropertyChanged("Explotacion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Resena(Resena entity)
		{
			this.SendPropertyChanging();
			entity.Veterinario = this;
		}
		
		private void detach_Resena(Resena entity)
		{
			this.SendPropertyChanging();
			entity.Veterinario = null;
		}
		
		private void attach_PlaVet(PlaVet entity)
		{
			this.SendPropertyChanging();
			entity.Veterinario = this;
		}
		
		private void detach_PlaVet(PlaVet entity)
		{
			this.SendPropertyChanging();
			entity.Veterinario = null;
		}
		
		private void attach_Celo(Celo entity)
		{
			this.SendPropertyChanging();
			entity.Veterinario = this;
		}
		
		private void detach_Celo(Celo entity)
		{
			this.SendPropertyChanging();
			entity.Veterinario = null;
		}
		
		private void attach_SincronizacionCelo(SincronizacionCelo entity)
		{
			this.SendPropertyChanging();
			entity.Veterinario = this;
		}
		
		private void detach_SincronizacionCelo(SincronizacionCelo entity)
		{
			this.SendPropertyChanging();
			entity.Veterinario = null;
		}
		
		private void attach_TratEnfermedad(TratEnfermedad entity)
		{
			this.SendPropertyChanging();
			entity.Veterinario = this;
		}
		
		private void detach_TratEnfermedad(TratEnfermedad entity)
		{
			this.SendPropertyChanging();
			entity.Veterinario = null;
		}
		
		private void attach_Inseminacion(Inseminacion entity)
		{
			this.SendPropertyChanging();
			entity.Veterinario = this;
		}
		
		private void detach_Inseminacion(Inseminacion entity)
		{
			this.SendPropertyChanging();
			entity.Veterinario = null;
		}
		
		private void attach_DiagAnimal(DiagAnimal entity)
		{
			this.SendPropertyChanging();
			entity.Veterinario = this;
		}
		
		private void detach_DiagAnimal(DiagAnimal entity)
		{
			this.SendPropertyChanging();
			entity.Veterinario = null;
		}
	}
	
	[Table(Name="dbo.Pastoreo")]
	public partial class Pastoreo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdParcela;
		
		private int _IdLote;
		
		private System.DateTime _FechaInicio;
		
		private System.Nullable<System.DateTime> _FechaFin;
		
		private System.Nullable<bool> _Total;
		
		private System.Nullable<decimal> _Cantidad;
		
		private EntityRef<LoteAnimal> _LoteAnimal;
		
		private EntityRef<Parcela> _Parcela;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdParcelaChanging(int value);
    partial void OnIdParcelaChanged();
    partial void OnIdLoteChanging(int value);
    partial void OnIdLoteChanged();
    partial void OnFechaInicioChanging(System.DateTime value);
    partial void OnFechaInicioChanged();
    partial void OnFechaFinChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaFinChanged();
    partial void OnTotalChanging(System.Nullable<bool> value);
    partial void OnTotalChanged();
    partial void OnCantidadChanging(System.Nullable<decimal> value);
    partial void OnCantidadChanged();
    #endregion
		
		public Pastoreo()
		{
			this._LoteAnimal = default(EntityRef<LoteAnimal>);
			this._Parcela = default(EntityRef<Parcela>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdParcela", DbType="Int NOT NULL")]
		public int IdParcela
		{
			get
			{
				return this._IdParcela;
			}
			set
			{
				if ((this._IdParcela != value))
				{
					if (this._Parcela.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdParcelaChanging(value);
					this.SendPropertyChanging();
					this._IdParcela = value;
					this.SendPropertyChanged("IdParcela");
					this.OnIdParcelaChanged();
				}
			}
		}
		
		[Column(Storage="_IdLote", DbType="Int NOT NULL")]
		public int IdLote
		{
			get
			{
				return this._IdLote;
			}
			set
			{
				if ((this._IdLote != value))
				{
					if (this._LoteAnimal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdLoteChanging(value);
					this.SendPropertyChanging();
					this._IdLote = value;
					this.SendPropertyChanged("IdLote");
					this.OnIdLoteChanged();
				}
			}
		}
		
		[Column(Storage="_FechaInicio", DbType="DateTime NOT NULL")]
		public System.DateTime FechaInicio
		{
			get
			{
				return this._FechaInicio;
			}
			set
			{
				if ((this._FechaInicio != value))
				{
					this.OnFechaInicioChanging(value);
					this.SendPropertyChanging();
					this._FechaInicio = value;
					this.SendPropertyChanged("FechaInicio");
					this.OnFechaInicioChanged();
				}
			}
		}
		
		[Column(Storage="_FechaFin", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaFin
		{
			get
			{
				return this._FechaFin;
			}
			set
			{
				if ((this._FechaFin != value))
				{
					this.OnFechaFinChanging(value);
					this.SendPropertyChanging();
					this._FechaFin = value;
					this.SendPropertyChanged("FechaFin");
					this.OnFechaFinChanged();
				}
			}
		}
		
		[Column(Storage="_Total", DbType="Bit")]
		public System.Nullable<bool> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[Column(Storage="_Cantidad", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> Cantidad
		{
			get
			{
				return this._Cantidad;
			}
			set
			{
				if ((this._Cantidad != value))
				{
					this.OnCantidadChanging(value);
					this.SendPropertyChanging();
					this._Cantidad = value;
					this.SendPropertyChanged("Cantidad");
					this.OnCantidadChanged();
				}
			}
		}
		
		[Association(Name="LoteAnimal_Pastoreo", Storage="_LoteAnimal", ThisKey="IdLote", OtherKey="Id", IsForeignKey=true)]
		public LoteAnimal LoteAnimal
		{
			get
			{
				return this._LoteAnimal.Entity;
			}
			set
			{
				LoteAnimal previousValue = this._LoteAnimal.Entity;
				if (((previousValue != value) 
							|| (this._LoteAnimal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoteAnimal.Entity = null;
						previousValue.Pastoreo.Remove(this);
					}
					this._LoteAnimal.Entity = value;
					if ((value != null))
					{
						value.Pastoreo.Add(this);
						this._IdLote = value.Id;
					}
					else
					{
						this._IdLote = default(int);
					}
					this.SendPropertyChanged("LoteAnimal");
				}
			}
		}
		
		[Association(Name="Parcela_Pastoreo", Storage="_Parcela", ThisKey="IdParcela", OtherKey="Id", IsForeignKey=true)]
		public Parcela Parcela
		{
			get
			{
				return this._Parcela.Entity;
			}
			set
			{
				Parcela previousValue = this._Parcela.Entity;
				if (((previousValue != value) 
							|| (this._Parcela.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parcela.Entity = null;
						previousValue.Pastoreo.Remove(this);
					}
					this._Parcela.Entity = value;
					if ((value != null))
					{
						value.Pastoreo.Add(this);
						this._IdParcela = value.Id;
					}
					else
					{
						this._IdParcela = default(int);
					}
					this.SendPropertyChanged("Parcela");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Fotografia")]
	public partial class Fotografia : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Data.Linq.Binary _Imagen;
		
		private EntitySet<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnImagenChanging(System.Data.Linq.Binary value);
    partial void OnImagenChanged();
    #endregion
		
		public Fotografia()
		{
			this._Animal = new EntitySet<Animal>(new Action<Animal>(this.attach_Animal), new Action<Animal>(this.detach_Animal));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Imagen", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Imagen
		{
			get
			{
				return this._Imagen;
			}
			set
			{
				if ((this._Imagen != value))
				{
					this.OnImagenChanging(value);
					this.SendPropertyChanging();
					this._Imagen = value;
					this.SendPropertyChanged("Imagen");
					this.OnImagenChanged();
				}
			}
		}
		
		[Association(Name="Fotografia_Animal", Storage="_Animal", ThisKey="Id", OtherKey="IdFotografia")]
		public EntitySet<Animal> Animal
		{
			get
			{
				return this._Animal;
			}
			set
			{
				this._Animal.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animal(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Fotografia = this;
		}
		
		private void detach_Animal(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Fotografia = null;
		}
	}
	
	[Table(Name="dbo.Parto")]
	public partial class Parto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdHembra;
		
		private int _IdTipo;
		
		private int _IdFacilidad;
		
		private int _Numero;
		
		private System.Nullable<int> _Vivos;
		
		private System.Nullable<int> _Muertos;
		
		private string _CausaMuerte;
		
		private System.DateTime _Fecha;
		
		private bool _Modificable;
		
		private EntitySet<InsPar> _InsPar;
		
		private EntityRef<Facilidad> _Facilidad;
		
		private EntityRef<TipoParto> _TipoParto;
		
		private EntityRef<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdHembraChanging(int value);
    partial void OnIdHembraChanged();
    partial void OnIdTipoChanging(int value);
    partial void OnIdTipoChanged();
    partial void OnIdFacilidadChanging(int value);
    partial void OnIdFacilidadChanged();
    partial void OnNumeroChanging(int value);
    partial void OnNumeroChanged();
    partial void OnVivosChanging(System.Nullable<int> value);
    partial void OnVivosChanged();
    partial void OnMuertosChanging(System.Nullable<int> value);
    partial void OnMuertosChanged();
    partial void OnCausaMuerteChanging(string value);
    partial void OnCausaMuerteChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    partial void OnModificableChanging(bool value);
    partial void OnModificableChanged();
    #endregion
		
		public Parto()
		{
			this._InsPar = new EntitySet<InsPar>(new Action<InsPar>(this.attach_InsPar), new Action<InsPar>(this.detach_InsPar));
			this._Facilidad = default(EntityRef<Facilidad>);
			this._TipoParto = default(EntityRef<TipoParto>);
			this._Animal = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdHembra", DbType="Int NOT NULL")]
		public int IdHembra
		{
			get
			{
				return this._IdHembra;
			}
			set
			{
				if ((this._IdHembra != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdHembraChanging(value);
					this.SendPropertyChanging();
					this._IdHembra = value;
					this.SendPropertyChanged("IdHembra");
					this.OnIdHembraChanged();
				}
			}
		}
		
		[Column(Storage="_IdTipo", DbType="Int NOT NULL")]
		public int IdTipo
		{
			get
			{
				return this._IdTipo;
			}
			set
			{
				if ((this._IdTipo != value))
				{
					if (this._TipoParto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTipoChanging(value);
					this.SendPropertyChanging();
					this._IdTipo = value;
					this.SendPropertyChanged("IdTipo");
					this.OnIdTipoChanged();
				}
			}
		}
		
		[Column(Storage="_IdFacilidad", DbType="Int NOT NULL")]
		public int IdFacilidad
		{
			get
			{
				return this._IdFacilidad;
			}
			set
			{
				if ((this._IdFacilidad != value))
				{
					if (this._Facilidad.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdFacilidadChanging(value);
					this.SendPropertyChanging();
					this._IdFacilidad = value;
					this.SendPropertyChanged("IdFacilidad");
					this.OnIdFacilidadChanged();
				}
			}
		}
		
		[Column(Storage="_Numero", DbType="Int NOT NULL")]
		public int Numero
		{
			get
			{
				return this._Numero;
			}
			set
			{
				if ((this._Numero != value))
				{
					this.OnNumeroChanging(value);
					this.SendPropertyChanging();
					this._Numero = value;
					this.SendPropertyChanged("Numero");
					this.OnNumeroChanged();
				}
			}
		}
		
		[Column(Storage="_Vivos", DbType="Int")]
		public System.Nullable<int> Vivos
		{
			get
			{
				return this._Vivos;
			}
			set
			{
				if ((this._Vivos != value))
				{
					this.OnVivosChanging(value);
					this.SendPropertyChanging();
					this._Vivos = value;
					this.SendPropertyChanged("Vivos");
					this.OnVivosChanged();
				}
			}
		}
		
		[Column(Storage="_Muertos", DbType="Int")]
		public System.Nullable<int> Muertos
		{
			get
			{
				return this._Muertos;
			}
			set
			{
				if ((this._Muertos != value))
				{
					this.OnMuertosChanging(value);
					this.SendPropertyChanging();
					this._Muertos = value;
					this.SendPropertyChanged("Muertos");
					this.OnMuertosChanged();
				}
			}
		}
		
		[Column(Storage="_CausaMuerte", DbType="VarChar(255)")]
		public string CausaMuerte
		{
			get
			{
				return this._CausaMuerte;
			}
			set
			{
				if ((this._CausaMuerte != value))
				{
					this.OnCausaMuerteChanging(value);
					this.SendPropertyChanging();
					this._CausaMuerte = value;
					this.SendPropertyChanged("CausaMuerte");
					this.OnCausaMuerteChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Column(Storage="_Modificable", DbType="Bit NOT NULL")]
		public bool Modificable
		{
			get
			{
				return this._Modificable;
			}
			set
			{
				if ((this._Modificable != value))
				{
					this.OnModificableChanging(value);
					this.SendPropertyChanging();
					this._Modificable = value;
					this.SendPropertyChanged("Modificable");
					this.OnModificableChanged();
				}
			}
		}
		
		[Association(Name="Parto_InsPar", Storage="_InsPar", ThisKey="Id", OtherKey="IdParto")]
		public EntitySet<InsPar> InsPar
		{
			get
			{
				return this._InsPar;
			}
			set
			{
				this._InsPar.Assign(value);
			}
		}
		
		[Association(Name="Facilidad_Parto", Storage="_Facilidad", ThisKey="IdFacilidad", OtherKey="Id", IsForeignKey=true)]
		public Facilidad Facilidad
		{
			get
			{
				return this._Facilidad.Entity;
			}
			set
			{
				Facilidad previousValue = this._Facilidad.Entity;
				if (((previousValue != value) 
							|| (this._Facilidad.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Facilidad.Entity = null;
						previousValue.Parto.Remove(this);
					}
					this._Facilidad.Entity = value;
					if ((value != null))
					{
						value.Parto.Add(this);
						this._IdFacilidad = value.Id;
					}
					else
					{
						this._IdFacilidad = default(int);
					}
					this.SendPropertyChanged("Facilidad");
				}
			}
		}
		
		[Association(Name="TipoParto_Parto", Storage="_TipoParto", ThisKey="IdTipo", OtherKey="Id", IsForeignKey=true)]
		public TipoParto TipoParto
		{
			get
			{
				return this._TipoParto.Entity;
			}
			set
			{
				TipoParto previousValue = this._TipoParto.Entity;
				if (((previousValue != value) 
							|| (this._TipoParto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoParto.Entity = null;
						previousValue.Parto.Remove(this);
					}
					this._TipoParto.Entity = value;
					if ((value != null))
					{
						value.Parto.Add(this);
						this._IdTipo = value.Id;
					}
					else
					{
						this._IdTipo = default(int);
					}
					this.SendPropertyChanged("TipoParto");
				}
			}
		}
		
		[Association(Name="Animal_Parto", Storage="_Animal", ThisKey="IdHembra", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.Parto.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.Parto.Add(this);
						this._IdHembra = value.Id;
					}
					else
					{
						this._IdHembra = default(int);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InsPar(InsPar entity)
		{
			this.SendPropertyChanging();
			entity.Parto = this;
		}
		
		private void detach_InsPar(InsPar entity)
		{
			this.SendPropertyChanging();
			entity.Parto = null;
		}
	}
	
	[Table(Name="dbo.Explotacion")]
	public partial class Explotacion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdCJuridica;
		
		private int _IdMunicipio;
		
		private string _CEA;
		
		private string _Siglas;
		
		private string _CodigoCLechero;
		
		private string _Nombre;
		
		private string _Direccion;
		
		private System.DateTime _FechaAlta;
		
		private System.Nullable<System.DateTime> _FechaBaja;
		
		private EntitySet<Cita> _Cita;
		
		private EntitySet<ExpCli> _ExpCli;
		
		private EntitySet<ExpEsp> _ExpEsp;
		
		private EntitySet<ExpMod> _ExpMod;
		
		private EntitySet<ExpPro> _ExpPro;
		
		private EntitySet<ExpTit> _ExpTit;
		
		private EntitySet<Tarea> _Tarea;
		
		private EntitySet<Contacto> _Contacto;
		
		private EntitySet<TratHigiene> _TratHigiene;
		
		private EntitySet<Gasto> _Gasto;
		
		private EntitySet<LoteAnimal> _LoteAnimal;
		
		private EntitySet<Maquinaria> _Maquinaria;
		
		private EntitySet<Zona> _Zona;
		
		private EntitySet<Plantilla> _Plantilla;
		
		private EntitySet<APPCC> _APPCC;
		
		private EntitySet<TratProfilaxis> _TratProfilaxis;
		
		private EntitySet<Veterinario> _Veterinario;
		
		private EntitySet<Venta> _Venta;
		
		private EntitySet<Compra> _Compra;
		
		private EntitySet<Movimiento> _Movimiento;
		
		private EntitySet<Stock> _Stock;
		
		private EntitySet<Animal> _Animal;
		
		private EntityRef<CondicionJuridica> _CondicionJuridica;
		
		private EntityRef<Municipio> _Municipio;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdCJuridicaChanging(int value);
    partial void OnIdCJuridicaChanged();
    partial void OnIdMunicipioChanging(int value);
    partial void OnIdMunicipioChanged();
    partial void OnCEAChanging(string value);
    partial void OnCEAChanged();
    partial void OnSiglasChanging(string value);
    partial void OnSiglasChanged();
    partial void OnCodigoCLecheroChanging(string value);
    partial void OnCodigoCLecheroChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnDireccionChanging(string value);
    partial void OnDireccionChanged();
    partial void OnFechaAltaChanging(System.DateTime value);
    partial void OnFechaAltaChanged();
    partial void OnFechaBajaChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaBajaChanged();
    #endregion
		
		public Explotacion()
		{
			this._Cita = new EntitySet<Cita>(new Action<Cita>(this.attach_Cita), new Action<Cita>(this.detach_Cita));
			this._ExpCli = new EntitySet<ExpCli>(new Action<ExpCli>(this.attach_ExpCli), new Action<ExpCli>(this.detach_ExpCli));
			this._ExpEsp = new EntitySet<ExpEsp>(new Action<ExpEsp>(this.attach_ExpEsp), new Action<ExpEsp>(this.detach_ExpEsp));
			this._ExpMod = new EntitySet<ExpMod>(new Action<ExpMod>(this.attach_ExpMod), new Action<ExpMod>(this.detach_ExpMod));
			this._ExpPro = new EntitySet<ExpPro>(new Action<ExpPro>(this.attach_ExpPro), new Action<ExpPro>(this.detach_ExpPro));
			this._ExpTit = new EntitySet<ExpTit>(new Action<ExpTit>(this.attach_ExpTit), new Action<ExpTit>(this.detach_ExpTit));
			this._Tarea = new EntitySet<Tarea>(new Action<Tarea>(this.attach_Tarea), new Action<Tarea>(this.detach_Tarea));
			this._Contacto = new EntitySet<Contacto>(new Action<Contacto>(this.attach_Contacto), new Action<Contacto>(this.detach_Contacto));
			this._TratHigiene = new EntitySet<TratHigiene>(new Action<TratHigiene>(this.attach_TratHigiene), new Action<TratHigiene>(this.detach_TratHigiene));
			this._Gasto = new EntitySet<Gasto>(new Action<Gasto>(this.attach_Gasto), new Action<Gasto>(this.detach_Gasto));
			this._LoteAnimal = new EntitySet<LoteAnimal>(new Action<LoteAnimal>(this.attach_LoteAnimal), new Action<LoteAnimal>(this.detach_LoteAnimal));
			this._Maquinaria = new EntitySet<Maquinaria>(new Action<Maquinaria>(this.attach_Maquinaria), new Action<Maquinaria>(this.detach_Maquinaria));
			this._Zona = new EntitySet<Zona>(new Action<Zona>(this.attach_Zona), new Action<Zona>(this.detach_Zona));
			this._Plantilla = new EntitySet<Plantilla>(new Action<Plantilla>(this.attach_Plantilla), new Action<Plantilla>(this.detach_Plantilla));
			this._APPCC = new EntitySet<APPCC>(new Action<APPCC>(this.attach_APPCC), new Action<APPCC>(this.detach_APPCC));
			this._TratProfilaxis = new EntitySet<TratProfilaxis>(new Action<TratProfilaxis>(this.attach_TratProfilaxis), new Action<TratProfilaxis>(this.detach_TratProfilaxis));
			this._Veterinario = new EntitySet<Veterinario>(new Action<Veterinario>(this.attach_Veterinario), new Action<Veterinario>(this.detach_Veterinario));
			this._Venta = new EntitySet<Venta>(new Action<Venta>(this.attach_Venta), new Action<Venta>(this.detach_Venta));
			this._Compra = new EntitySet<Compra>(new Action<Compra>(this.attach_Compra), new Action<Compra>(this.detach_Compra));
			this._Movimiento = new EntitySet<Movimiento>(new Action<Movimiento>(this.attach_Movimiento), new Action<Movimiento>(this.detach_Movimiento));
			this._Stock = new EntitySet<Stock>(new Action<Stock>(this.attach_Stock), new Action<Stock>(this.detach_Stock));
			this._Animal = new EntitySet<Animal>(new Action<Animal>(this.attach_Animal), new Action<Animal>(this.detach_Animal));
			this._CondicionJuridica = default(EntityRef<CondicionJuridica>);
			this._Municipio = default(EntityRef<Municipio>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdCJuridica", DbType="Int NOT NULL")]
		public int IdCJuridica
		{
			get
			{
				return this._IdCJuridica;
			}
			set
			{
				if ((this._IdCJuridica != value))
				{
					if (this._CondicionJuridica.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCJuridicaChanging(value);
					this.SendPropertyChanging();
					this._IdCJuridica = value;
					this.SendPropertyChanged("IdCJuridica");
					this.OnIdCJuridicaChanged();
				}
			}
		}
		
		[Column(Storage="_IdMunicipio", DbType="Int NOT NULL")]
		public int IdMunicipio
		{
			get
			{
				return this._IdMunicipio;
			}
			set
			{
				if ((this._IdMunicipio != value))
				{
					if (this._Municipio.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdMunicipioChanging(value);
					this.SendPropertyChanging();
					this._IdMunicipio = value;
					this.SendPropertyChanged("IdMunicipio");
					this.OnIdMunicipioChanged();
				}
			}
		}
		
		[Column(Storage="_CEA", DbType="VarChar(14) NOT NULL", CanBeNull=false)]
		public string CEA
		{
			get
			{
				return this._CEA;
			}
			set
			{
				if ((this._CEA != value))
				{
					this.OnCEAChanging(value);
					this.SendPropertyChanging();
					this._CEA = value;
					this.SendPropertyChanged("CEA");
					this.OnCEAChanged();
				}
			}
		}
		
		[Column(Storage="_Siglas", DbType="VarChar(7)")]
		public string Siglas
		{
			get
			{
				return this._Siglas;
			}
			set
			{
				if ((this._Siglas != value))
				{
					this.OnSiglasChanging(value);
					this.SendPropertyChanging();
					this._Siglas = value;
					this.SendPropertyChanged("Siglas");
					this.OnSiglasChanged();
				}
			}
		}
		
		[Column(Storage="_CodigoCLechero", DbType="VarChar(7)")]
		public string CodigoCLechero
		{
			get
			{
				return this._CodigoCLechero;
			}
			set
			{
				if ((this._CodigoCLechero != value))
				{
					this.OnCodigoCLecheroChanging(value);
					this.SendPropertyChanging();
					this._CodigoCLechero = value;
					this.SendPropertyChanged("CodigoCLechero");
					this.OnCodigoCLecheroChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Column(Storage="_Direccion", DbType="VarChar(100)")]
		public string Direccion
		{
			get
			{
				return this._Direccion;
			}
			set
			{
				if ((this._Direccion != value))
				{
					this.OnDireccionChanging(value);
					this.SendPropertyChanging();
					this._Direccion = value;
					this.SendPropertyChanged("Direccion");
					this.OnDireccionChanged();
				}
			}
		}
		
		[Column(Storage="_FechaAlta", DbType="DateTime NOT NULL")]
		public System.DateTime FechaAlta
		{
			get
			{
				return this._FechaAlta;
			}
			set
			{
				if ((this._FechaAlta != value))
				{
					this.OnFechaAltaChanging(value);
					this.SendPropertyChanging();
					this._FechaAlta = value;
					this.SendPropertyChanged("FechaAlta");
					this.OnFechaAltaChanged();
				}
			}
		}
		
		[Column(Storage="_FechaBaja", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaBaja
		{
			get
			{
				return this._FechaBaja;
			}
			set
			{
				if ((this._FechaBaja != value))
				{
					this.OnFechaBajaChanging(value);
					this.SendPropertyChanging();
					this._FechaBaja = value;
					this.SendPropertyChanged("FechaBaja");
					this.OnFechaBajaChanged();
				}
			}
		}
		
		[Association(Name="Explotacion_Cita", Storage="_Cita", ThisKey="Id", OtherKey="IdExplotacion")]
		public EntitySet<Cita> Cita
		{
			get
			{
				return this._Cita;
			}
			set
			{
				this._Cita.Assign(value);
			}
		}
		
		[Association(Name="Explotacion_ExpCli", Storage="_ExpCli", ThisKey="Id", OtherKey="IdExplotacion")]
		public EntitySet<ExpCli> ExpCli
		{
			get
			{
				return this._ExpCli;
			}
			set
			{
				this._ExpCli.Assign(value);
			}
		}
		
		[Association(Name="Explotacion_ExpEsp", Storage="_ExpEsp", ThisKey="Id", OtherKey="IdExplotacion")]
		public EntitySet<ExpEsp> ExpEsp
		{
			get
			{
				return this._ExpEsp;
			}
			set
			{
				this._ExpEsp.Assign(value);
			}
		}
		
		[Association(Name="Explotacion_ExpMod", Storage="_ExpMod", ThisKey="Id", OtherKey="IdExplotacion")]
		public EntitySet<ExpMod> ExpMod
		{
			get
			{
				return this._ExpMod;
			}
			set
			{
				this._ExpMod.Assign(value);
			}
		}
		
		[Association(Name="Explotacion_ExpPro", Storage="_ExpPro", ThisKey="Id", OtherKey="IdExplotacion")]
		public EntitySet<ExpPro> ExpPro
		{
			get
			{
				return this._ExpPro;
			}
			set
			{
				this._ExpPro.Assign(value);
			}
		}
		
		[Association(Name="Explotacion_ExpTit", Storage="_ExpTit", ThisKey="Id", OtherKey="IdExplotacion")]
		public EntitySet<ExpTit> ExpTit
		{
			get
			{
				return this._ExpTit;
			}
			set
			{
				this._ExpTit.Assign(value);
			}
		}
		
		[Association(Name="Explotacion_Tarea", Storage="_Tarea", ThisKey="Id", OtherKey="IdExplotacion")]
		public EntitySet<Tarea> Tarea
		{
			get
			{
				return this._Tarea;
			}
			set
			{
				this._Tarea.Assign(value);
			}
		}
		
		[Association(Name="Explotacion_Contacto", Storage="_Contacto", ThisKey="Id", OtherKey="IdExplotacion")]
		public EntitySet<Contacto> Contacto
		{
			get
			{
				return this._Contacto;
			}
			set
			{
				this._Contacto.Assign(value);
			}
		}
		
		[Association(Name="Explotacion_TratHigiene", Storage="_TratHigiene", ThisKey="Id", OtherKey="IdExplotacion")]
		public EntitySet<TratHigiene> TratHigiene
		{
			get
			{
				return this._TratHigiene;
			}
			set
			{
				this._TratHigiene.Assign(value);
			}
		}
		
		[Association(Name="Explotacion_Gasto", Storage="_Gasto", ThisKey="Id", OtherKey="IdExplotacion")]
		public EntitySet<Gasto> Gasto
		{
			get
			{
				return this._Gasto;
			}
			set
			{
				this._Gasto.Assign(value);
			}
		}
		
		[Association(Name="Explotacion_LoteAnimal", Storage="_LoteAnimal", ThisKey="Id", OtherKey="IdExplotacion")]
		public EntitySet<LoteAnimal> LoteAnimal
		{
			get
			{
				return this._LoteAnimal;
			}
			set
			{
				this._LoteAnimal.Assign(value);
			}
		}
		
		[Association(Name="Explotacion_Maquinaria", Storage="_Maquinaria", ThisKey="Id", OtherKey="IdExplotacion")]
		public EntitySet<Maquinaria> Maquinaria
		{
			get
			{
				return this._Maquinaria;
			}
			set
			{
				this._Maquinaria.Assign(value);
			}
		}
		
		[Association(Name="Explotacion_Zona", Storage="_Zona", ThisKey="Id", OtherKey="IdExplotacion")]
		public EntitySet<Zona> Zona
		{
			get
			{
				return this._Zona;
			}
			set
			{
				this._Zona.Assign(value);
			}
		}
		
		[Association(Name="Explotacion_Plantilla", Storage="_Plantilla", ThisKey="Id", OtherKey="IdExplotacion")]
		public EntitySet<Plantilla> Plantilla
		{
			get
			{
				return this._Plantilla;
			}
			set
			{
				this._Plantilla.Assign(value);
			}
		}
		
		[Association(Name="Explotacion_APPCC", Storage="_APPCC", ThisKey="Id", OtherKey="IdExplotacion")]
		public EntitySet<APPCC> APPCC
		{
			get
			{
				return this._APPCC;
			}
			set
			{
				this._APPCC.Assign(value);
			}
		}
		
		[Association(Name="Explotacion_TratProfilaxis", Storage="_TratProfilaxis", ThisKey="Id", OtherKey="IdExplotacion")]
		public EntitySet<TratProfilaxis> TratProfilaxis
		{
			get
			{
				return this._TratProfilaxis;
			}
			set
			{
				this._TratProfilaxis.Assign(value);
			}
		}
		
		[Association(Name="Explotacion_Veterinario", Storage="_Veterinario", ThisKey="Id", OtherKey="IdExplotacion")]
		public EntitySet<Veterinario> Veterinario
		{
			get
			{
				return this._Veterinario;
			}
			set
			{
				this._Veterinario.Assign(value);
			}
		}
		
		[Association(Name="Explotacion_Venta", Storage="_Venta", ThisKey="Id", OtherKey="IdExplotacion")]
		public EntitySet<Venta> Venta
		{
			get
			{
				return this._Venta;
			}
			set
			{
				this._Venta.Assign(value);
			}
		}
		
		[Association(Name="Explotacion_Compra", Storage="_Compra", ThisKey="Id", OtherKey="IdExplotacion")]
		public EntitySet<Compra> Compra
		{
			get
			{
				return this._Compra;
			}
			set
			{
				this._Compra.Assign(value);
			}
		}
		
		[Association(Name="Explotacion_Movimiento", Storage="_Movimiento", ThisKey="Id", OtherKey="IdExplotacion")]
		public EntitySet<Movimiento> Movimiento
		{
			get
			{
				return this._Movimiento;
			}
			set
			{
				this._Movimiento.Assign(value);
			}
		}
		
		[Association(Name="Explotacion_Stock", Storage="_Stock", ThisKey="Id", OtherKey="IdExplotacion")]
		public EntitySet<Stock> Stock
		{
			get
			{
				return this._Stock;
			}
			set
			{
				this._Stock.Assign(value);
			}
		}
		
		[Association(Name="Explotacion_Animal", Storage="_Animal", ThisKey="Id", OtherKey="IdExplotacion")]
		public EntitySet<Animal> Animal
		{
			get
			{
				return this._Animal;
			}
			set
			{
				this._Animal.Assign(value);
			}
		}
		
		[Association(Name="CondicionJuridica_Explotacion", Storage="_CondicionJuridica", ThisKey="IdCJuridica", OtherKey="Id", IsForeignKey=true)]
		public CondicionJuridica CondicionJuridica
		{
			get
			{
				return this._CondicionJuridica.Entity;
			}
			set
			{
				CondicionJuridica previousValue = this._CondicionJuridica.Entity;
				if (((previousValue != value) 
							|| (this._CondicionJuridica.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CondicionJuridica.Entity = null;
						previousValue.Explotacion.Remove(this);
					}
					this._CondicionJuridica.Entity = value;
					if ((value != null))
					{
						value.Explotacion.Add(this);
						this._IdCJuridica = value.Id;
					}
					else
					{
						this._IdCJuridica = default(int);
					}
					this.SendPropertyChanged("CondicionJuridica");
				}
			}
		}
		
		[Association(Name="Municipio_Explotacion", Storage="_Municipio", ThisKey="IdMunicipio", OtherKey="Id", IsForeignKey=true)]
		public Municipio Municipio
		{
			get
			{
				return this._Municipio.Entity;
			}
			set
			{
				Municipio previousValue = this._Municipio.Entity;
				if (((previousValue != value) 
							|| (this._Municipio.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Municipio.Entity = null;
						previousValue.Explotacion.Remove(this);
					}
					this._Municipio.Entity = value;
					if ((value != null))
					{
						value.Explotacion.Add(this);
						this._IdMunicipio = value.Id;
					}
					else
					{
						this._IdMunicipio = default(int);
					}
					this.SendPropertyChanged("Municipio");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cita(Cita entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = this;
		}
		
		private void detach_Cita(Cita entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = null;
		}
		
		private void attach_ExpCli(ExpCli entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = this;
		}
		
		private void detach_ExpCli(ExpCli entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = null;
		}
		
		private void attach_ExpEsp(ExpEsp entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = this;
		}
		
		private void detach_ExpEsp(ExpEsp entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = null;
		}
		
		private void attach_ExpMod(ExpMod entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = this;
		}
		
		private void detach_ExpMod(ExpMod entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = null;
		}
		
		private void attach_ExpPro(ExpPro entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = this;
		}
		
		private void detach_ExpPro(ExpPro entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = null;
		}
		
		private void attach_ExpTit(ExpTit entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = this;
		}
		
		private void detach_ExpTit(ExpTit entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = null;
		}
		
		private void attach_Tarea(Tarea entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = this;
		}
		
		private void detach_Tarea(Tarea entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = null;
		}
		
		private void attach_Contacto(Contacto entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = this;
		}
		
		private void detach_Contacto(Contacto entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = null;
		}
		
		private void attach_TratHigiene(TratHigiene entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = this;
		}
		
		private void detach_TratHigiene(TratHigiene entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = null;
		}
		
		private void attach_Gasto(Gasto entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = this;
		}
		
		private void detach_Gasto(Gasto entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = null;
		}
		
		private void attach_LoteAnimal(LoteAnimal entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = this;
		}
		
		private void detach_LoteAnimal(LoteAnimal entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = null;
		}
		
		private void attach_Maquinaria(Maquinaria entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = this;
		}
		
		private void detach_Maquinaria(Maquinaria entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = null;
		}
		
		private void attach_Zona(Zona entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = this;
		}
		
		private void detach_Zona(Zona entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = null;
		}
		
		private void attach_Plantilla(Plantilla entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = this;
		}
		
		private void detach_Plantilla(Plantilla entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = null;
		}
		
		private void attach_APPCC(APPCC entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = this;
		}
		
		private void detach_APPCC(APPCC entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = null;
		}
		
		private void attach_TratProfilaxis(TratProfilaxis entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = this;
		}
		
		private void detach_TratProfilaxis(TratProfilaxis entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = null;
		}
		
		private void attach_Veterinario(Veterinario entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = this;
		}
		
		private void detach_Veterinario(Veterinario entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = null;
		}
		
		private void attach_Venta(Venta entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = this;
		}
		
		private void detach_Venta(Venta entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = null;
		}
		
		private void attach_Compra(Compra entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = this;
		}
		
		private void detach_Compra(Compra entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = null;
		}
		
		private void attach_Movimiento(Movimiento entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = this;
		}
		
		private void detach_Movimiento(Movimiento entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = null;
		}
		
		private void attach_Stock(Stock entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = this;
		}
		
		private void detach_Stock(Stock entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = null;
		}
		
		private void attach_Animal(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = this;
		}
		
		private void detach_Animal(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Explotacion = null;
		}
	}
	
	[Table(Name="")]
	public partial class AlertarEnfermas
	{
		
		private string _CI;
		
		private string _Enfermedad;
		
		private string _Medicamento;
		
		private string _Supresion;
		
		private string _Fecha;
		
		private object _Tag;
		
		public AlertarEnfermas()
		{
		}
		
		[Column(Storage="_CI", CanBeNull=false)]
		public string CI
		{
			get
			{
				return this._CI;
			}
			set
			{
				if ((this._CI != value))
				{
					this._CI = value;
				}
			}
		}
		
		[Column(Storage="_Enfermedad")]
		public string Enfermedad
		{
			get
			{
				return this._Enfermedad;
			}
			set
			{
				if ((this._Enfermedad != value))
				{
					this._Enfermedad = value;
				}
			}
		}
		
		[Column(Storage="_Medicamento")]
		public string Medicamento
		{
			get
			{
				return this._Medicamento;
			}
			set
			{
				if ((this._Medicamento != value))
				{
					this._Medicamento = value;
				}
			}
		}
		
		[Column(Storage="_Supresion")]
		public string Supresion
		{
			get
			{
				return this._Supresion;
			}
			set
			{
				if ((this._Supresion != value))
				{
					this._Supresion = value;
				}
			}
		}
		
		[Column(Storage="_Fecha", CanBeNull=false)]
		public string FechaFinSupresion
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this._Fecha = value;
				}
			}
		}
		
		[Column(Storage="_Tag", CanBeNull=false)]
		public object Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this._Tag = value;
				}
			}
		}
	}
	
	[Table(Name="")]
	public partial class AlertarSecadas
	{
		
		private string _CI;
		
		private System.DateTime _FechaParto;
		
		private int _Dias;
		
		private object _Tag;
		
		public AlertarSecadas()
		{
		}
		
		[Column(Storage="_CI", CanBeNull=false)]
		public string CI
		{
			get
			{
				return this._CI;
			}
			set
			{
				if ((this._CI != value))
				{
					this._CI = value;
				}
			}
		}
		
		[Column(Storage="_FechaParto")]
		public System.DateTime FechaParto
		{
			get
			{
				return this._FechaParto;
			}
			set
			{
				if ((this._FechaParto != value))
				{
					this._FechaParto = value;
				}
			}
		}
		
		[Column(Storage="_Dias")]
		public int Dias
		{
			get
			{
				return this._Dias;
			}
			set
			{
				if ((this._Dias != value))
				{
					this._Dias = value;
				}
			}
		}
		
		[Column(Storage="_Tag", CanBeNull=false)]
		public object Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this._Tag = value;
				}
			}
		}
	}
	
	[Table(Name="")]
	public partial class AlertarParidas
	{
		
		private string _CI;
		
		private System.DateTime _FechaInseminacion;
		
		private object _Tag;
		
		private int _Dias;
		
		public AlertarParidas()
		{
		}
		
		[Column(Storage="_CI", CanBeNull=false)]
		public string CI
		{
			get
			{
				return this._CI;
			}
			set
			{
				if ((this._CI != value))
				{
					this._CI = value;
				}
			}
		}
		
		[Column(Storage="_FechaInseminacion")]
		public System.DateTime FechaInseminacion
		{
			get
			{
				return this._FechaInseminacion;
			}
			set
			{
				if ((this._FechaInseminacion != value))
				{
					this._FechaInseminacion = value;
				}
			}
		}
		
		[Column(Storage="_Tag", CanBeNull=false)]
		public object Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this._Tag = value;
				}
			}
		}
		
		[Column(Storage="_Dias")]
		public int Dias
		{
			get
			{
				return this._Dias;
			}
			set
			{
				if ((this._Dias != value))
				{
					this._Dias = value;
				}
			}
		}
	}
	
	[Table(Name="")]
	public partial class AlertarDiagnosticos
	{
		
		private string _CI;
		
		private System.DateTime _FechaInseminacion;
		
		private object _Tag;
		
		private int _Dias;
		
		public AlertarDiagnosticos()
		{
		}
		
		[Column(Storage="_CI", CanBeNull=false)]
		public string CI
		{
			get
			{
				return this._CI;
			}
			set
			{
				if ((this._CI != value))
				{
					this._CI = value;
				}
			}
		}
		
		[Column(Storage="_FechaInseminacion")]
		public System.DateTime FechaInseminacion
		{
			get
			{
				return this._FechaInseminacion;
			}
			set
			{
				if ((this._FechaInseminacion != value))
				{
					this._FechaInseminacion = value;
				}
			}
		}
		
		[Column(Storage="_Tag", CanBeNull=false)]
		public object Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this._Tag = value;
				}
			}
		}
		
		[Column(Storage="_Dias")]
		public int Dias
		{
			get
			{
				return this._Dias;
			}
			set
			{
				if ((this._Dias != value))
				{
					this._Dias = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.DiagAnimal")]
	public partial class DiagAnimal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdAnimal;
		
		private System.Nullable<int> _IdEnfermedad;
		
		private System.Nullable<int> _IdVeterinario;
		
		private string _Diagnostico;
		
		private System.DateTime _Fecha;
		
		private bool _Modificable;
		
		private EntitySet<TratEnfermedad> _TratEnfermedad;
		
		private EntityRef<Enfermedad> _Enfermedad;
		
		private EntityRef<Veterinario> _Veterinario;
		
		private EntityRef<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdAnimalChanging(int value);
    partial void OnIdAnimalChanged();
    partial void OnIdEnfermedadChanging(System.Nullable<int> value);
    partial void OnIdEnfermedadChanged();
    partial void OnIdVeterinarioChanging(System.Nullable<int> value);
    partial void OnIdVeterinarioChanged();
    partial void OnDiagnosticoChanging(string value);
    partial void OnDiagnosticoChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    partial void OnModificableChanging(bool value);
    partial void OnModificableChanged();
    #endregion
		
		public DiagAnimal()
		{
			this._TratEnfermedad = new EntitySet<TratEnfermedad>(new Action<TratEnfermedad>(this.attach_TratEnfermedad), new Action<TratEnfermedad>(this.detach_TratEnfermedad));
			this._Enfermedad = default(EntityRef<Enfermedad>);
			this._Veterinario = default(EntityRef<Veterinario>);
			this._Animal = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdAnimal", DbType="Int NOT NULL")]
		public int IdAnimal
		{
			get
			{
				return this._IdAnimal;
			}
			set
			{
				if ((this._IdAnimal != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAnimalChanging(value);
					this.SendPropertyChanging();
					this._IdAnimal = value;
					this.SendPropertyChanged("IdAnimal");
					this.OnIdAnimalChanged();
				}
			}
		}
		
		[Column(Storage="_IdEnfermedad", DbType="Int")]
		public System.Nullable<int> IdEnfermedad
		{
			get
			{
				return this._IdEnfermedad;
			}
			set
			{
				if ((this._IdEnfermedad != value))
				{
					if (this._Enfermedad.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdEnfermedadChanging(value);
					this.SendPropertyChanging();
					this._IdEnfermedad = value;
					this.SendPropertyChanged("IdEnfermedad");
					this.OnIdEnfermedadChanged();
				}
			}
		}
		
		[Column(Storage="_IdVeterinario", DbType="Int")]
		public System.Nullable<int> IdVeterinario
		{
			get
			{
				return this._IdVeterinario;
			}
			set
			{
				if ((this._IdVeterinario != value))
				{
					if (this._Veterinario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdVeterinarioChanging(value);
					this.SendPropertyChanging();
					this._IdVeterinario = value;
					this.SendPropertyChanged("IdVeterinario");
					this.OnIdVeterinarioChanged();
				}
			}
		}
		
		[Column(Storage="_Diagnostico", DbType="VarChar(2000)")]
		public string Diagnostico
		{
			get
			{
				return this._Diagnostico;
			}
			set
			{
				if ((this._Diagnostico != value))
				{
					this.OnDiagnosticoChanging(value);
					this.SendPropertyChanging();
					this._Diagnostico = value;
					this.SendPropertyChanged("Diagnostico");
					this.OnDiagnosticoChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Column(Storage="_Modificable", DbType="Bit NOT NULL")]
		public bool Modificable
		{
			get
			{
				return this._Modificable;
			}
			set
			{
				if ((this._Modificable != value))
				{
					this.OnModificableChanging(value);
					this.SendPropertyChanging();
					this._Modificable = value;
					this.SendPropertyChanged("Modificable");
					this.OnModificableChanged();
				}
			}
		}
		
		[Association(Name="DiagAnimal_TratEnfermedad", Storage="_TratEnfermedad", ThisKey="Id", OtherKey="IdDiagnostico")]
		public EntitySet<TratEnfermedad> TratEnfermedad
		{
			get
			{
				return this._TratEnfermedad;
			}
			set
			{
				this._TratEnfermedad.Assign(value);
			}
		}
		
		[Association(Name="Enfermedad_DiagAnimal", Storage="_Enfermedad", ThisKey="IdEnfermedad", OtherKey="Id", IsForeignKey=true)]
		public Enfermedad Enfermedad
		{
			get
			{
				return this._Enfermedad.Entity;
			}
			set
			{
				Enfermedad previousValue = this._Enfermedad.Entity;
				if (((previousValue != value) 
							|| (this._Enfermedad.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enfermedad.Entity = null;
						previousValue.DiagAnimal.Remove(this);
					}
					this._Enfermedad.Entity = value;
					if ((value != null))
					{
						value.DiagAnimal.Add(this);
						this._IdEnfermedad = value.Id;
					}
					else
					{
						this._IdEnfermedad = default(Nullable<int>);
					}
					this.SendPropertyChanged("Enfermedad");
				}
			}
		}
		
		[Association(Name="Veterinario_DiagAnimal", Storage="_Veterinario", ThisKey="IdVeterinario", OtherKey="Id", IsForeignKey=true)]
		public Veterinario Veterinario
		{
			get
			{
				return this._Veterinario.Entity;
			}
			set
			{
				Veterinario previousValue = this._Veterinario.Entity;
				if (((previousValue != value) 
							|| (this._Veterinario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Veterinario.Entity = null;
						previousValue.DiagAnimal.Remove(this);
					}
					this._Veterinario.Entity = value;
					if ((value != null))
					{
						value.DiagAnimal.Add(this);
						this._IdVeterinario = value.Id;
					}
					else
					{
						this._IdVeterinario = default(Nullable<int>);
					}
					this.SendPropertyChanged("Veterinario");
				}
			}
		}
		
		[Association(Name="Animal_DiagAnimal", Storage="_Animal", ThisKey="IdAnimal", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.DiagAnimal.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.DiagAnimal.Add(this);
						this._IdAnimal = value.Id;
					}
					else
					{
						this._IdAnimal = default(int);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TratEnfermedad(TratEnfermedad entity)
		{
			this.SendPropertyChanging();
			entity.DiagAnimal = this;
		}
		
		private void detach_TratEnfermedad(TratEnfermedad entity)
		{
			this.SendPropertyChanging();
			entity.DiagAnimal = null;
		}
	}
	
	[Table(Name="dbo.CondicionCorporal")]
	public partial class CondicionCorporal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdTipo;
		
		private int _IdHembra;
		
		private System.DateTime _Fecha;
		
		private bool _Modificable;
		
		private EntityRef<TipoCondicion> _TipoCondicion;
		
		private EntityRef<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdTipoChanging(int value);
    partial void OnIdTipoChanged();
    partial void OnIdHembraChanging(int value);
    partial void OnIdHembraChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    partial void OnModificableChanging(bool value);
    partial void OnModificableChanged();
    #endregion
		
		public CondicionCorporal()
		{
			this._TipoCondicion = default(EntityRef<TipoCondicion>);
			this._Animal = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdTipo", DbType="Int NOT NULL")]
		public int IdTipo
		{
			get
			{
				return this._IdTipo;
			}
			set
			{
				if ((this._IdTipo != value))
				{
					if (this._TipoCondicion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTipoChanging(value);
					this.SendPropertyChanging();
					this._IdTipo = value;
					this.SendPropertyChanged("IdTipo");
					this.OnIdTipoChanged();
				}
			}
		}
		
		[Column(Storage="_IdHembra", DbType="Int NOT NULL")]
		public int IdHembra
		{
			get
			{
				return this._IdHembra;
			}
			set
			{
				if ((this._IdHembra != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdHembraChanging(value);
					this.SendPropertyChanging();
					this._IdHembra = value;
					this.SendPropertyChanged("IdHembra");
					this.OnIdHembraChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Column(Storage="_Modificable", DbType="Bit NOT NULL")]
		public bool Modificable
		{
			get
			{
				return this._Modificable;
			}
			set
			{
				if ((this._Modificable != value))
				{
					this.OnModificableChanging(value);
					this.SendPropertyChanging();
					this._Modificable = value;
					this.SendPropertyChanged("Modificable");
					this.OnModificableChanged();
				}
			}
		}
		
		[Association(Name="TipoCondicion_CondicionCorporal", Storage="_TipoCondicion", ThisKey="IdTipo", OtherKey="Id", IsForeignKey=true)]
		public TipoCondicion TipoCondicion
		{
			get
			{
				return this._TipoCondicion.Entity;
			}
			set
			{
				TipoCondicion previousValue = this._TipoCondicion.Entity;
				if (((previousValue != value) 
							|| (this._TipoCondicion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoCondicion.Entity = null;
						previousValue.CondicionCorporal.Remove(this);
					}
					this._TipoCondicion.Entity = value;
					if ((value != null))
					{
						value.CondicionCorporal.Add(this);
						this._IdTipo = value.Id;
					}
					else
					{
						this._IdTipo = default(int);
					}
					this.SendPropertyChanged("TipoCondicion");
				}
			}
		}
		
		[Association(Name="Animal_CondicionCorporal", Storage="_Animal", ThisKey="IdHembra", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.CondicionCorporal.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.CondicionCorporal.Add(this);
						this._IdHembra = value.Id;
					}
					else
					{
						this._IdHembra = default(int);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Venta")]
	public partial class Venta : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdExplotacion;
		
		private System.Nullable<int> _IdClasificacion;
		
		private int _IdTipo;
		
		private System.Nullable<int> _IdProducto;
		
		private System.Nullable<int> _IdCliente;
		
		private string _Concepto;
		
		private System.Nullable<decimal> _Cantidad;
		
		private System.DateTime _Fecha;
		
		private decimal _Importe;
		
		private bool _Cobrada;
		
		private EntityRef<Cliente> _Cliente;
		
		private EntityRef<Explotacion> _Explotacion;
		
		private EntityRef<Producto> _Producto;
		
		private EntityRef<TipoProducto> _TipoProducto;
		
		private EntityRef<TipoVenta> _TipoVenta;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdExplotacionChanging(int value);
    partial void OnIdExplotacionChanged();
    partial void OnIdClasificacionChanging(System.Nullable<int> value);
    partial void OnIdClasificacionChanged();
    partial void OnIdTipoChanging(int value);
    partial void OnIdTipoChanged();
    partial void OnIdProductoChanging(System.Nullable<int> value);
    partial void OnIdProductoChanged();
    partial void OnIdClienteChanging(System.Nullable<int> value);
    partial void OnIdClienteChanged();
    partial void OnConceptoChanging(string value);
    partial void OnConceptoChanged();
    partial void OnCantidadChanging(System.Nullable<decimal> value);
    partial void OnCantidadChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    partial void OnImporteChanging(decimal value);
    partial void OnImporteChanged();
    partial void OnCobradaChanging(bool value);
    partial void OnCobradaChanged();
    #endregion
		
		public Venta()
		{
			this._Cliente = default(EntityRef<Cliente>);
			this._Explotacion = default(EntityRef<Explotacion>);
			this._Producto = default(EntityRef<Producto>);
			this._TipoProducto = default(EntityRef<TipoProducto>);
			this._TipoVenta = default(EntityRef<TipoVenta>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdExplotacion", DbType="Int NOT NULL")]
		public int IdExplotacion
		{
			get
			{
				return this._IdExplotacion;
			}
			set
			{
				if ((this._IdExplotacion != value))
				{
					if (this._Explotacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdExplotacionChanging(value);
					this.SendPropertyChanging();
					this._IdExplotacion = value;
					this.SendPropertyChanged("IdExplotacion");
					this.OnIdExplotacionChanged();
				}
			}
		}
		
		[Column(Storage="_IdClasificacion", DbType="Int")]
		public System.Nullable<int> IdClasificacion
		{
			get
			{
				return this._IdClasificacion;
			}
			set
			{
				if ((this._IdClasificacion != value))
				{
					if (this._TipoVenta.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdClasificacionChanging(value);
					this.SendPropertyChanging();
					this._IdClasificacion = value;
					this.SendPropertyChanged("IdClasificacion");
					this.OnIdClasificacionChanged();
				}
			}
		}
		
		[Column(Storage="_IdTipo", DbType="Int NOT NULL")]
		public int IdTipo
		{
			get
			{
				return this._IdTipo;
			}
			set
			{
				if ((this._IdTipo != value))
				{
					if (this._TipoProducto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTipoChanging(value);
					this.SendPropertyChanging();
					this._IdTipo = value;
					this.SendPropertyChanged("IdTipo");
					this.OnIdTipoChanged();
				}
			}
		}
		
		[Column(Storage="_IdProducto", DbType="Int")]
		public System.Nullable<int> IdProducto
		{
			get
			{
				return this._IdProducto;
			}
			set
			{
				if ((this._IdProducto != value))
				{
					if (this._Producto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdProductoChanging(value);
					this.SendPropertyChanging();
					this._IdProducto = value;
					this.SendPropertyChanged("IdProducto");
					this.OnIdProductoChanged();
				}
			}
		}
		
		[Column(Storage="_IdCliente", DbType="Int")]
		public System.Nullable<int> IdCliente
		{
			get
			{
				return this._IdCliente;
			}
			set
			{
				if ((this._IdCliente != value))
				{
					if (this._Cliente.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdClienteChanging(value);
					this.SendPropertyChanging();
					this._IdCliente = value;
					this.SendPropertyChanged("IdCliente");
					this.OnIdClienteChanged();
				}
			}
		}
		
		[Column(Storage="_Concepto", DbType="VarChar(255)")]
		public string Concepto
		{
			get
			{
				return this._Concepto;
			}
			set
			{
				if ((this._Concepto != value))
				{
					this.OnConceptoChanging(value);
					this.SendPropertyChanging();
					this._Concepto = value;
					this.SendPropertyChanged("Concepto");
					this.OnConceptoChanged();
				}
			}
		}
		
		[Column(Storage="_Cantidad", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> Cantidad
		{
			get
			{
				return this._Cantidad;
			}
			set
			{
				if ((this._Cantidad != value))
				{
					this.OnCantidadChanging(value);
					this.SendPropertyChanging();
					this._Cantidad = value;
					this.SendPropertyChanged("Cantidad");
					this.OnCantidadChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Column(Storage="_Importe", DbType="Decimal(10,2) NOT NULL")]
		public decimal Importe
		{
			get
			{
				return this._Importe;
			}
			set
			{
				if ((this._Importe != value))
				{
					this.OnImporteChanging(value);
					this.SendPropertyChanging();
					this._Importe = value;
					this.SendPropertyChanged("Importe");
					this.OnImporteChanged();
				}
			}
		}
		
		[Column(Storage="_Cobrada", DbType="Bit NOT NULL")]
		public bool Cobrada
		{
			get
			{
				return this._Cobrada;
			}
			set
			{
				if ((this._Cobrada != value))
				{
					this.OnCobradaChanging(value);
					this.SendPropertyChanging();
					this._Cobrada = value;
					this.SendPropertyChanged("Cobrada");
					this.OnCobradaChanged();
				}
			}
		}
		
		[Association(Name="Cliente_Venta", Storage="_Cliente", ThisKey="IdCliente", OtherKey="Id", IsForeignKey=true)]
		public Cliente Cliente
		{
			get
			{
				return this._Cliente.Entity;
			}
			set
			{
				Cliente previousValue = this._Cliente.Entity;
				if (((previousValue != value) 
							|| (this._Cliente.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cliente.Entity = null;
						previousValue.Venta.Remove(this);
					}
					this._Cliente.Entity = value;
					if ((value != null))
					{
						value.Venta.Add(this);
						this._IdCliente = value.Id;
					}
					else
					{
						this._IdCliente = default(Nullable<int>);
					}
					this.SendPropertyChanged("Cliente");
				}
			}
		}
		
		[Association(Name="Explotacion_Venta", Storage="_Explotacion", ThisKey="IdExplotacion", OtherKey="Id", IsForeignKey=true)]
		public Explotacion Explotacion
		{
			get
			{
				return this._Explotacion.Entity;
			}
			set
			{
				Explotacion previousValue = this._Explotacion.Entity;
				if (((previousValue != value) 
							|| (this._Explotacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Explotacion.Entity = null;
						previousValue.Venta.Remove(this);
					}
					this._Explotacion.Entity = value;
					if ((value != null))
					{
						value.Venta.Add(this);
						this._IdExplotacion = value.Id;
					}
					else
					{
						this._IdExplotacion = default(int);
					}
					this.SendPropertyChanged("Explotacion");
				}
			}
		}
		
		[Association(Name="Producto_Venta", Storage="_Producto", ThisKey="IdProducto", OtherKey="Id", IsForeignKey=true)]
		public Producto Producto
		{
			get
			{
				return this._Producto.Entity;
			}
			set
			{
				Producto previousValue = this._Producto.Entity;
				if (((previousValue != value) 
							|| (this._Producto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Producto.Entity = null;
						previousValue.Venta.Remove(this);
					}
					this._Producto.Entity = value;
					if ((value != null))
					{
						value.Venta.Add(this);
						this._IdProducto = value.Id;
					}
					else
					{
						this._IdProducto = default(Nullable<int>);
					}
					this.SendPropertyChanged("Producto");
				}
			}
		}
		
		[Association(Name="TipoProducto_Venta", Storage="_TipoProducto", ThisKey="IdTipo", OtherKey="Id", IsForeignKey=true)]
		public TipoProducto TipoProducto
		{
			get
			{
				return this._TipoProducto.Entity;
			}
			set
			{
				TipoProducto previousValue = this._TipoProducto.Entity;
				if (((previousValue != value) 
							|| (this._TipoProducto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoProducto.Entity = null;
						previousValue.Venta.Remove(this);
					}
					this._TipoProducto.Entity = value;
					if ((value != null))
					{
						value.Venta.Add(this);
						this._IdTipo = value.Id;
					}
					else
					{
						this._IdTipo = default(int);
					}
					this.SendPropertyChanged("TipoProducto");
				}
			}
		}
		
		[Association(Name="TipoVenta_Venta", Storage="_TipoVenta", ThisKey="IdClasificacion", OtherKey="Id", IsForeignKey=true)]
		public TipoVenta TipoVenta
		{
			get
			{
				return this._TipoVenta.Entity;
			}
			set
			{
				TipoVenta previousValue = this._TipoVenta.Entity;
				if (((previousValue != value) 
							|| (this._TipoVenta.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoVenta.Entity = null;
						previousValue.Venta.Remove(this);
					}
					this._TipoVenta.Entity = value;
					if ((value != null))
					{
						value.Venta.Add(this);
						this._IdClasificacion = value.Id;
					}
					else
					{
						this._IdClasificacion = default(Nullable<int>);
					}
					this.SendPropertyChanged("TipoVenta");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Compra")]
	public partial class Compra : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdExplotacion;
		
		private System.Nullable<int> _IdClasificacion;
		
		private int _IdTipo;
		
		private System.Nullable<int> _IdProducto;
		
		private System.Nullable<int> _IdMacho;
		
		private System.Nullable<int> _IdProveedor;
		
		private string _Concepto;
		
		private System.Nullable<decimal> _Cantidad;
		
		private System.DateTime _Fecha;
		
		private decimal _Importe;
		
		private bool _Pagada;
		
		private EntityRef<Explotacion> _Explotacion;
		
		private EntityRef<Producto> _Producto;
		
		private EntityRef<Proveedor> _Proveedor;
		
		private EntityRef<TipoCompra> _TipoCompra;
		
		private EntityRef<TipoProducto> _TipoProducto;
		
		private EntityRef<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdExplotacionChanging(int value);
    partial void OnIdExplotacionChanged();
    partial void OnIdClasificacionChanging(System.Nullable<int> value);
    partial void OnIdClasificacionChanged();
    partial void OnIdTipoChanging(int value);
    partial void OnIdTipoChanged();
    partial void OnIdProductoChanging(System.Nullable<int> value);
    partial void OnIdProductoChanged();
    partial void OnIdMachoChanging(System.Nullable<int> value);
    partial void OnIdMachoChanged();
    partial void OnIdProveedorChanging(System.Nullable<int> value);
    partial void OnIdProveedorChanged();
    partial void OnConceptoChanging(string value);
    partial void OnConceptoChanged();
    partial void OnCantidadChanging(System.Nullable<decimal> value);
    partial void OnCantidadChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    partial void OnImporteChanging(decimal value);
    partial void OnImporteChanged();
    partial void OnPagadaChanging(bool value);
    partial void OnPagadaChanged();
    #endregion
		
		public Compra()
		{
			this._Explotacion = default(EntityRef<Explotacion>);
			this._Producto = default(EntityRef<Producto>);
			this._Proveedor = default(EntityRef<Proveedor>);
			this._TipoCompra = default(EntityRef<TipoCompra>);
			this._TipoProducto = default(EntityRef<TipoProducto>);
			this._Animal = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdExplotacion", DbType="Int NOT NULL")]
		public int IdExplotacion
		{
			get
			{
				return this._IdExplotacion;
			}
			set
			{
				if ((this._IdExplotacion != value))
				{
					if (this._Explotacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdExplotacionChanging(value);
					this.SendPropertyChanging();
					this._IdExplotacion = value;
					this.SendPropertyChanged("IdExplotacion");
					this.OnIdExplotacionChanged();
				}
			}
		}
		
		[Column(Storage="_IdClasificacion", DbType="Int")]
		public System.Nullable<int> IdClasificacion
		{
			get
			{
				return this._IdClasificacion;
			}
			set
			{
				if ((this._IdClasificacion != value))
				{
					if (this._TipoCompra.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdClasificacionChanging(value);
					this.SendPropertyChanging();
					this._IdClasificacion = value;
					this.SendPropertyChanged("IdClasificacion");
					this.OnIdClasificacionChanged();
				}
			}
		}
		
		[Column(Storage="_IdTipo", DbType="Int NOT NULL")]
		public int IdTipo
		{
			get
			{
				return this._IdTipo;
			}
			set
			{
				if ((this._IdTipo != value))
				{
					if (this._TipoProducto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTipoChanging(value);
					this.SendPropertyChanging();
					this._IdTipo = value;
					this.SendPropertyChanged("IdTipo");
					this.OnIdTipoChanged();
				}
			}
		}
		
		[Column(Storage="_IdProducto", DbType="Int")]
		public System.Nullable<int> IdProducto
		{
			get
			{
				return this._IdProducto;
			}
			set
			{
				if ((this._IdProducto != value))
				{
					if (this._Producto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdProductoChanging(value);
					this.SendPropertyChanging();
					this._IdProducto = value;
					this.SendPropertyChanged("IdProducto");
					this.OnIdProductoChanged();
				}
			}
		}
		
		[Column(Storage="_IdMacho", DbType="Int")]
		public System.Nullable<int> IdMacho
		{
			get
			{
				return this._IdMacho;
			}
			set
			{
				if ((this._IdMacho != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdMachoChanging(value);
					this.SendPropertyChanging();
					this._IdMacho = value;
					this.SendPropertyChanged("IdMacho");
					this.OnIdMachoChanged();
				}
			}
		}
		
		[Column(Storage="_IdProveedor", DbType="Int")]
		public System.Nullable<int> IdProveedor
		{
			get
			{
				return this._IdProveedor;
			}
			set
			{
				if ((this._IdProveedor != value))
				{
					if (this._Proveedor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdProveedorChanging(value);
					this.SendPropertyChanging();
					this._IdProveedor = value;
					this.SendPropertyChanged("IdProveedor");
					this.OnIdProveedorChanged();
				}
			}
		}
		
		[Column(Storage="_Concepto", DbType="VarChar(255)")]
		public string Concepto
		{
			get
			{
				return this._Concepto;
			}
			set
			{
				if ((this._Concepto != value))
				{
					this.OnConceptoChanging(value);
					this.SendPropertyChanging();
					this._Concepto = value;
					this.SendPropertyChanged("Concepto");
					this.OnConceptoChanged();
				}
			}
		}
		
		[Column(Storage="_Cantidad", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> Cantidad
		{
			get
			{
				return this._Cantidad;
			}
			set
			{
				if ((this._Cantidad != value))
				{
					this.OnCantidadChanging(value);
					this.SendPropertyChanging();
					this._Cantidad = value;
					this.SendPropertyChanged("Cantidad");
					this.OnCantidadChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Column(Storage="_Importe", DbType="Decimal(10,2) NOT NULL")]
		public decimal Importe
		{
			get
			{
				return this._Importe;
			}
			set
			{
				if ((this._Importe != value))
				{
					this.OnImporteChanging(value);
					this.SendPropertyChanging();
					this._Importe = value;
					this.SendPropertyChanged("Importe");
					this.OnImporteChanged();
				}
			}
		}
		
		[Column(Storage="_Pagada", DbType="Bit NOT NULL")]
		public bool Pagada
		{
			get
			{
				return this._Pagada;
			}
			set
			{
				if ((this._Pagada != value))
				{
					this.OnPagadaChanging(value);
					this.SendPropertyChanging();
					this._Pagada = value;
					this.SendPropertyChanged("Pagada");
					this.OnPagadaChanged();
				}
			}
		}
		
		[Association(Name="Explotacion_Compra", Storage="_Explotacion", ThisKey="IdExplotacion", OtherKey="Id", IsForeignKey=true)]
		public Explotacion Explotacion
		{
			get
			{
				return this._Explotacion.Entity;
			}
			set
			{
				Explotacion previousValue = this._Explotacion.Entity;
				if (((previousValue != value) 
							|| (this._Explotacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Explotacion.Entity = null;
						previousValue.Compra.Remove(this);
					}
					this._Explotacion.Entity = value;
					if ((value != null))
					{
						value.Compra.Add(this);
						this._IdExplotacion = value.Id;
					}
					else
					{
						this._IdExplotacion = default(int);
					}
					this.SendPropertyChanged("Explotacion");
				}
			}
		}
		
		[Association(Name="Producto_Compra", Storage="_Producto", ThisKey="IdProducto", OtherKey="Id", IsForeignKey=true)]
		public Producto Producto
		{
			get
			{
				return this._Producto.Entity;
			}
			set
			{
				Producto previousValue = this._Producto.Entity;
				if (((previousValue != value) 
							|| (this._Producto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Producto.Entity = null;
						previousValue.Compra.Remove(this);
					}
					this._Producto.Entity = value;
					if ((value != null))
					{
						value.Compra.Add(this);
						this._IdProducto = value.Id;
					}
					else
					{
						this._IdProducto = default(Nullable<int>);
					}
					this.SendPropertyChanged("Producto");
				}
			}
		}
		
		[Association(Name="Proveedor_Compra", Storage="_Proveedor", ThisKey="IdProveedor", OtherKey="Id", IsForeignKey=true)]
		public Proveedor Proveedor
		{
			get
			{
				return this._Proveedor.Entity;
			}
			set
			{
				Proveedor previousValue = this._Proveedor.Entity;
				if (((previousValue != value) 
							|| (this._Proveedor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Proveedor.Entity = null;
						previousValue.Compra.Remove(this);
					}
					this._Proveedor.Entity = value;
					if ((value != null))
					{
						value.Compra.Add(this);
						this._IdProveedor = value.Id;
					}
					else
					{
						this._IdProveedor = default(Nullable<int>);
					}
					this.SendPropertyChanged("Proveedor");
				}
			}
		}
		
		[Association(Name="TipoCompra_Compra", Storage="_TipoCompra", ThisKey="IdClasificacion", OtherKey="Id", IsForeignKey=true)]
		public TipoCompra TipoCompra
		{
			get
			{
				return this._TipoCompra.Entity;
			}
			set
			{
				TipoCompra previousValue = this._TipoCompra.Entity;
				if (((previousValue != value) 
							|| (this._TipoCompra.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoCompra.Entity = null;
						previousValue.Compra.Remove(this);
					}
					this._TipoCompra.Entity = value;
					if ((value != null))
					{
						value.Compra.Add(this);
						this._IdClasificacion = value.Id;
					}
					else
					{
						this._IdClasificacion = default(Nullable<int>);
					}
					this.SendPropertyChanged("TipoCompra");
				}
			}
		}
		
		[Association(Name="TipoProducto_Compra", Storage="_TipoProducto", ThisKey="IdTipo", OtherKey="Id", IsForeignKey=true)]
		public TipoProducto TipoProducto
		{
			get
			{
				return this._TipoProducto.Entity;
			}
			set
			{
				TipoProducto previousValue = this._TipoProducto.Entity;
				if (((previousValue != value) 
							|| (this._TipoProducto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoProducto.Entity = null;
						previousValue.Compra.Remove(this);
					}
					this._TipoProducto.Entity = value;
					if ((value != null))
					{
						value.Compra.Add(this);
						this._IdTipo = value.Id;
					}
					else
					{
						this._IdTipo = default(int);
					}
					this.SendPropertyChanged("TipoProducto");
				}
			}
		}
		
		[Association(Name="Animal_Compra", Storage="_Animal", ThisKey="IdMacho", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.Compra.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.Compra.Add(this);
						this._IdMacho = value.Id;
					}
					else
					{
						this._IdMacho = default(Nullable<int>);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Movimiento")]
	public partial class Movimiento : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdExplotacion;
		
		private int _IdProducto;
		
		private System.Nullable<int> _IdMacho;
		
		private string _Origen;
		
		private string _Identificacion;
		
		private System.DateTime _Fecha;
		
		private System.Nullable<System.DateTime> _FechaEfecto;
		
		private decimal _Cantidad;
		
		private System.Nullable<decimal> _Precio;
		
		private EntityRef<Explotacion> _Explotacion;
		
		private EntityRef<Producto> _Producto;
		
		private EntityRef<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdExplotacionChanging(int value);
    partial void OnIdExplotacionChanged();
    partial void OnIdProductoChanging(int value);
    partial void OnIdProductoChanged();
    partial void OnIdMachoChanging(System.Nullable<int> value);
    partial void OnIdMachoChanged();
    partial void OnOrigenChanging(string value);
    partial void OnOrigenChanged();
    partial void OnIdentificacionChanging(string value);
    partial void OnIdentificacionChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    partial void OnFechaEfectoChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaEfectoChanged();
    partial void OnCantidadChanging(decimal value);
    partial void OnCantidadChanged();
    partial void OnPrecioChanging(System.Nullable<decimal> value);
    partial void OnPrecioChanged();
    #endregion
		
		public Movimiento()
		{
			this._Explotacion = default(EntityRef<Explotacion>);
			this._Producto = default(EntityRef<Producto>);
			this._Animal = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdExplotacion", DbType="Int NOT NULL")]
		public int IdExplotacion
		{
			get
			{
				return this._IdExplotacion;
			}
			set
			{
				if ((this._IdExplotacion != value))
				{
					if (this._Explotacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdExplotacionChanging(value);
					this.SendPropertyChanging();
					this._IdExplotacion = value;
					this.SendPropertyChanged("IdExplotacion");
					this.OnIdExplotacionChanged();
				}
			}
		}
		
		[Column(Storage="_IdProducto", DbType="Int NOT NULL")]
		public int IdProducto
		{
			get
			{
				return this._IdProducto;
			}
			set
			{
				if ((this._IdProducto != value))
				{
					if (this._Producto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdProductoChanging(value);
					this.SendPropertyChanging();
					this._IdProducto = value;
					this.SendPropertyChanged("IdProducto");
					this.OnIdProductoChanged();
				}
			}
		}
		
		[Column(Storage="_IdMacho", DbType="Int")]
		public System.Nullable<int> IdMacho
		{
			get
			{
				return this._IdMacho;
			}
			set
			{
				if ((this._IdMacho != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdMachoChanging(value);
					this.SendPropertyChanging();
					this._IdMacho = value;
					this.SendPropertyChanged("IdMacho");
					this.OnIdMachoChanged();
				}
			}
		}
		
		[Column(Storage="_Origen", DbType="VarChar(20)")]
		public string Origen
		{
			get
			{
				return this._Origen;
			}
			set
			{
				if ((this._Origen != value))
				{
					this.OnOrigenChanging(value);
					this.SendPropertyChanging();
					this._Origen = value;
					this.SendPropertyChanged("Origen");
					this.OnOrigenChanged();
				}
			}
		}
		
		[Column(Storage="_Identificacion", DbType="VarChar(20)")]
		public string Identificacion
		{
			get
			{
				return this._Identificacion;
			}
			set
			{
				if ((this._Identificacion != value))
				{
					this.OnIdentificacionChanging(value);
					this.SendPropertyChanging();
					this._Identificacion = value;
					this.SendPropertyChanged("Identificacion");
					this.OnIdentificacionChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Column(Storage="_FechaEfecto", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaEfecto
		{
			get
			{
				return this._FechaEfecto;
			}
			set
			{
				if ((this._FechaEfecto != value))
				{
					this.OnFechaEfectoChanging(value);
					this.SendPropertyChanging();
					this._FechaEfecto = value;
					this.SendPropertyChanged("FechaEfecto");
					this.OnFechaEfectoChanged();
				}
			}
		}
		
		[Column(Storage="_Cantidad", DbType="Decimal(10,2) NOT NULL")]
		public decimal Cantidad
		{
			get
			{
				return this._Cantidad;
			}
			set
			{
				if ((this._Cantidad != value))
				{
					this.OnCantidadChanging(value);
					this.SendPropertyChanging();
					this._Cantidad = value;
					this.SendPropertyChanged("Cantidad");
					this.OnCantidadChanged();
				}
			}
		}
		
		[Column(Storage="_Precio", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> Precio
		{
			get
			{
				return this._Precio;
			}
			set
			{
				if ((this._Precio != value))
				{
					this.OnPrecioChanging(value);
					this.SendPropertyChanging();
					this._Precio = value;
					this.SendPropertyChanged("Precio");
					this.OnPrecioChanged();
				}
			}
		}
		
		[Association(Name="Explotacion_Movimiento", Storage="_Explotacion", ThisKey="IdExplotacion", OtherKey="Id", IsForeignKey=true)]
		public Explotacion Explotacion
		{
			get
			{
				return this._Explotacion.Entity;
			}
			set
			{
				Explotacion previousValue = this._Explotacion.Entity;
				if (((previousValue != value) 
							|| (this._Explotacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Explotacion.Entity = null;
						previousValue.Movimiento.Remove(this);
					}
					this._Explotacion.Entity = value;
					if ((value != null))
					{
						value.Movimiento.Add(this);
						this._IdExplotacion = value.Id;
					}
					else
					{
						this._IdExplotacion = default(int);
					}
					this.SendPropertyChanged("Explotacion");
				}
			}
		}
		
		[Association(Name="Producto_Movimiento", Storage="_Producto", ThisKey="IdProducto", OtherKey="Id", IsForeignKey=true)]
		public Producto Producto
		{
			get
			{
				return this._Producto.Entity;
			}
			set
			{
				Producto previousValue = this._Producto.Entity;
				if (((previousValue != value) 
							|| (this._Producto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Producto.Entity = null;
						previousValue.Movimiento.Remove(this);
					}
					this._Producto.Entity = value;
					if ((value != null))
					{
						value.Movimiento.Add(this);
						this._IdProducto = value.Id;
					}
					else
					{
						this._IdProducto = default(int);
					}
					this.SendPropertyChanged("Producto");
				}
			}
		}
		
		[Association(Name="Animal_Movimiento", Storage="_Animal", ThisKey="IdMacho", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.Movimiento.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.Movimiento.Add(this);
						this._IdMacho = value.Id;
					}
					else
					{
						this._IdMacho = default(Nullable<int>);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Stock")]
	public partial class Stock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdExplotacion;
		
		private int _IdProducto;
		
		private System.Nullable<int> _IdMacho;
		
		private decimal _Cantidad;
		
		private decimal _Precio;
		
		private EntityRef<Explotacion> _Explotacion;
		
		private EntityRef<Producto> _Producto;
		
		private EntityRef<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdExplotacionChanging(int value);
    partial void OnIdExplotacionChanged();
    partial void OnIdProductoChanging(int value);
    partial void OnIdProductoChanged();
    partial void OnIdMachoChanging(System.Nullable<int> value);
    partial void OnIdMachoChanged();
    partial void OnCantidadChanging(decimal value);
    partial void OnCantidadChanged();
    partial void OnPrecioChanging(decimal value);
    partial void OnPrecioChanged();
    #endregion
		
		public Stock()
		{
			this._Explotacion = default(EntityRef<Explotacion>);
			this._Producto = default(EntityRef<Producto>);
			this._Animal = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdExplotacion", DbType="Int NOT NULL")]
		public int IdExplotacion
		{
			get
			{
				return this._IdExplotacion;
			}
			set
			{
				if ((this._IdExplotacion != value))
				{
					if (this._Explotacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdExplotacionChanging(value);
					this.SendPropertyChanging();
					this._IdExplotacion = value;
					this.SendPropertyChanged("IdExplotacion");
					this.OnIdExplotacionChanged();
				}
			}
		}
		
		[Column(Storage="_IdProducto", DbType="Int NOT NULL")]
		public int IdProducto
		{
			get
			{
				return this._IdProducto;
			}
			set
			{
				if ((this._IdProducto != value))
				{
					if (this._Producto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdProductoChanging(value);
					this.SendPropertyChanging();
					this._IdProducto = value;
					this.SendPropertyChanged("IdProducto");
					this.OnIdProductoChanged();
				}
			}
		}
		
		[Column(Storage="_IdMacho", DbType="Int")]
		public System.Nullable<int> IdMacho
		{
			get
			{
				return this._IdMacho;
			}
			set
			{
				if ((this._IdMacho != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdMachoChanging(value);
					this.SendPropertyChanging();
					this._IdMacho = value;
					this.SendPropertyChanged("IdMacho");
					this.OnIdMachoChanged();
				}
			}
		}
		
		[Column(Storage="_Cantidad", DbType="Decimal(10,2) NOT NULL")]
		public decimal Cantidad
		{
			get
			{
				return this._Cantidad;
			}
			set
			{
				if ((this._Cantidad != value))
				{
					this.OnCantidadChanging(value);
					this.SendPropertyChanging();
					this._Cantidad = value;
					this.SendPropertyChanged("Cantidad");
					this.OnCantidadChanged();
				}
			}
		}
		
		[Column(Storage="_Precio", DbType="Decimal(10,2) NOT NULL")]
		public decimal Precio
		{
			get
			{
				return this._Precio;
			}
			set
			{
				if ((this._Precio != value))
				{
					this.OnPrecioChanging(value);
					this.SendPropertyChanging();
					this._Precio = value;
					this.SendPropertyChanged("Precio");
					this.OnPrecioChanged();
				}
			}
		}
		
		[Association(Name="Explotacion_Stock", Storage="_Explotacion", ThisKey="IdExplotacion", OtherKey="Id", IsForeignKey=true)]
		public Explotacion Explotacion
		{
			get
			{
				return this._Explotacion.Entity;
			}
			set
			{
				Explotacion previousValue = this._Explotacion.Entity;
				if (((previousValue != value) 
							|| (this._Explotacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Explotacion.Entity = null;
						previousValue.Stock.Remove(this);
					}
					this._Explotacion.Entity = value;
					if ((value != null))
					{
						value.Stock.Add(this);
						this._IdExplotacion = value.Id;
					}
					else
					{
						this._IdExplotacion = default(int);
					}
					this.SendPropertyChanged("Explotacion");
				}
			}
		}
		
		[Association(Name="Producto_Stock", Storage="_Producto", ThisKey="IdProducto", OtherKey="Id", IsForeignKey=true)]
		public Producto Producto
		{
			get
			{
				return this._Producto.Entity;
			}
			set
			{
				Producto previousValue = this._Producto.Entity;
				if (((previousValue != value) 
							|| (this._Producto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Producto.Entity = null;
						previousValue.Stock.Remove(this);
					}
					this._Producto.Entity = value;
					if ((value != null))
					{
						value.Stock.Add(this);
						this._IdProducto = value.Id;
					}
					else
					{
						this._IdProducto = default(int);
					}
					this.SendPropertyChanged("Producto");
				}
			}
		}
		
		[Association(Name="Animal_Stock", Storage="_Animal", ThisKey="IdMacho", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.Stock.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.Stock.Add(this);
						this._IdMacho = value.Id;
					}
					else
					{
						this._IdMacho = default(Nullable<int>);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Animal")]
	public partial class Animal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdExplotacion;
		
		private int _IdRaza;
		
		private System.Nullable<int> _IdEstado;
		
		private System.Nullable<int> _IdTalla;
		
		private System.Nullable<int> _IdConformacion;
		
		private System.Nullable<int> _IdFotografia;
		
		private string _DIB;
		
		private string _Crotal;
		
		private string _Tatuaje;
		
		private string _Genotipo;
		
		private string _RegistroGenealogico;
		
		private string _Nombre;
		
		private System.DateTime _FechaNacimiento;
		
		private System.Nullable<System.DateTime> _FechaDestete;
		
		private char _Sexo;
		
		private System.Nullable<int> _Morfologia;
		
		private System.Nullable<bool> _Testaje;
		
		private System.Nullable<bool> _AptoNovillas;
		
		private System.Nullable<bool> _Externo;
		
		private System.Nullable<bool> _Identificado;
		
		private bool _Modificable;
		
		private EntitySet<AniLot> _AniLot;
		
		private EntitySet<EngrasamientoCanal> _EngrasamientoCanal;
		
		private EntitySet<LibroGenealogico> _LibroGenealogico;
		
		private EntitySet<Peso> _Peso;
		
		private EntitySet<RendimientoCanal> _RendimientoCanal;
		
		private EntitySet<Secado> _Secado;
		
		private EntitySet<TipificacionCanal> _TipificacionCanal;
		
		private EntitySet<Asignacion> _Asignacion;
		
		private EntitySet<Analisis> _Analisis;
		
		private EntitySet<Resena> _Resena;
		
		private EntitySet<AniPro> _AniPro;
		
		private EntitySet<Gasto> _Gasto;
		
		private EntitySet<Celo> _Celo;
		
		private EntitySet<SincronizacionCelo> _SincronizacionCelo;
		
		private EntitySet<Lactacion> _Lactacion;
		
		private EntitySet<Inseminacion> _Inseminacion;
		
		private EntitySet<Inseminacion> _Inseminacion1;
		
		private EntitySet<Inseminacion> _Inseminacion2;
		
		private EntitySet<DiagInseminacion> _DiagInseminacion;
		
		private EntitySet<Estancia> _Estancia;
		
		private EntitySet<Aborto> _Aborto;
		
		private EntitySet<Parto> _Parto;
		
		private EntitySet<DiagAnimal> _DiagAnimal;
		
		private EntitySet<CondicionCorporal> _CondicionCorporal;
		
		private EntitySet<Compra> _Compra;
		
		private EntitySet<Movimiento> _Movimiento;
		
		private EntitySet<Stock> _Stock;
		
		private EntitySet<Baja> _Baja;
		
		private EntitySet<Alta> _Alta;
		
		private EntityRef<Conformacion> _Conformacion;
		
		private EntityRef<Estado> _Estado;
		
		private EntityRef<Explotacion> _Explotacion;
		
		private EntityRef<Fotografia> _Fotografia;
		
		private EntityRef<Raza> _Raza;
		
		private EntityRef<Talla> _Talla;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdExplotacionChanging(int value);
    partial void OnIdExplotacionChanged();
    partial void OnIdRazaChanging(int value);
    partial void OnIdRazaChanged();
    partial void OnIdEstadoChanging(System.Nullable<int> value);
    partial void OnIdEstadoChanged();
    partial void OnIdTallaChanging(System.Nullable<int> value);
    partial void OnIdTallaChanged();
    partial void OnIdConformacionChanging(System.Nullable<int> value);
    partial void OnIdConformacionChanged();
    partial void OnIdFotografiaChanging(System.Nullable<int> value);
    partial void OnIdFotografiaChanged();
    partial void OnDIBChanging(string value);
    partial void OnDIBChanged();
    partial void OnCrotalChanging(string value);
    partial void OnCrotalChanged();
    partial void OnTatuajeChanging(string value);
    partial void OnTatuajeChanged();
    partial void OnGenotipoChanging(string value);
    partial void OnGenotipoChanged();
    partial void OnRegistroGenealogicoChanging(string value);
    partial void OnRegistroGenealogicoChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnFechaNacimientoChanging(System.DateTime value);
    partial void OnFechaNacimientoChanged();
    partial void OnFechaDesteteChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaDesteteChanged();
    partial void OnSexoChanging(char value);
    partial void OnSexoChanged();
    partial void OnMorfologiaChanging(System.Nullable<int> value);
    partial void OnMorfologiaChanged();
    partial void OnTestajeChanging(System.Nullable<bool> value);
    partial void OnTestajeChanged();
    partial void OnAptoNovillasChanging(System.Nullable<bool> value);
    partial void OnAptoNovillasChanged();
    partial void OnExternoChanging(System.Nullable<bool> value);
    partial void OnExternoChanged();
    partial void OnIdentificadoChanging(System.Nullable<bool> value);
    partial void OnIdentificadoChanged();
    partial void OnModificableChanging(bool value);
    partial void OnModificableChanged();
    #endregion
		
		public Animal()
		{
			this._AniLot = new EntitySet<AniLot>(new Action<AniLot>(this.attach_AniLot), new Action<AniLot>(this.detach_AniLot));
			this._EngrasamientoCanal = new EntitySet<EngrasamientoCanal>(new Action<EngrasamientoCanal>(this.attach_EngrasamientoCanal), new Action<EngrasamientoCanal>(this.detach_EngrasamientoCanal));
			this._LibroGenealogico = new EntitySet<LibroGenealogico>(new Action<LibroGenealogico>(this.attach_LibroGenealogico), new Action<LibroGenealogico>(this.detach_LibroGenealogico));
			this._Peso = new EntitySet<Peso>(new Action<Peso>(this.attach_Peso), new Action<Peso>(this.detach_Peso));
			this._RendimientoCanal = new EntitySet<RendimientoCanal>(new Action<RendimientoCanal>(this.attach_RendimientoCanal), new Action<RendimientoCanal>(this.detach_RendimientoCanal));
			this._Secado = new EntitySet<Secado>(new Action<Secado>(this.attach_Secado), new Action<Secado>(this.detach_Secado));
			this._TipificacionCanal = new EntitySet<TipificacionCanal>(new Action<TipificacionCanal>(this.attach_TipificacionCanal), new Action<TipificacionCanal>(this.detach_TipificacionCanal));
			this._Asignacion = new EntitySet<Asignacion>(new Action<Asignacion>(this.attach_Asignacion), new Action<Asignacion>(this.detach_Asignacion));
			this._Analisis = new EntitySet<Analisis>(new Action<Analisis>(this.attach_Analisis), new Action<Analisis>(this.detach_Analisis));
			this._Resena = new EntitySet<Resena>(new Action<Resena>(this.attach_Resena), new Action<Resena>(this.detach_Resena));
			this._AniPro = new EntitySet<AniPro>(new Action<AniPro>(this.attach_AniPro), new Action<AniPro>(this.detach_AniPro));
			this._Gasto = new EntitySet<Gasto>(new Action<Gasto>(this.attach_Gasto), new Action<Gasto>(this.detach_Gasto));
			this._Celo = new EntitySet<Celo>(new Action<Celo>(this.attach_Celo), new Action<Celo>(this.detach_Celo));
			this._SincronizacionCelo = new EntitySet<SincronizacionCelo>(new Action<SincronizacionCelo>(this.attach_SincronizacionCelo), new Action<SincronizacionCelo>(this.detach_SincronizacionCelo));
			this._Lactacion = new EntitySet<Lactacion>(new Action<Lactacion>(this.attach_Lactacion), new Action<Lactacion>(this.detach_Lactacion));
			this._Inseminacion = new EntitySet<Inseminacion>(new Action<Inseminacion>(this.attach_Inseminacion), new Action<Inseminacion>(this.detach_Inseminacion));
			this._Inseminacion1 = new EntitySet<Inseminacion>(new Action<Inseminacion>(this.attach_Inseminacion1), new Action<Inseminacion>(this.detach_Inseminacion1));
			this._Inseminacion2 = new EntitySet<Inseminacion>(new Action<Inseminacion>(this.attach_Inseminacion2), new Action<Inseminacion>(this.detach_Inseminacion2));
			this._DiagInseminacion = new EntitySet<DiagInseminacion>(new Action<DiagInseminacion>(this.attach_DiagInseminacion), new Action<DiagInseminacion>(this.detach_DiagInseminacion));
			this._Estancia = new EntitySet<Estancia>(new Action<Estancia>(this.attach_Estancia), new Action<Estancia>(this.detach_Estancia));
			this._Aborto = new EntitySet<Aborto>(new Action<Aborto>(this.attach_Aborto), new Action<Aborto>(this.detach_Aborto));
			this._Parto = new EntitySet<Parto>(new Action<Parto>(this.attach_Parto), new Action<Parto>(this.detach_Parto));
			this._DiagAnimal = new EntitySet<DiagAnimal>(new Action<DiagAnimal>(this.attach_DiagAnimal), new Action<DiagAnimal>(this.detach_DiagAnimal));
			this._CondicionCorporal = new EntitySet<CondicionCorporal>(new Action<CondicionCorporal>(this.attach_CondicionCorporal), new Action<CondicionCorporal>(this.detach_CondicionCorporal));
			this._Compra = new EntitySet<Compra>(new Action<Compra>(this.attach_Compra), new Action<Compra>(this.detach_Compra));
			this._Movimiento = new EntitySet<Movimiento>(new Action<Movimiento>(this.attach_Movimiento), new Action<Movimiento>(this.detach_Movimiento));
			this._Stock = new EntitySet<Stock>(new Action<Stock>(this.attach_Stock), new Action<Stock>(this.detach_Stock));
			this._Baja = new EntitySet<Baja>(new Action<Baja>(this.attach_Baja), new Action<Baja>(this.detach_Baja));
			this._Alta = new EntitySet<Alta>(new Action<Alta>(this.attach_Alta), new Action<Alta>(this.detach_Alta));
			this._Conformacion = default(EntityRef<Conformacion>);
			this._Estado = default(EntityRef<Estado>);
			this._Explotacion = default(EntityRef<Explotacion>);
			this._Fotografia = default(EntityRef<Fotografia>);
			this._Raza = default(EntityRef<Raza>);
			this._Talla = default(EntityRef<Talla>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdExplotacion", DbType="Int NOT NULL")]
		public int IdExplotacion
		{
			get
			{
				return this._IdExplotacion;
			}
			set
			{
				if ((this._IdExplotacion != value))
				{
					if (this._Explotacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdExplotacionChanging(value);
					this.SendPropertyChanging();
					this._IdExplotacion = value;
					this.SendPropertyChanged("IdExplotacion");
					this.OnIdExplotacionChanged();
				}
			}
		}
		
		[Column(Storage="_IdRaza", DbType="Int NOT NULL")]
		public int IdRaza
		{
			get
			{
				return this._IdRaza;
			}
			set
			{
				if ((this._IdRaza != value))
				{
					if (this._Raza.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdRazaChanging(value);
					this.SendPropertyChanging();
					this._IdRaza = value;
					this.SendPropertyChanged("IdRaza");
					this.OnIdRazaChanged();
				}
			}
		}
		
		[Column(Storage="_IdEstado", DbType="Int")]
		public System.Nullable<int> IdEstado
		{
			get
			{
				return this._IdEstado;
			}
			set
			{
				if ((this._IdEstado != value))
				{
					if (this._Estado.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdEstadoChanging(value);
					this.SendPropertyChanging();
					this._IdEstado = value;
					this.SendPropertyChanged("IdEstado");
					this.OnIdEstadoChanged();
				}
			}
		}
		
		[Column(Storage="_IdTalla", DbType="Int")]
		public System.Nullable<int> IdTalla
		{
			get
			{
				return this._IdTalla;
			}
			set
			{
				if ((this._IdTalla != value))
				{
					if (this._Talla.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTallaChanging(value);
					this.SendPropertyChanging();
					this._IdTalla = value;
					this.SendPropertyChanged("IdTalla");
					this.OnIdTallaChanged();
				}
			}
		}
		
		[Column(Storage="_IdConformacion", DbType="Int")]
		public System.Nullable<int> IdConformacion
		{
			get
			{
				return this._IdConformacion;
			}
			set
			{
				if ((this._IdConformacion != value))
				{
					if (this._Conformacion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdConformacionChanging(value);
					this.SendPropertyChanging();
					this._IdConformacion = value;
					this.SendPropertyChanged("IdConformacion");
					this.OnIdConformacionChanged();
				}
			}
		}
		
		[Column(Storage="_IdFotografia", DbType="Int")]
		public System.Nullable<int> IdFotografia
		{
			get
			{
				return this._IdFotografia;
			}
			set
			{
				if ((this._IdFotografia != value))
				{
					if (this._Fotografia.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdFotografiaChanging(value);
					this.SendPropertyChanging();
					this._IdFotografia = value;
					this.SendPropertyChanged("IdFotografia");
					this.OnIdFotografiaChanged();
				}
			}
		}
		
		[Column(Storage="_DIB", DbType="VarChar(14)")]
		public string DIB
		{
			get
			{
				return this._DIB;
			}
			set
			{
				if ((this._DIB != value))
				{
					this.OnDIBChanging(value);
					this.SendPropertyChanging();
					this._DIB = value;
					this.SendPropertyChanged("DIB");
					this.OnDIBChanged();
				}
			}
		}
		
		[Column(Storage="_Crotal", DbType="VarChar(12)")]
		public string Crotal
		{
			get
			{
				return this._Crotal;
			}
			set
			{
				if ((this._Crotal != value))
				{
					this.OnCrotalChanging(value);
					this.SendPropertyChanging();
					this._Crotal = value;
					this.SendPropertyChanged("Crotal");
					this.OnCrotalChanged();
				}
			}
		}
		
		[Column(Storage="_Tatuaje", DbType="VarChar(8)")]
		public string Tatuaje
		{
			get
			{
				return this._Tatuaje;
			}
			set
			{
				if ((this._Tatuaje != value))
				{
					this.OnTatuajeChanging(value);
					this.SendPropertyChanging();
					this._Tatuaje = value;
					this.SendPropertyChanged("Tatuaje");
					this.OnTatuajeChanged();
				}
			}
		}
		
		[Column(Storage="_Genotipo", DbType="VarChar(7)")]
		public string Genotipo
		{
			get
			{
				return this._Genotipo;
			}
			set
			{
				if ((this._Genotipo != value))
				{
					this.OnGenotipoChanging(value);
					this.SendPropertyChanging();
					this._Genotipo = value;
					this.SendPropertyChanged("Genotipo");
					this.OnGenotipoChanged();
				}
			}
		}
		
		[Column(Storage="_RegistroGenealogico", DbType="VarChar(14)")]
		public string RegistroGenealogico
		{
			get
			{
				return this._RegistroGenealogico;
			}
			set
			{
				if ((this._RegistroGenealogico != value))
				{
					this.OnRegistroGenealogicoChanging(value);
					this.SendPropertyChanging();
					this._RegistroGenealogico = value;
					this.SendPropertyChanged("RegistroGenealogico");
					this.OnRegistroGenealogicoChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Column(Storage="_FechaNacimiento", DbType="DateTime NOT NULL")]
		public System.DateTime FechaNacimiento
		{
			get
			{
				return this._FechaNacimiento;
			}
			set
			{
				if ((this._FechaNacimiento != value))
				{
					this.OnFechaNacimientoChanging(value);
					this.SendPropertyChanging();
					this._FechaNacimiento = value;
					this.SendPropertyChanged("FechaNacimiento");
					this.OnFechaNacimientoChanged();
				}
			}
		}
		
		[Column(Storage="_FechaDestete", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaDestete
		{
			get
			{
				return this._FechaDestete;
			}
			set
			{
				if ((this._FechaDestete != value))
				{
					this.OnFechaDesteteChanging(value);
					this.SendPropertyChanging();
					this._FechaDestete = value;
					this.SendPropertyChanged("FechaDestete");
					this.OnFechaDesteteChanged();
				}
			}
		}
		
		[Column(Storage="_Sexo", DbType="VarChar(1) NOT NULL")]
		public char Sexo
		{
			get
			{
				return this._Sexo;
			}
			set
			{
				if ((this._Sexo != value))
				{
					this.OnSexoChanging(value);
					this.SendPropertyChanging();
					this._Sexo = value;
					this.SendPropertyChanged("Sexo");
					this.OnSexoChanged();
				}
			}
		}
		
		[Column(Storage="_Morfologia", DbType="Int")]
		public System.Nullable<int> Morfologia
		{
			get
			{
				return this._Morfologia;
			}
			set
			{
				if ((this._Morfologia != value))
				{
					this.OnMorfologiaChanging(value);
					this.SendPropertyChanging();
					this._Morfologia = value;
					this.SendPropertyChanged("Morfologia");
					this.OnMorfologiaChanged();
				}
			}
		}
		
		[Column(Storage="_Testaje", DbType="Bit")]
		public System.Nullable<bool> Testaje
		{
			get
			{
				return this._Testaje;
			}
			set
			{
				if ((this._Testaje != value))
				{
					this.OnTestajeChanging(value);
					this.SendPropertyChanging();
					this._Testaje = value;
					this.SendPropertyChanged("Testaje");
					this.OnTestajeChanged();
				}
			}
		}
		
		[Column(Storage="_AptoNovillas", DbType="Bit")]
		public System.Nullable<bool> AptoNovillas
		{
			get
			{
				return this._AptoNovillas;
			}
			set
			{
				if ((this._AptoNovillas != value))
				{
					this.OnAptoNovillasChanging(value);
					this.SendPropertyChanging();
					this._AptoNovillas = value;
					this.SendPropertyChanged("AptoNovillas");
					this.OnAptoNovillasChanged();
				}
			}
		}
		
		[Column(Storage="_Externo", DbType="Bit")]
		public System.Nullable<bool> Externo
		{
			get
			{
				return this._Externo;
			}
			set
			{
				if ((this._Externo != value))
				{
					this.OnExternoChanging(value);
					this.SendPropertyChanging();
					this._Externo = value;
					this.SendPropertyChanged("Externo");
					this.OnExternoChanged();
				}
			}
		}
		
		[Column(Storage="_Identificado", DbType="Bit")]
		public System.Nullable<bool> Identificado
		{
			get
			{
				return this._Identificado;
			}
			set
			{
				if ((this._Identificado != value))
				{
					this.OnIdentificadoChanging(value);
					this.SendPropertyChanging();
					this._Identificado = value;
					this.SendPropertyChanged("Identificado");
					this.OnIdentificadoChanged();
				}
			}
		}
		
		[Column(Storage="_Modificable", DbType="Bit NOT NULL")]
		public bool Modificable
		{
			get
			{
				return this._Modificable;
			}
			set
			{
				if ((this._Modificable != value))
				{
					this.OnModificableChanging(value);
					this.SendPropertyChanging();
					this._Modificable = value;
					this.SendPropertyChanged("Modificable");
					this.OnModificableChanged();
				}
			}
		}
		
		[Association(Name="Animal_AniLot", Storage="_AniLot", ThisKey="Id", OtherKey="IdAnimal")]
		public EntitySet<AniLot> AniLot
		{
			get
			{
				return this._AniLot;
			}
			set
			{
				this._AniLot.Assign(value);
			}
		}
		
		[Association(Name="Animal_EngrasamientoCanal", Storage="_EngrasamientoCanal", ThisKey="Id", OtherKey="IdAnimal")]
		public EntitySet<EngrasamientoCanal> EngrasamientoCanal
		{
			get
			{
				return this._EngrasamientoCanal;
			}
			set
			{
				this._EngrasamientoCanal.Assign(value);
			}
		}
		
		[Association(Name="Animal_LibroGenealogico", Storage="_LibroGenealogico", ThisKey="Id", OtherKey="IdAnimal")]
		public EntitySet<LibroGenealogico> LibroGenealogico
		{
			get
			{
				return this._LibroGenealogico;
			}
			set
			{
				this._LibroGenealogico.Assign(value);
			}
		}
		
		[Association(Name="Animal_Peso", Storage="_Peso", ThisKey="Id", OtherKey="IdAnimal")]
		public EntitySet<Peso> Peso
		{
			get
			{
				return this._Peso;
			}
			set
			{
				this._Peso.Assign(value);
			}
		}
		
		[Association(Name="Animal_RendimientoCanal", Storage="_RendimientoCanal", ThisKey="Id", OtherKey="IdAnimal")]
		public EntitySet<RendimientoCanal> RendimientoCanal
		{
			get
			{
				return this._RendimientoCanal;
			}
			set
			{
				this._RendimientoCanal.Assign(value);
			}
		}
		
		[Association(Name="Animal_Secado", Storage="_Secado", ThisKey="Id", OtherKey="IdHembra")]
		public EntitySet<Secado> Secado
		{
			get
			{
				return this._Secado;
			}
			set
			{
				this._Secado.Assign(value);
			}
		}
		
		[Association(Name="Animal_TipificacionCanal", Storage="_TipificacionCanal", ThisKey="Id", OtherKey="IdAnimal")]
		public EntitySet<TipificacionCanal> TipificacionCanal
		{
			get
			{
				return this._TipificacionCanal;
			}
			set
			{
				this._TipificacionCanal.Assign(value);
			}
		}
		
		[Association(Name="Animal_Asignacion", Storage="_Asignacion", ThisKey="Id", OtherKey="IdAnimal")]
		public EntitySet<Asignacion> Asignacion
		{
			get
			{
				return this._Asignacion;
			}
			set
			{
				this._Asignacion.Assign(value);
			}
		}
		
		[Association(Name="Animal_Analisis", Storage="_Analisis", ThisKey="Id", OtherKey="IdAnimal")]
		public EntitySet<Analisis> Analisis
		{
			get
			{
				return this._Analisis;
			}
			set
			{
				this._Analisis.Assign(value);
			}
		}
		
		[Association(Name="Animal_Resena", Storage="_Resena", ThisKey="Id", OtherKey="IdAnimal")]
		public EntitySet<Resena> Resena
		{
			get
			{
				return this._Resena;
			}
			set
			{
				this._Resena.Assign(value);
			}
		}
		
		[Association(Name="Animal_AniPro", Storage="_AniPro", ThisKey="Id", OtherKey="IdAnimal")]
		public EntitySet<AniPro> AniPro
		{
			get
			{
				return this._AniPro;
			}
			set
			{
				this._AniPro.Assign(value);
			}
		}
		
		[Association(Name="Animal_Gasto", Storage="_Gasto", ThisKey="Id", OtherKey="IdAnimal")]
		public EntitySet<Gasto> Gasto
		{
			get
			{
				return this._Gasto;
			}
			set
			{
				this._Gasto.Assign(value);
			}
		}
		
		[Association(Name="Animal_Celo", Storage="_Celo", ThisKey="Id", OtherKey="IdHembra")]
		public EntitySet<Celo> Celo
		{
			get
			{
				return this._Celo;
			}
			set
			{
				this._Celo.Assign(value);
			}
		}
		
		[Association(Name="Animal_SincronizacionCelo", Storage="_SincronizacionCelo", ThisKey="Id", OtherKey="IdHembra")]
		public EntitySet<SincronizacionCelo> SincronizacionCelo
		{
			get
			{
				return this._SincronizacionCelo;
			}
			set
			{
				this._SincronizacionCelo.Assign(value);
			}
		}
		
		[Association(Name="Animal_Lactacion", Storage="_Lactacion", ThisKey="Id", OtherKey="IdHembra")]
		public EntitySet<Lactacion> Lactacion
		{
			get
			{
				return this._Lactacion;
			}
			set
			{
				this._Lactacion.Assign(value);
			}
		}
		
		[Association(Name="Animal_Inseminacion", Storage="_Inseminacion", ThisKey="Id", OtherKey="IdEmbrion")]
		public EntitySet<Inseminacion> Inseminacion
		{
			get
			{
				return this._Inseminacion;
			}
			set
			{
				this._Inseminacion.Assign(value);
			}
		}
		
		[Association(Name="Animal_Inseminacion1", Storage="_Inseminacion1", ThisKey="Id", OtherKey="IdHembra")]
		public EntitySet<Inseminacion> Inseminacion1
		{
			get
			{
				return this._Inseminacion1;
			}
			set
			{
				this._Inseminacion1.Assign(value);
			}
		}
		
		[Association(Name="Animal_Inseminacion2", Storage="_Inseminacion2", ThisKey="Id", OtherKey="IdMacho")]
		public EntitySet<Inseminacion> Inseminacion2
		{
			get
			{
				return this._Inseminacion2;
			}
			set
			{
				this._Inseminacion2.Assign(value);
			}
		}
		
		[Association(Name="Animal_DiagInseminacion", Storage="_DiagInseminacion", ThisKey="Id", OtherKey="IdAnimal")]
		public EntitySet<DiagInseminacion> DiagInseminacion
		{
			get
			{
				return this._DiagInseminacion;
			}
			set
			{
				this._DiagInseminacion.Assign(value);
			}
		}
		
		[Association(Name="Animal_Estancia", Storage="_Estancia", ThisKey="Id", OtherKey="IdMacho")]
		public EntitySet<Estancia> Estancia
		{
			get
			{
				return this._Estancia;
			}
			set
			{
				this._Estancia.Assign(value);
			}
		}
		
		[Association(Name="Animal_Aborto", Storage="_Aborto", ThisKey="Id", OtherKey="IdHembra")]
		public EntitySet<Aborto> Aborto
		{
			get
			{
				return this._Aborto;
			}
			set
			{
				this._Aborto.Assign(value);
			}
		}
		
		[Association(Name="Animal_Parto", Storage="_Parto", ThisKey="Id", OtherKey="IdHembra")]
		public EntitySet<Parto> Parto
		{
			get
			{
				return this._Parto;
			}
			set
			{
				this._Parto.Assign(value);
			}
		}
		
		[Association(Name="Animal_DiagAnimal", Storage="_DiagAnimal", ThisKey="Id", OtherKey="IdAnimal")]
		public EntitySet<DiagAnimal> DiagAnimal
		{
			get
			{
				return this._DiagAnimal;
			}
			set
			{
				this._DiagAnimal.Assign(value);
			}
		}
		
		[Association(Name="Animal_CondicionCorporal", Storage="_CondicionCorporal", ThisKey="Id", OtherKey="IdHembra")]
		public EntitySet<CondicionCorporal> CondicionCorporal
		{
			get
			{
				return this._CondicionCorporal;
			}
			set
			{
				this._CondicionCorporal.Assign(value);
			}
		}
		
		[Association(Name="Animal_Compra", Storage="_Compra", ThisKey="Id", OtherKey="IdMacho")]
		public EntitySet<Compra> Compra
		{
			get
			{
				return this._Compra;
			}
			set
			{
				this._Compra.Assign(value);
			}
		}
		
		[Association(Name="Animal_Movimiento", Storage="_Movimiento", ThisKey="Id", OtherKey="IdMacho")]
		public EntitySet<Movimiento> Movimiento
		{
			get
			{
				return this._Movimiento;
			}
			set
			{
				this._Movimiento.Assign(value);
			}
		}
		
		[Association(Name="Animal_Stock", Storage="_Stock", ThisKey="Id", OtherKey="IdMacho")]
		public EntitySet<Stock> Stock
		{
			get
			{
				return this._Stock;
			}
			set
			{
				this._Stock.Assign(value);
			}
		}
		
		[Association(Name="Animal_Baja", Storage="_Baja", ThisKey="Id", OtherKey="IdAnimal")]
		public EntitySet<Baja> Baja
		{
			get
			{
				return this._Baja;
			}
			set
			{
				this._Baja.Assign(value);
			}
		}
		
		[Association(Name="Animal_Alta", Storage="_Alta", ThisKey="Id", OtherKey="IdAnimal")]
		public EntitySet<Alta> Alta
		{
			get
			{
				return this._Alta;
			}
			set
			{
				this._Alta.Assign(value);
			}
		}
		
		[Association(Name="Conformacion_Animal", Storage="_Conformacion", ThisKey="IdConformacion", OtherKey="Id", IsForeignKey=true)]
		public Conformacion Conformacion
		{
			get
			{
				return this._Conformacion.Entity;
			}
			set
			{
				Conformacion previousValue = this._Conformacion.Entity;
				if (((previousValue != value) 
							|| (this._Conformacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Conformacion.Entity = null;
						previousValue.Animal.Remove(this);
					}
					this._Conformacion.Entity = value;
					if ((value != null))
					{
						value.Animal.Add(this);
						this._IdConformacion = value.Id;
					}
					else
					{
						this._IdConformacion = default(Nullable<int>);
					}
					this.SendPropertyChanged("Conformacion");
				}
			}
		}
		
		[Association(Name="Estado_Animal", Storage="_Estado", ThisKey="IdEstado", OtherKey="Id", IsForeignKey=true)]
		public Estado Estado
		{
			get
			{
				return this._Estado.Entity;
			}
			set
			{
				Estado previousValue = this._Estado.Entity;
				if (((previousValue != value) 
							|| (this._Estado.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Estado.Entity = null;
						previousValue.Animal.Remove(this);
					}
					this._Estado.Entity = value;
					if ((value != null))
					{
						value.Animal.Add(this);
						this._IdEstado = value.Id;
					}
					else
					{
						this._IdEstado = default(Nullable<int>);
					}
					this.SendPropertyChanged("Estado");
				}
			}
		}
		
		[Association(Name="Explotacion_Animal", Storage="_Explotacion", ThisKey="IdExplotacion", OtherKey="Id", IsForeignKey=true)]
		public Explotacion Explotacion
		{
			get
			{
				return this._Explotacion.Entity;
			}
			set
			{
				Explotacion previousValue = this._Explotacion.Entity;
				if (((previousValue != value) 
							|| (this._Explotacion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Explotacion.Entity = null;
						previousValue.Animal.Remove(this);
					}
					this._Explotacion.Entity = value;
					if ((value != null))
					{
						value.Animal.Add(this);
						this._IdExplotacion = value.Id;
					}
					else
					{
						this._IdExplotacion = default(int);
					}
					this.SendPropertyChanged("Explotacion");
				}
			}
		}
		
		[Association(Name="Fotografia_Animal", Storage="_Fotografia", ThisKey="IdFotografia", OtherKey="Id", IsForeignKey=true)]
		public Fotografia Fotografia
		{
			get
			{
				return this._Fotografia.Entity;
			}
			set
			{
				Fotografia previousValue = this._Fotografia.Entity;
				if (((previousValue != value) 
							|| (this._Fotografia.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fotografia.Entity = null;
						previousValue.Animal.Remove(this);
					}
					this._Fotografia.Entity = value;
					if ((value != null))
					{
						value.Animal.Add(this);
						this._IdFotografia = value.Id;
					}
					else
					{
						this._IdFotografia = default(Nullable<int>);
					}
					this.SendPropertyChanged("Fotografia");
				}
			}
		}
		
		[Association(Name="Raza_Animal", Storage="_Raza", ThisKey="IdRaza", OtherKey="Id", IsForeignKey=true)]
		public Raza Raza
		{
			get
			{
				return this._Raza.Entity;
			}
			set
			{
				Raza previousValue = this._Raza.Entity;
				if (((previousValue != value) 
							|| (this._Raza.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Raza.Entity = null;
						previousValue.Animal.Remove(this);
					}
					this._Raza.Entity = value;
					if ((value != null))
					{
						value.Animal.Add(this);
						this._IdRaza = value.Id;
					}
					else
					{
						this._IdRaza = default(int);
					}
					this.SendPropertyChanged("Raza");
				}
			}
		}
		
		[Association(Name="Talla_Animal", Storage="_Talla", ThisKey="IdTalla", OtherKey="Id", IsForeignKey=true)]
		public Talla Talla
		{
			get
			{
				return this._Talla.Entity;
			}
			set
			{
				Talla previousValue = this._Talla.Entity;
				if (((previousValue != value) 
							|| (this._Talla.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Talla.Entity = null;
						previousValue.Animal.Remove(this);
					}
					this._Talla.Entity = value;
					if ((value != null))
					{
						value.Animal.Add(this);
						this._IdTalla = value.Id;
					}
					else
					{
						this._IdTalla = default(Nullable<int>);
					}
					this.SendPropertyChanged("Talla");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AniLot(AniLot entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_AniLot(AniLot entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
		
		private void attach_EngrasamientoCanal(EngrasamientoCanal entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_EngrasamientoCanal(EngrasamientoCanal entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
		
		private void attach_LibroGenealogico(LibroGenealogico entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_LibroGenealogico(LibroGenealogico entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
		
		private void attach_Peso(Peso entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_Peso(Peso entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
		
		private void attach_RendimientoCanal(RendimientoCanal entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_RendimientoCanal(RendimientoCanal entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
		
		private void attach_Secado(Secado entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_Secado(Secado entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
		
		private void attach_TipificacionCanal(TipificacionCanal entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_TipificacionCanal(TipificacionCanal entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
		
		private void attach_Asignacion(Asignacion entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_Asignacion(Asignacion entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
		
		private void attach_Analisis(Analisis entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_Analisis(Analisis entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
		
		private void attach_Resena(Resena entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_Resena(Resena entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
		
		private void attach_AniPro(AniPro entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_AniPro(AniPro entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
		
		private void attach_Gasto(Gasto entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_Gasto(Gasto entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
		
		private void attach_Celo(Celo entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_Celo(Celo entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
		
		private void attach_SincronizacionCelo(SincronizacionCelo entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_SincronizacionCelo(SincronizacionCelo entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
		
		private void attach_Lactacion(Lactacion entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_Lactacion(Lactacion entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
		
		private void attach_Inseminacion(Inseminacion entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_Inseminacion(Inseminacion entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
		
		private void attach_Inseminacion1(Inseminacion entity)
		{
			this.SendPropertyChanging();
			entity.Animal1 = this;
		}
		
		private void detach_Inseminacion1(Inseminacion entity)
		{
			this.SendPropertyChanging();
			entity.Animal1 = null;
		}
		
		private void attach_Inseminacion2(Inseminacion entity)
		{
			this.SendPropertyChanging();
			entity.Animal2 = this;
		}
		
		private void detach_Inseminacion2(Inseminacion entity)
		{
			this.SendPropertyChanging();
			entity.Animal2 = null;
		}
		
		private void attach_DiagInseminacion(DiagInseminacion entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_DiagInseminacion(DiagInseminacion entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
		
		private void attach_Estancia(Estancia entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_Estancia(Estancia entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
		
		private void attach_Aborto(Aborto entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_Aborto(Aborto entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
		
		private void attach_Parto(Parto entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_Parto(Parto entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
		
		private void attach_DiagAnimal(DiagAnimal entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_DiagAnimal(DiagAnimal entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
		
		private void attach_CondicionCorporal(CondicionCorporal entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_CondicionCorporal(CondicionCorporal entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
		
		private void attach_Compra(Compra entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_Compra(Compra entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
		
		private void attach_Movimiento(Movimiento entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_Movimiento(Movimiento entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
		
		private void attach_Stock(Stock entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_Stock(Stock entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
		
		private void attach_Baja(Baja entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_Baja(Baja entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
		
		private void attach_Alta(Alta entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_Alta(Alta entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
	}
	
	[Table(Name="dbo.Baja")]
	public partial class Baja : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdTipo;
		
		private int _IdAnimal;
		
		private string _Detalle;
		
		private System.Nullable<decimal> _Importe;
		
		private System.DateTime _Fecha;
		
		private bool _Modificable;
		
		private string _NumeroGuia;
		
		private EntityRef<Animal> _Animal;
		
		private EntityRef<TipoBaja> _TipoBaja;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdTipoChanging(int value);
    partial void OnIdTipoChanged();
    partial void OnIdAnimalChanging(int value);
    partial void OnIdAnimalChanged();
    partial void OnDetalleChanging(string value);
    partial void OnDetalleChanged();
    partial void OnImporteChanging(System.Nullable<decimal> value);
    partial void OnImporteChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    partial void OnModificableChanging(bool value);
    partial void OnModificableChanged();
    partial void OnNumeroGuiaChanging(string value);
    partial void OnNumeroGuiaChanged();
    #endregion
		
		public Baja()
		{
			this._Animal = default(EntityRef<Animal>);
			this._TipoBaja = default(EntityRef<TipoBaja>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdTipo", DbType="Int NOT NULL")]
		public int IdTipo
		{
			get
			{
				return this._IdTipo;
			}
			set
			{
				if ((this._IdTipo != value))
				{
					if (this._TipoBaja.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTipoChanging(value);
					this.SendPropertyChanging();
					this._IdTipo = value;
					this.SendPropertyChanged("IdTipo");
					this.OnIdTipoChanged();
				}
			}
		}
		
		[Column(Storage="_IdAnimal", DbType="Int NOT NULL")]
		public int IdAnimal
		{
			get
			{
				return this._IdAnimal;
			}
			set
			{
				if ((this._IdAnimal != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAnimalChanging(value);
					this.SendPropertyChanging();
					this._IdAnimal = value;
					this.SendPropertyChanged("IdAnimal");
					this.OnIdAnimalChanged();
				}
			}
		}
		
		[Column(Storage="_Detalle", DbType="VarChar(150)")]
		public string Detalle
		{
			get
			{
				return this._Detalle;
			}
			set
			{
				if ((this._Detalle != value))
				{
					this.OnDetalleChanging(value);
					this.SendPropertyChanging();
					this._Detalle = value;
					this.SendPropertyChanged("Detalle");
					this.OnDetalleChanged();
				}
			}
		}
		
		[Column(Storage="_Importe", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> Importe
		{
			get
			{
				return this._Importe;
			}
			set
			{
				if ((this._Importe != value))
				{
					this.OnImporteChanging(value);
					this.SendPropertyChanging();
					this._Importe = value;
					this.SendPropertyChanged("Importe");
					this.OnImporteChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Column(Storage="_Modificable", DbType="Bit NOT NULL")]
		public bool Modificable
		{
			get
			{
				return this._Modificable;
			}
			set
			{
				if ((this._Modificable != value))
				{
					this.OnModificableChanging(value);
					this.SendPropertyChanging();
					this._Modificable = value;
					this.SendPropertyChanged("Modificable");
					this.OnModificableChanged();
				}
			}
		}
		
		[Column(Storage="_NumeroGuia", DbType="VarChar(14)")]
		public string NumeroGuia
		{
			get
			{
				return this._NumeroGuia;
			}
			set
			{
				if ((this._NumeroGuia != value))
				{
					this.OnNumeroGuiaChanging(value);
					this.SendPropertyChanging();
					this._NumeroGuia = value;
					this.SendPropertyChanged("NumeroGuia");
					this.OnNumeroGuiaChanged();
				}
			}
		}
		
		[Association(Name="Animal_Baja", Storage="_Animal", ThisKey="IdAnimal", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.Baja.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.Baja.Add(this);
						this._IdAnimal = value.Id;
					}
					else
					{
						this._IdAnimal = default(int);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		[Association(Name="TipoBaja_Baja", Storage="_TipoBaja", ThisKey="IdTipo", OtherKey="Id", IsForeignKey=true)]
		public TipoBaja TipoBaja
		{
			get
			{
				return this._TipoBaja.Entity;
			}
			set
			{
				TipoBaja previousValue = this._TipoBaja.Entity;
				if (((previousValue != value) 
							|| (this._TipoBaja.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoBaja.Entity = null;
						previousValue.Baja.Remove(this);
					}
					this._TipoBaja.Entity = value;
					if ((value != null))
					{
						value.Baja.Add(this);
						this._IdTipo = value.Id;
					}
					else
					{
						this._IdTipo = default(int);
					}
					this.SendPropertyChanged("TipoBaja");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Alta")]
	public partial class Alta : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdTipo;
		
		private int _IdAnimal;
		
		private string _Detalle;
		
		private System.Nullable<decimal> _Importe;
		
		private System.DateTime _Fecha;
		
		private bool _Modificable;
		
		private string _NumeroGuia;
		
		private EntityRef<Animal> _Animal;
		
		private EntityRef<TipoAlta> _TipoAlta;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdTipoChanging(int value);
    partial void OnIdTipoChanged();
    partial void OnIdAnimalChanging(int value);
    partial void OnIdAnimalChanged();
    partial void OnDetalleChanging(string value);
    partial void OnDetalleChanged();
    partial void OnImporteChanging(System.Nullable<decimal> value);
    partial void OnImporteChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    partial void OnModificableChanging(bool value);
    partial void OnModificableChanged();
    partial void OnNumeroGuiaChanging(string value);
    partial void OnNumeroGuiaChanged();
    #endregion
		
		public Alta()
		{
			this._Animal = default(EntityRef<Animal>);
			this._TipoAlta = default(EntityRef<TipoAlta>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdTipo", DbType="Int NOT NULL")]
		public int IdTipo
		{
			get
			{
				return this._IdTipo;
			}
			set
			{
				if ((this._IdTipo != value))
				{
					if (this._TipoAlta.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTipoChanging(value);
					this.SendPropertyChanging();
					this._IdTipo = value;
					this.SendPropertyChanged("IdTipo");
					this.OnIdTipoChanged();
				}
			}
		}
		
		[Column(Storage="_IdAnimal", DbType="Int NOT NULL")]
		public int IdAnimal
		{
			get
			{
				return this._IdAnimal;
			}
			set
			{
				if ((this._IdAnimal != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAnimalChanging(value);
					this.SendPropertyChanging();
					this._IdAnimal = value;
					this.SendPropertyChanged("IdAnimal");
					this.OnIdAnimalChanged();
				}
			}
		}
		
		[Column(Storage="_Detalle", DbType="VarChar(150)")]
		public string Detalle
		{
			get
			{
				return this._Detalle;
			}
			set
			{
				if ((this._Detalle != value))
				{
					this.OnDetalleChanging(value);
					this.SendPropertyChanging();
					this._Detalle = value;
					this.SendPropertyChanged("Detalle");
					this.OnDetalleChanged();
				}
			}
		}
		
		[Column(Storage="_Importe", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> Importe
		{
			get
			{
				return this._Importe;
			}
			set
			{
				if ((this._Importe != value))
				{
					this.OnImporteChanging(value);
					this.SendPropertyChanging();
					this._Importe = value;
					this.SendPropertyChanged("Importe");
					this.OnImporteChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Column(Storage="_Modificable", DbType="Bit NOT NULL")]
		public bool Modificable
		{
			get
			{
				return this._Modificable;
			}
			set
			{
				if ((this._Modificable != value))
				{
					this.OnModificableChanging(value);
					this.SendPropertyChanging();
					this._Modificable = value;
					this.SendPropertyChanged("Modificable");
					this.OnModificableChanged();
				}
			}
		}
		
		[Column(Storage="_NumeroGuia", DbType="VarChar(14)")]
		public string NumeroGuia
		{
			get
			{
				return this._NumeroGuia;
			}
			set
			{
				if ((this._NumeroGuia != value))
				{
					this.OnNumeroGuiaChanging(value);
					this.SendPropertyChanging();
					this._NumeroGuia = value;
					this.SendPropertyChanged("NumeroGuia");
					this.OnNumeroGuiaChanged();
				}
			}
		}
		
		[Association(Name="Animal_Alta", Storage="_Animal", ThisKey="IdAnimal", OtherKey="Id", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.Alta.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.Alta.Add(this);
						this._IdAnimal = value.Id;
					}
					else
					{
						this._IdAnimal = default(int);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		[Association(Name="TipoAlta_Alta", Storage="_TipoAlta", ThisKey="IdTipo", OtherKey="Id", IsForeignKey=true)]
		public TipoAlta TipoAlta
		{
			get
			{
				return this._TipoAlta.Entity;
			}
			set
			{
				TipoAlta previousValue = this._TipoAlta.Entity;
				if (((previousValue != value) 
							|| (this._TipoAlta.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoAlta.Entity = null;
						previousValue.Alta.Remove(this);
					}
					this._TipoAlta.Entity = value;
					if ((value != null))
					{
						value.Alta.Add(this);
						this._IdTipo = value.Id;
					}
					else
					{
						this._IdTipo = default(int);
					}
					this.SendPropertyChanged("TipoAlta");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
