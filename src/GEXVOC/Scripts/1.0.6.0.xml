<?xml version="1.0" encoding="utf-8" ?>
<ElementoVersion
  Version="1.0.6.0"
  Fecha="10/09/2008"
  Descripcion=" 
  - Se ha programado el módulo de versionado que nos permite comprobar y actualizar la versión de los datos en función de la versión de la aplicación.
    * Se nos permite instalar una versión posterior a la actual, o incluso varias posteriores a la actual.
    * No se permite ejecutar una versión de la aplicación en la que los datos correspondan a una versión más reciente.
    * Si se produce un error en la actualización consulte con su administrador para solucionar el problema.
  - Se ha modificado el instalador para compatibilidad con versionado.
    * Permite instalar o no el 'Conjunto de Datos', en este último caso la aplicación actualizará el existente.
  - Se ha creado la herramienta 'Copias de Seguridad', (Solo puede ser ejecutada en equipos tipo Servidor)    
    * Permite hacer copias de seguridad de la base de datos.
    * Permite restaurar copias de seguridad previas."
  Script="
---------------------------------------------------------------
-----  CREAR EL PROCEDIMIENTO ALMACENADO ShrinkGEXVOCLog ------
---------------------------------------------------------------
USE [gexvoc]
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'ShrinkGEXVOCLog')
	BEGIN
		DROP  Procedure  ShrinkGEXVOCLog
	END
GO

CREATE Procedure ShrinkGEXVOCLog AS
BEGIN	
	SET NOCOUNT ON;
	DBCC SHRINKFILE (N'gexvoc_log' , 0) WITH NO_INFOMSGS;	
END
GO


GRANT EXEC ON ShrinkGEXVOCLog TO PUBLIC
GO

---------------------------------------------------------------
-----  CREAR EL PROCEDIMIENTO ALMACENADO BackupGEXVOC ------
---------------------------------------------------------------
USE [master]
GO

IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'BackupGEXVOC')
	BEGIN
		DROP  Procedure  BackupGEXVOC
	END

GO

CREATE Procedure dbo.BackupGEXVOC
	(		
		@Operation		varchar(255),
		@DiskFileName	varchar(255),
		@BackupName		varchar(255) = NULL
	) AS
BEGIN

	SET NOCOUNT ON; 
	if (upper(@Operation) = 'BACKUP') 
	begin	
		BACKUP DATABASE [gexvoc] TO  DISK = @DiskFileName 
		WITH NOFORMAT, NOINIT,  NAME = @BackupName, SKIP, NOREWIND, NOUNLOAD,  STATS = 10;
		BACKUP LOG [gexvoc] with TRUNCATE_ONLY;

		exec gexvoc.dbo.ShrinkGexVOCLog
	end

	if (upper(@Operation) = 'RESTORE') 
	begin
		-- Se carga todas las conexiones a la BD gexvoc.
		DECLARE spids2Kill CURSOR FAST_FORWARD for
				select 
					sproc.spid
				from 
					master.dbo.sysprocesses sproc 
					inner join
						master.dbo.sysdatabases sdb
					  on
						sproc.dbid = sdb.dbid
				where
					upper(sdb.name) = 'GEXVOC';
		declare	@spid integer;
		declare @ExecCommand varchar(255);

		open spids2Kill;
		fetch next from spids2Kill into @spid;

		while @@FETCH_STATUS = 0
		begin
			set @ExecCommand = 'Kill ' + convert(varchar, @spid) + ';';
			exec (@ExecCommand);

			fetch next from spids2Kill into @spid;
		end

		close spids2Kill;
		deallocate spids2Kill;

		RESTORE DATABASE [gexvoc] FROM  DISK = @DiskFileName WITH  FILE = 1,  NOUNLOAD,  STATS = 10
	end

END


GO


GRANT EXEC ON BackupGEXVOC TO PUBLIC
GO

"
/>
